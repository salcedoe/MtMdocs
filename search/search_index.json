{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Muddling Through Medical Imaging","text":"<p>A beginner\u2019s guide to barely understanding programming concepts so that you can tell your friends that you know coding.</p> <p>These days, \"everything's computer\", so you might as well start learning this fandangled computer stuff. This is your Guide to learning the basics (and I mean basics) of:</p> <ul> <li>Computer Programming</li> <li>Image Processing</li> <li>Machine Learning</li> <li>Manipulating Medical Image Datasets</li> </ul>"},{"location":"#software","title":"Software","text":"<p>After using this guide, you will be barely proficient in using</p> <ul> <li>MATLAB</li> <li>FIJI</li> <li>3D Slicer</li> </ul>"},{"location":"#author","title":"Author","text":"<p>Ernesto Salcedo is an Assistant Professor at the University of Colorado School of Medicine. He is a Sensory Neuroscientist and teaches in the Modern Human Anatomy Program.</p> <p>Ernesto Salcedo, PhD Modern Human Anatomy University of Colorado School of Medicine 2024</p> <p></p>"},{"location":"dataProcessing/","title":"Data Processing","text":"<p>Now that we have learned to package our data into variables, we are going to start to process that data. Data processing is the art of turning raw, messy data into something useful. It involves collecting, cleaning, transforming, and analyzing data so it can be used for decision-making, research, or  machine learning.</p> <p>In this section, we'll muddle our way through some basic data processing, including some stats and data visualization using MATLAB.</p> <p></p> <p>XKCD 2582: Data Trap</p>"},{"location":"dataProcessing/HypTesting/","title":"Hypothesis Testing","text":"<p>Overview of Topics Covered</p> <ul> <li>p-values</li> <li>Hypothesis testing for Parametric Data</li> <li>Hypothesis testing for Nonparametric data</li> </ul> <p>Statistics do not tell us whether we are right. It tells us the chances of being wrong. When we repeat an experiment, we almost never get exactly the same results. Instead, repeated measurements span a range of values due to biological variability and the precision limits of measuring equipment. But if our measurements are going to be different each time, how do we determine whether a measurement in a given sample is truly different or just randomly different?</p> <p>Answer: we use statistics. Specifically, we use hypothesis testing to determine how likely two samples are different: it's a probabilities outcome, not a definite YES/NO result.</p> <p>Hypothesis testing involves making assumptions: either there IS or there IS NOT a statistical difference between the samples. The default assumption assumes no difference\u2014this is the Null Hypothesis. The alternative is the opposite and is called the Alternative Hypothesis. This is usually what you are testing for.</p> <p>Null vs Alternative Hypothesis</p> <ul> <li>Null Hypothesis (\\(H_o\\)): No difference between the two samples being compared</li> <li>Alternative Hypothesis (\\(H_1\\)): There is a difference between the samples</li> </ul>"},{"location":"dataProcessing/HypTesting/#control-vs-experimental-groups","title":"Control vs Experimental Groups","text":"<p>One of the most fundamental experimental designs used with Hypothesis Testing is to compare a control group with an independent group that has been subjected to some intervention. The control group serves as a point of comparison to the independent (or experimental group). For these types of experiments, the Null hypothesis is \"There is no difference between the control and experimental group\" or \"Your elixir didn't do anything \u2014 I'm still not the fairest of them all\". The Alternative Hypothesis is that there is a difference between the groups.</p>"},{"location":"dataProcessing/HypTesting/#p-values","title":"p-values","text":"<p>To decide whether to accept the Null or Aternative Hypothesis, you create a probability cut-off or p-value(1).</p> <ol> <li>or \"Alpha Level of Significance\" if you're a stats book.</li> </ol> <p>The most common p-value used is <code>0.05</code>, or <code>5%</code>. With a <code>0.05</code> p-value, we assume two samples are just random variations from the same population (Null Hypothesis), unless that variation would only happen in 5% of the cases or fewer. If the calculated p-value of the sample difference is smaller than <code>0.05</code>, then we reject the Null Hypothesis and accept the Alternative Hypothesis. If we accept the Alternative Hypothesis, we also accept the possibility that we may be wrong in 5% of the cases. That is, the probability that the samples are the same is roughly 5% (or lower), even though we rejected the Null Hypothesis.</p> <p></p> <p>Correcting p-values</p> <p>If you are thinking that <code>5%</code> is actually not that unlikely, then you would be right. Five out of a hundred times is also one out of twenty times and that happens more often than you would think. If you are doing a lot of hypotheses testing, then you may need to adjust your p-value to take this into consideration. For example, if you are testing twenty different things using a <code>0.05</code> p-value, one of things you are testing may just randomly fall below the p-value criteria because thats how randomness works. There are many ways to adjust the p-value depending on the number of sample comparisons, including the Bonferonni correction or the False Discovery Rate. Talk to a Doctor if you feel you need to correct your p-value.</p>"},{"location":"dataProcessing/HypTesting/#the-dark-side-of-the-p-value","title":"The dark side of the p-value","text":"<p>The danger with p-values is the temptation to use a seductively low p-value as definitive proof of the alternative hypothesis. The p-value doesn't actually do that.  Imagine that you have a coin that you suspect is weighted toward heads. Your null hypothesis is that the coin is fair. You flip it 100 times and get more heads than tails. The p-value won\u2019t tell you whether the coin is fair, but it will tell you the probability that you\u2019d get at least as many heads as you did if the coin was fair. That\u2019s it \u2014 nothing more. Believing that a low p-value definitively tells you that the coin is unfair is known as the prosecutor's fallacy. (1)</p> <ol> <li>Adapted from: FiveThirtyEight - Not Even Scientists Can Easily Explain P-values</li> </ol> <p>And remember, this whole process is based on making assumptions. If your hypothesis was pretty unlikely to start with, getting a p-value of 0.05 or even 0.01, doesn't necessarily prove the hypothesis (e.g. covid vaccination is ineffective), it simply reports the probabilities of getting the results that you got, and that perhaps your hypothesis deserves another look. (1)</p> <ol> <li>Adapted from: Nuzzo, R. Scientific method: Statistical errors. Nature 506, 150\u2013152 (2014)</li> </ol> <p>The Prosecutor's Fallacy</p> <p>The danger of hypothesis testing is sometimes you can get really low p-values, even when the real effect has a very low probability. Say you want to test the effectiveness of the COVID-19 vaccine. One way to test its effectiveness might be to simply compare the number of vaccinated and unvaccinated people who are hospitalized with COVID-19. Using hypothesis testing, you likely will find a significantly larger number of people who were vaccinated and hospitalized. Based on this result, and a low p-value, you may be tempted to conclude that the vaccine is ineffective and somehow makes you more susceptive to being hospitalized. However, as the diagram below illustrates, this fails to take into consideration the large difference in the total number of people who are vaccinated vs those who are unvaccinated. In this exaggerated example, we have far more vaccinated people (in pink) vs unvaccinated people (in green): 100 to 10. So, 10 times more people are vaccinated than unvaccinated. Since there are so few unvaccinated people, even if a high percentage of these people get sick, you still get a small number of people. In this example,  50% of the 10 unvaccinated people got hospitalized, so you get 5 people hospitalized. By comparison, since the number of vaccinated people is much higher, even a small percentage of this populate will result in a larger number. In this example, just 10% of the vaccinated people were hospitalized, which is 10 people \u2014 twice as many as the unvaccinated people who were hospitalized. So, even though its a much smaller percentage of the total population, you get twice as many vaccinated people than unvaccinated people hospitalized in this exaggerated example. The reality was more subtle than this, but still striking. We know the vaccine effectiveness range is roughly 90-95%, meaning if 100 unvaccinated people get hospitalized, 5 vaccinated people would be hospitalized. Considering the larger percentage of people who got vaccinated during the pandemic (in the 80% range), it was highly probable there would be more vaccinated than unvaccinated people that were hospitalized (and this actually happened). Again, it is simply a numbers game.</p> <p></p> <p>Adapted from: Base Rate Fallacy with Vaccines</p>"},{"location":"dataProcessing/HypTesting/#hypothesis-testing-in-matlab","title":"Hypothesis Testing in MATLAB","text":"<p>Hypothesis testing isn't always just testing whether samples are different. You can also test if samples are normally distributed or if the samples have equal variance.  MATLAB has many different functions that perform different types of hypothesis testing, including:</p> <ol> <li><code>adtest</code> - Anderson Darling test for normality</li> <li><code>vartest2</code> - F-test for equal variance</li> <li><code>ttest2</code> - Two Sample t-test</li> </ol> <p>While the inputs vary, the outputs from all these functions (at least the first 2 outputs), take the following form:</p> <ul> <li>h: a boolean. If 1, then the test rejects then null hypothesis.</li> <li>p: The p-value. p-values range from 0 to 1.  Less than 0.05 is often considered significantly different.</li> </ul> <p>You can find the Null Hypothesis in the MATLAB documentation, but sometimes its a little confusing.</p>"},{"location":"dataProcessing/HypTesting/#testing-normal-data","title":"Testing Normal Data","text":"<p>aka Parametric Testing</p> <p>A common hypothesis test for normally-distributed data is the Student's t-test, a test originally devised to ensure Guinness beer stayed delicious. Because t-tests rely on the data having a probability distribution that can be mathematically modeled, like a Normal Curve, this type of testing is also called a Parametric Test.</p> <p>Key Characteristics of a Parametric test</p> <ul> <li>They assume a normal distribution and equal variance for the data.</li> <li>They are best used when the sample size is greater than 30</li> <li>They are very powerful when used correctly</li> </ul> <p>The t-test assumes that the data comes from a population having both a Normal Distribution and Equal Variance (same variance for both samples). So, before performing a t-test, you should test your samples for these properties.</p> <p>For this example, we will use fake test scores that are included with MATLAB. From this dataset, we will test the following hypotheses:</p> <ul> <li>Null Hypothesis: Exam Scores 1 and 4 are not significantly different (i.e. the same)</li> <li>Alternative Hypothesis: Exam scores 1 and 4 are significantly different</li> </ul> Load example data and plot as histogram<pre><code>load examgrades.mat % load fake dataset grades\n\nx1 = grades(:,1); % extract exam 1 grades\nx4 = grades(:,4); % extract exam 4 grades\n\nfigure(Visible=\"on\");\nhistogram(x1) % exam 1 grades\nhold on \nhistogram(x4) % exam 4 grades\nlegend(\"Exam 1\",\"Exam 4\")\n</code></pre> <p></p> <p>Loading the <code>examgrades.mat</code> file returns a numeric 120X5 matrix as the variable <code>grades</code>. This matrix contains exam scores ranging from 0 to 100. The scores for a given exam are organized by column, so column 1 contains Exam 1 scores, column 2 contains Exam 2 scores, etc. There are 5 different exams (columns) and 120 students (rows). Plotted here is a histogram of the scores from Exam 1 (blue) and 4 (orange). The distribution of scores appears to be normal for both exams.</p>"},{"location":"dataProcessing/HypTesting/#testing-for-normality","title":"Testing for Normality","text":"<p>Eyeballing the histograms, it looks like the data is normally distributed. But in an official report, you probably want a more officious way to state the data was normal. Fortunately, there are several different tests you can use.</p> <p>To test if your samples have a normal distribution, you can use the Anderson Darling test with the MATLAB function <code>adtest</code>(1).</p> <ol> <li>There are other tests for normality. This is just one that comes with MATLAB.</li> </ol> <p>As indicated in the documentation, <code>adtest</code> uses the following hypotheses:</p> <ol> <li>Null Hypothesis: the data comes from a population with normal distribution</li> <li>Alternative Hypothesis: the data does not come from a population with a normal distribution.</li> </ol> <p>In the following example, we test the Exam 1 and Exam 4 scores for normality.</p> Testing for Normality using the Anderson Darling test<pre><code>[h1,p1] = adtest(x1) %  Anderson Darling test for Exam 1\n[h4,p4] = adtest(x4) %  Anderson Darling test for Exam 4\n</code></pre> result<pre><code>h1 =\n  logical\n    0\n\np1 = \n    0.18539\n\nh4 =\n  logical\n    0\n\np4 = \n    0.15005\n</code></pre> <p>\u2026Since <code>h1=0</code> and <code>p1 &gt; 0.05</code>, you fail to reject the Null Hypothesis for <code>x1</code> (Exam 1), meaning you accept the alternative hypothesis that the Exam 1 grades have a normal distribution and you can use them in a t-test. We get the same result for <code>x4</code>, the Exam 4 grades. So, the samples are normal. On to the next step.</p>"},{"location":"dataProcessing/HypTesting/#testing-for-equal-variance","title":"Testing for Equal Variance","text":"<p>In addition to having a normal distribution, your data should also have equal variance for t-tests. To test for equal variance, you can use vartest2. As in the adtest, the Null Hypothesis is that the samples have Equal Variance.</p> <p>As you can see The syntax is  similar, except that you plug both <code>x</code> and <code>y</code> into the function call:</p> Testing for Equal Variance using an F-test<pre><code>[hv,pv] = vartest2(x,y)\n</code></pre> result<pre><code>hv = \n    0\n\npv = \n    0.88118\n</code></pre> <p>\u2026Again, since <code>hv=0</code> and <code>pv &gt; 0.05</code>, we fail to reject the null hypothesis, meaning the Exam Scores have equal variance and can be used in a t-test.</p>"},{"location":"dataProcessing/HypTesting/#t-testing","title":"t-testing","text":"<p>Finally, having confirmed Normality and Equal Variance, we are ready to perform our t-test. In this example, we have two samples, so we will use the two-sample t-test function <code>ttest2</code>.</p> <p>Hypotheses for the two-sample t-test:</p> <ul> <li>Null Hypothesis: the two samples have the same mean</li> <li>Alternative Hypothesis: the two samples have significantly different means.</li> </ul> <p>As you can see below, the syntax is very similar to the other tests, although here we add a couple of extra optional outputs:</p> Testing if samples are significant different using a t-test<pre><code>[h,p] = ttest2(x1,x4) % are Exam 1 and 4 statistically different?\n</code></pre> result<pre><code>h = \n    0\np = \n      0.98218\nci = 2\u00d71\n      -2.2277\n       2.1777\nstats = struct with fields:\n    tstat: -0.022359\n       df: 238\n       sd: 8.6609\n</code></pre> <p>\u2026Here, <code>h=0</code> and <code>p &gt; 0.05</code> means that x1 and x4 are likely samples with the same means, meaning that Exam 1 and Exam 4 are not significantly different. <code>ci</code> indicates the 95% confidence interval, while the <code>stats</code> structure includes details about the t-test for the stats nerds in the audience. You also use this information when you report the results (see below)</p> <p>If we review the normal curves used for the t-tests, we can see they are virtually identical, which is why the t-test calculated such a high p-value and failed to reject the Null Hypothesis.</p> <p></p> <p>Normal curves fitted to the histograms of Exam scores are nearly identical. Mean of Exam 1 = 75\u00b18.7, Mean of Exam 4 = 75\u00b18.6. , we in fact see that they are very similar.</p> Code to create Normal Curve Plots in the figure above Fit Data and Plot the PDF<pre><code>pd1 = fitdist(x1,'Normal'); % fit a Normal curve to Exam 1 scores\nx = linspace(45,100); % create range of values that matches the range of scores\ny1 = pdf(pd1,x); % interpolate the probability of each score in x based on the normal curve for Exam 1\n\npd2 = fitdist(x4, 'Normal'); % fit a Normal curve to Exam 1 scores\ny2 = pdf(pd2,x); % interpolate the probability of each score in x based on the normal curve for Exam 4\n\nfigure(Visible=\"on\"); % plot the results as line plots\nplot(x,y1,'-',LineWidth=2) \nhold on\nplot(x,y2,'-', LineWidth=2)\nxlim([44 105])\n\nRGB = orderedcolors(\"gem\"); % get figure colors\n\nxline(pd1.mu,'k:','mean 1','LabelHorizontalAlignment','left','LabelVerticalAlignment','bottom','DisplayName','mean 1','Color',RGB(1,:))\nxline(pd2.mu,'k:','mean 4','LabelHorizontalAlignment','right','LabelVerticalAlignment','bottom','DisplayName','mean 4','Color',RGB(2,:))\nlgd = legend(\"Exam 1\",\"Exam 4\")\n</code></pre> <p>If we curve Exam 4 by adding 5 points to all scores, we get a significantly different outcome with the t-test:</p> t-test of Exam 1 vs curved Exam 4<pre><code>modX4 = x4+5; % curve exam 4 grades by 5 points\n[h,p] = ttest2(x1,modX4); % t-test\ntext(50,.04,sprintf('p=%1.1e',p)) % add p to axes\n</code></pre> result<pre><code>h = \n    1\np = \n    1.0908e-05\nci = 2\u00d71\n      -7.2277\n      -2.8223\nstats = struct with fields:\n    tstat: -4.4941\n       df: 238\n       sd: 8.6609\n</code></pre> <p></p> <p>Normal Curves of Exam 1 and modified Exam 4 Now the Exam Scores are significantly different with the mean of the modified Exam 4 equal to <code>80\u00b18.6</code> and the p-value calculated by the t-test to be a really small <code>p=0.000011</code>.</p> Code to curve Exam 4 grades, refit data, and replot t-test Comparing Exam 1 to a curved Exam 4<pre><code>pd3 = fitdist(x4+5,'Normal'); % Curve Exam 4 scores by 5 points and then fit normal curve\ny3 = pdf(pd3,x); % interpolate y values from Probability Density Function\n\nfigure; % plot curves\nplot(x,y1,'-',LineWidth=2) \nhold on\nplot(x,y3,'-', LineWidth=2)\nxline(pd1.mu,'k:','mean 1','LabelHorizontalAlignment','left','LabelVerticalAlignment','bottom','DisplayName','mean 1','Color',(H(1)))\nxline(pd3.mu,'k:','mean 4','LabelHorizontalAlignment','right','LabelVerticalAlignment','bottom','DisplayName','mean 4','Color',H(2))\nlegend(\"Exam 1\",\"Exam 4\")\nxlim([44 105])\ntext(50,.04,sprintf('p=%1.1e',p)) % add p to axes\n</code></pre> <p>When you report the results of a t-test, you typically report the mean, the standard deviation and the outcome of the test, as follows:</p> Formatting the report<pre><code>s = sprintf('Modified Exam 4 scores were significantly higher than Exam 1 scores, ');\ns = sprintf('%s%1.2f \u00b1 %1.2f\" vs %1.2f \u00b1 %1.2f\" (M\u00b1SD), respectively,\\n', s, mean(x1), std(x1),mean(x4+5), std(x4+5));\ns = sprintf('%st(%d) = %1.2f, p &lt; .0001.', s,stats.df, stats.tstat);\ndisp(s)\n</code></pre> <p>Modified Exam 4 scores were significantly higher than Exam 1 scores, 75.01 \u00b1 8.72\" vs 80.03 \u00b1 8.60\" (M\u00b1SD), respectively, t(238) = -4.49, p &lt; .0001.</p> <p>\u2026Notice that we include data from the <code>stats</code> variable as part of the reported t-test outcome.</p> <p>How to properly report a t-test in APA style.</p>"},{"location":"dataProcessing/HypTesting/#testing-non-normal-data","title":"Testing Non-normal data","text":"<p>aka Nonparametric Testing</p> <p>Ok, so what if your data is not Normal? What if you have a small sample size with a bit of a skew. Nonparametric means that mathematically modeling is not used to generate the statistics.</p> <p>Consider the following made-up data:</p> Create Non-normal Data and plot<pre><code>ViralLoad = [3000 1100 800 540 670 1000 960 1200 4650 4200 5000 4200 1300 900 7400 4500 7500 3001 4999 6000]';\nTreatment = categorical([repmat(\"Treated\",10, 1); repmat(\"Untreated\",10, 1)]);\nT = table(ViralLoad,Treatment);\n</code></pre> <p>Here, we have a value called \"Viral Load\" and two categories: \"Treated\" and \"Untreated\". Importantly, there are only 10 data points per group (n=20). So, this is a rather underpowered study (sample size smaller than 30). Presumably a high viral load would be bad, but again, this is all made up. If we plot our data, we get distribution patterns as follows:</p> <p></p> <p>Distribution of Viral Load. The histogram for both samples indicates a non-normal distribution of the data. In the box plots, the median value is not centered inside the interquartile range box\u2014it's closer to 25th . This offset indicates that the data is skewed.</p> Code to generate above plots Plot histogram and boxplots<pre><code>figure;\ntiledlayout(\"horizontal\")\nx = T.ViralLoad(T.Treatment==\"Treated\");\ny = T.ViralLoad(T.Treatment==\"Untreated\");\n\nnexttile\nhistogram(x,10,FaceAlpha=0.35)\nhold on\nhistogram(y,30,FaceAlpha=0.25)\nlegend(\"Treated\",\"Untreated\")\nxlabel(\"Viral Load\")\n\nnexttile\nhold on\n\nswarmchart(T,\"Treatment\",\"ViralLoad\",\"filled\",MarkerFaceColor='k',MarkerFaceAlpha=0.75)\n\ncolors = orderedcolors(\"gem\"); % default color scheme\ncolororder(gca,colors([1 1 2],:)); % match color order in histogram (swarmchart messes up order)\nboxchart(T.Treatment,T.ViralLoad,\"GroupByColor\",T.Treatment,\"ColorGroupLayout\",\"overlaid\")\n\nsgtitle(\"Non-normal Distribution\")\n</code></pre> <p>If we test if data is Normally distributed using the <code>adtest</code>:</p> Test data for Normalacy<pre><code>[h,p] = adtest(T.ViralLoad)\n</code></pre> result<pre><code>h = logical\n   1\np = \n     0.018987\n</code></pre> <p>\u2026Since <code>p&lt;.05</code>, the data is not normal and you should use a non-parametric test, like the Mann-Whitney U test\u2026</p>"},{"location":"dataProcessing/HypTesting/#mann-whitney-u-test","title":"Mann-Whitney U Test","text":"<p>Equivalent to a t-test, but for non-normal data</p> <p>If your data is not normal, but you still want to know if your samples are statistically different, then you run a Mann-Whitney U Test (also known as a rank sum test). The Mann-Whitney test doesn't have all the bells and whistles of a t-test, but it can get the job done in a pinch.</p> <p>Key assumptions for a Mann-Whitney U Test</p> <ul> <li>This test is based on ranking observations, so the variable being compared between the two groups must be continuous (e.g., age, weight, height, heart rate).</li> <li>The data are assumed to have a non-Normal or skewed distribution.</li> <li>While normality is not assumed, the data in both groups should have a similar shape (distribution).</li> <li>The data should come from two randomly selected independent samples (no relationship between groups). If samples are paired (e.g., repeated measures from the same participants), use a paired samples t-test.</li> <li>Each group should have a sufficient sample size, typically more than 5 observations per group.</li> </ul> <p>The function for a Mann Whitney is called <code>ranksum</code>. The syntax is as follows:</p> Mann Whitney U-test of Treated vs Untreated Viral Loads<pre><code>x = T.ViralLoad(T.Treatment==\"Treated\");\ny = T.ViralLoad(T.Treatment==\"Untreated\"); \n\n[p,h, stats] = ranksum(x,y) % mann-whitney test\n</code></pre> result<pre><code>p = \n     0.028306\nh = logical\n   1\nstats = struct with fields:\n       zval: -2.193\n    ranksum: 75.5\n</code></pre> <p>\u2026Since <code>p&lt;0.05</code>, then we reject the Null Hypothesis and accept the Alternative Hypothesis that groups are different.</p> <p>When you report results using a Non-parametric test, you should report the median and interquartile range of values (instead of the mean and standard deviation). Something like the following:</p> Reporting Mann Whitney results<pre><code>groupsummary(T,\"Treatment\",[\"median\",\"range\"]);\n\ns = sprintf('The treated group had a significantly lower viral load than the untreated group,\\n');\ns = sprintf('%smedian=%1.2f vs %1.2f, respectively,',s,  median(x), median(y));\nfprintf('%s as indicated by a Mann-Whitney U-test, U(Nleft=%d, Nright=%d)=%1.2f,z=%1.2f, p=%0.3f.',...\n    s,...\n    numel(x),...\n    numel(y),...\n    stats.ranksum,...\n    stats.zval, ...\n    p)\n</code></pre> result<pre><code>The treated group had a significantly lower viral load than the untreated group,\nmedian=1050.00 vs 3375.00, respectively, as indicated by a Mann-Whitney U-test, U(Nleft=10, Nright=10)=75.50,z=-2.19, p=0.028.\n</code></pre> <p>You can find an example on how to report the results from Mann-Whitney U tests here.</p>"},{"location":"dataProcessing/SamplesDistributions/","title":"Sampling and Distributions","text":"<p>There are three kinds of Lies: Lies, Damned Lies, and Statistics.</p> <p>\u2014\u00a0Benjamin Disraeli (probably).</p> <p>As we muddle through data analysis, we will also be muddling through some basic concepts in statistics. Here we cover arcane topics such as:</p> <ul> <li>Population vs Sample</li> <li>Normal Curves</li> </ul>"},{"location":"dataProcessing/SamplesDistributions/#useful-stats-resources","title":"Useful Stats Resources","text":"<ul> <li> Investopedia Analysis Tools</li> <li> Psych Explained YouTube series</li> <li> MATLAB Statistics Onramp</li> </ul>"},{"location":"dataProcessing/SamplesDistributions/#populations-and-samples","title":"Populations and Samples","text":"<p>When collecting data, it's good to know the data's provenance:</p> <ul> <li>Where did this data come from?</li> <li>How Representative is this Data?</li> </ul> <p> Reference: Investopedia - Populations</p>"},{"location":"dataProcessing/SamplesDistributions/#important-terminology","title":"Important Terminology","text":"<ul> <li>Population (N): the complete set of items or events that share a common attribute, from which data can be gathered and analyzed. Whatever it is that you want to know about. Note the big \"N\" here. Measuring the entire population is usually not practical due to its size, cost, or logistical challenges.</li> <li>Sample (n): a subset of the Population. Note the little \"n\" here. This is typically what you measure.</li> <li>Non-probability Sampling: A sample from what's available, what was convenient to collect. Great for starter data, but may not be representative</li> <li>Random Sampling: Samples selected using a randomized technique designed to increase the validity (or representativeness) of the sample</li> </ul> <p>Examples of Populations vs samples. Populations (in pink) can be All US Citizens, all Adult US citizens, or even just adult citizens in the state of Colorado. Samples (in yellow) would be subsets of whatever you define as your population.</p> <p> Adapted from Psych Explained: Random Sampling</p>"},{"location":"dataProcessing/SamplesDistributions/#groups","title":"Groups","text":"<p>Often we break our samples down into different categories, or groups. Very often, you will read about the Control Group or the Experimental Group. The Control group is typically the unmodified group, while the Experimental group has been treated in some fashion (sometimes called the Treatment Group).</p> <p>So, for example, we could break our CO Citizens Samples down into two groups as follows:</p> <ul> <li>Control Group: those who have never tried marijuana before</li> <li>Experimental group: those who use marijuana daily</li> </ul> <p>And then we measure something else, like response time, and use statistics to determine if there is a difference in response time between the groups.</p>"},{"location":"dataProcessing/SamplesDistributions/#external-validity","title":"External Validity","text":"<p>External what?</p> <p>External Validity is a just a fancy term for defining how representative your sample (n) is of the population (N).</p> <p>The key to a good sample is that it is representative of the entire population. For example, if your population is 50% women, then your sample should be 50% women.</p> <ul> <li>High external validity: Your sample is representative</li> <li>Low external validity: not so much. Your sample may have some bias or is too small (and maybe has a large number of outliers)</li> </ul> <p></p> <p>With a representative sample that has high external validity, you can make inferences (or predictions) about the population at large.</p>"},{"location":"dataProcessing/SamplesDistributions/#the-bell-curve-is-normal","title":"The Bell Curve is Normal","text":"<p>When you measure things, like humans, you will find that their parts vary: height, weight, foot size, the spacing between the eyes (I'm looking at you, Anya Taylor Joy). But each of these measurements won't vary too greatly between humans\u2014they tend to fall with a certain range. If you take a large enough sample (&gt;30) and plot the measurements as a histogram, you should get a histogram that looks something like this:</p> <p></p> <p>Histogram of Female Heights. In this sample of 1000 women, the average height was 63.2 and the standard deviation was 0.25.  Notice how the most frequent heights are clustered around the mean in the center of the histogram. Also notice we don't have any 50\" or 80\" women (4'2\" or 6'7\") in our sample.</p> Generating Normal Data for the above Histogram <p>No women were actually measured for the creation of the above histogram. Instead, we used the random number generator <code>randn</code> in the following code.</p> <pre><code>mu = 63.7; % mean height of women as reported on google\nsigma = 2.5; % standard deviation\nheights = sigma.*randn(1000,1)+mu; % generate random numbers with mean mu and std sigma\nhistogram(heights) % plot histogram\nxline(mu,'--r','mean')\ntitle(sprintf(\"Average Female Height = %1.2f\u00b1%1.2f\",mu,sigma))\nxlabel(\"Height (in)\")\n</code></pre> <p>If you fit a curve to this histogram, you get a bell-shaped curve.</p> <p></p> <p>In fact, this bell-shaped curve  was so common, they called it a \"Normal\" curve (1).</p> <ol> <li>Or, if you're boring, a \"Gaussian\" curve, after the wrong mathematician Johann Gauss.</li> </ol> <p>Anatomy of a Normal Curve</p> <p>A normal curve is determined by two components:</p> <ol> <li>The Mean: which determines the center of the curve.</li> <li>The Standard Deviation (SD): which determines the width of the curve</li> </ol> <p>In a Normal Curve, the Mean, Median, and Mode are all equal.</p> <p> Investopedia: Normal Distribution</p>"},{"location":"dataProcessing/SamplesDistributions/#the-empirical-power-of-the-bell-curve","title":"The Empirical Power of the Bell Curve","text":"<p>I guess that's interesting, but how does that help me in the real world?</p> <p>The bell curve is so powerful because it allows us to calculate the probability of any value in reference to the mean and standard deviation. This something is called a Normal Probability Density Function (PDF)\u2014a fancy term for the math function that creates the normal curve.</p> <p>Key points about the Probability Density Function (PDF)</p> <ul> <li>It is a mathematical function that generates the normal curve.</li> <li>It describes the likelihood of a value occurring within a specific range.</li> <li>The area under the curve represents the total probability, which equals 1.</li> </ul> <p></p> <p>The Normal Probability Distribution Function can predict frequency. \u00b5: the mean, \ud835\udf0e: the standard deviation. Adding up the area under the curve gives you the percentage of measurements that fall in that range. For all normal distributions, 68.3% of the observations will appear within plus or minus one standard deviation of the mean; 95.4% will fall within +/- two standard deviations; and 99.7% within +/- three standard deviations. This fact is sometimes called the \"empirical rule\", because people (math nerds) saw this phenomenon happen over and over. Read more about PDFs here if you are looking for a good soporific.</p> <p>So, for the heights of females, 68% of all heights would fall between -1SD and +1SD, and 95% of heights fall between -2SD and +2SD. We can use these facts to predict the likelihood of any height. For example, a height of 64\" would be pretty likely as\u00a0most female heights fall in that range. And a female height that falls outside three SD from the mean, such as 71.2\", would be fairly unlikely. In the population of women, there are relatively few women with a height of 5'11\" or greater\u2014a condition vernacularly known as being \"really tall\".</p> <p></p> <p>Not sure this helps me in the real world, but ok.</p>"},{"location":"dataProcessing/SamplesDistributions/#seeing-normality","title":"Seeing normality","text":"<p>When analyzing data, it is important to first visualize that data to get a good idea of its distribution. When you do so, look for symmetry in the distribution plot. This is often an indicator of normality.</p> <p>Consider the following comparison of a box plot vs the histogram of the height data:</p> <p></p> <p>Here we have the same female height data plotted as a both a box plot and a histogram. We have turned the histogram on its side for easier comparison. In the histogram, the bars are symmetrically arrayed on either side of the mean (dotted red lin). In the box plot, the mean (middle blue line) is in the center of the interquartile range (IQR) box, or the middle 50% of the data. Also, the whiskers extend to an equal extent on either side of the IQR. Notice in the bar plot how the mean and the median are equal.</p> Code to Plot Box Chart and Histogram <pre><code>figure(Visible=\"on\")\ntiledlayout(\"horizontal\",\"TileSpacing\",\"compact\")\n\nnexttile % bar plot\nhb = boxchart(heights); % box plot\nyline(mu,'r:','label','mean');\nylabel(\"Height (in)\")\ntitle(\"Box plot\")\nylim([55 75]) % y limits\nhb.Parent.XAxis.Visible='off'; % turn off x-axis\ngrid minor % turn on grid\n\nnexttile % histogram\nhistogram(heights,Orientation=\"horizontal\") % histogram\nhy = yline(mu,'r:');\ntitle(\"Histogram\")\nylim([55 75])\n\nsgtitle(\"Female Heights\",fontsize=18)\n</code></pre> <p>Box Plots vs Normal Curves</p> <p>Box plots summarize the data differently then PDFs. A box plot breaks down the distribution by quartiles, while PDFs use the mean and standard deviation.</p> <p></p> <p>IQR = interquartile range. The length of a whisker is typically 1.5 times the IQR.</p> <p>Wikipedia: Interquartile Range</p> <p>A similar symmetry around the mean can be seen in swarm and violin plots.</p> <p></p> <p>Swarm and violin charts of the female heights. Notice that the fattest parts of the plots are centered around the median. This is where the majority of the data is concentrated.</p> Code to Plot Swarm and violin plots <pre><code>figure(Visible=\"on\")\ntiledlayout(\"horizontal\")\n\nnexttile % swarm chart\nmmBoxSwarm([],heights); % overlay box and swarm charts\nylim([55 75]) % set y limits\ntitle(\"Swarm\")\ngrid minor \n\nnexttile % violin chart\nhc = mmBoxSwarm([],heights,\"PlotType\",'violin'); % overlay box and violin\nylim([55 75]) % set y limits\ntitle(\"Violin\")\ngrid minor\n\nsgtitle(\"Female Heights\",fontsize=18)\n</code></pre>"},{"location":"dataProcessing/SamplesDistributions/#size-matters-for-normality","title":"Size matters for Normality","text":"<p>Sample size is an important consideration for data processing. Generally, larger sample sizes offer more reliable results, but practical considerations like cost and time may limit how large a sample may be. A sample of size greater than <code>30</code> is often considered to be a good target to for a normal distribution.</p> <p>As shown below, low sample size can be susceptible to large random effects. Even if a sample comes from a large, normally distributed population (like the heights of all Women), you likely won't get a normal distribution in the sample if your sample size is too small.</p> <p></p> <p>Here we plot a histogram of a female heights with an increasing sample size (n). We don't really see a normal distribution until <code>n=30</code></p> Code to generate the above tiled histogram figure <pre><code>female.mu = 63.7;\nfemale.sigma = 2.5;\n\nfor n=[5 10 20 25 30 100]\n\nfemale.height = female.sigma * randn(n,1) + female.mu;\n\nnexttile \nhistfit(female.height,10); % histogram with normal curve\ncolororder(\"glow12\") % set the color palette to glow12\ntitle(sprintf('n = %d',n)) % add sample size to the title\nxlim([40 80]) % set the x limits for better comparison\nend\n</code></pre>"},{"location":"dataProcessing/SamplesDistributions/#skewed-distributions","title":"Skewed Distributions","text":"<p>There are, of course, other types of data distributions. A unimodal skewed distribution has an asymmetry in the distribution. For example, consider the following:</p> <p></p> <p>Left Skewed Data. In this histogram, the high frequency data is piled up high on right side of the plot, while much of the low frequency data is spread across the left side of the plot. This low frequency data is sometimes called the tail of the plot. Such a distribution of the data is considered to be Skewed Left because the tail is to the left of the high frequency data.</p> <p>Notice that the histogram is not well fit by a normal curve (orange curve) \u2014 there's a big hump on the right and a long tail on the left. By comparison, the following data is skewed right\u2026</p> <p></p> <p>Right Skewed data. Here, the tail is to the right of the highest frequency data.</p>"},{"location":"dataProcessing/SamplesDistributions/#skewed-mean-vs-median","title":"Skewed Mean vs Median","text":"<p>In Normal data, the mean and median are equal. In skewed data, they are not.</p> <p></p> <p>Notice in both datasets that the median value is closer to the highest frequency value (mode) than the mean value. So, for skewed data, you often report the median because it is more representative of the data.</p> Code to generate Histogram Plots Generating and Displaying skewed data<pre><code>% Generate Data\nrng default  % For reproducibility of random numbers\nleft.x = [normrnd(4,1,1,100),normrnd(6,0.5,1,200)]; % left skewed data\nleft.mean = mean(left.x); % calc left mean\nleft.median = median(left.x); % calc left median\n\nright.x = wblrnd(6,1,300,1); % create right skewed data\nright.mean = mean(right.x); % calc right mean\nright.median = median(right.x); % calc right median\n\n% Plot Data\nfigure(Visible=\"on\")\ntiledlayout(\"horizontal\")\n\nnexttile % Plot Left Skewed Data\nhh = histogram(left.x, FaceAlpha=0.15); % histogram left data\nhh.FaceAlpha = 0.25; % box transparency\nhh.EdgeAlpha = 0.25; % edge transparency\ntitle(\"Left Skewed\")\n\nhold on % add left vertical lines\nxline(left.mean,'k-',LineWidth=1,Alpha=1) % plot left mean vert line\nxline(left.median,'r:',LineWidth=1.5) % plot left median vert line\n\nnexttile % Plot Right Skewed Data\nhh = histogram(right.x); % histogram right\nhh.FaceAlpha = 0.25; % box transparency\nhh.EdgeAlpha = 0.25; % edge transparency\n\nhold on % add right vertical lines\nxline(right.mean,'k-',LineWidth=1,Alpha=1) % plot right mean vert line\nxline(right.median,'r:',LineWidth=1.5) % plot right median vert line\ntitle('Right Skewed')\nlegend('data','mean','median') % add legend\n</code></pre> <p>Some of this code adapted from the Mathworks Exploratory Stats documentation.</p>"},{"location":"dataProcessing/SamplesDistributions/#visualizing-skewed-data-in-distribution-plots","title":"Visualizing Skewed Data in Distribution plots","text":"<p>To spot skewed data, look for asymmetry in the plots.  Here we plot our skewed data as box plots.</p> <p></p> <p>Notice for both plots, how the median is off-centered in the interquartile box.  The open-face blue circles indicate the outlier data, which are found in the tails of the skewed distributions. There is also an asymmetry in the extent of the whiskers on either sides of the boxes.</p> Code to generate Box Plots <pre><code>figure(Visible=\"on\")\ntiledlayout(\"horizontal\")\n\nnexttile % plot left skewed data\nhb = boxchart(left.x); % box plot  \nhb.Parent.XAxis.Visible='off'; % hide x-axis\ngrid on % turn on grid\n\ntitle(\"Left Skewed\")\n\nnexttile % plot right skewed data\nhb = boxchart(right.x); % box plot\nhb.Parent.XAxis.Visible='off'; % turn off x-axis\ngrid on % turn on grid\n\ntitle(\"Right Skewed\")\n</code></pre> <p>And here is the same data as a swarm chart overlaid on a box plot\u2026</p> <p></p> <p>Swarm charts add jitter along the x-axis to highlight density so that the fattest (or widest) parts of the plot have the most data points and clustered around the median. As you can see in these plots, fat regions will be off-centered for a skewed dataset.</p> Code to generate Swarm Charts <pre><code>figure(Visible=\"on\")\ntiledlayout(\"horizontal\")\n\nnexttile % plot Left Skewed\nhold on\nswarmchart(ones(1,numel(left.x)),left.x,'filled',MarkerFaceAlpha=0.5) % swarm\nhb = boxchart(ones(1,numel(left.x)),left.x,BoxFaceColor='k',BoxFaceAlpha=0.1); % box\nhb.Parent.XAxis.Visible='off';\ngrid on\n\ntitle(\"Left Skewed\")\n\nnexttile % plot Right skewed\nhold on\nswarmchart(ones(1,300),right.x,'filled',MarkerFaceAlpha=0.5) % swarm\nhb = boxchart(ones(1,300),right.x,BoxFaceColor='k',BoxFaceAlpha=0.1); % box\nhb.Parent.XAxis.Visible='off';\ngrid on\n\ntitle(\"Right Skewed\")\n</code></pre> <p>The shapes of a swarm and violin chart are basically the same since they both use the same density function to determine the extent of the jitter along the x-axis.</p> <p></p> <p>Here we overlay a violin plot on the scatter plot to highlight the similarity in their shapes.</p> Code to Generate the Violin Charts <pre><code>figure(Visible=\"on\")\ntiledlayout(\"horizontal\")\n\nnexttile % Plot Left Skewed Data\nhold on\nswarmchart(ones(1,numel(left.x)),left.x,'filled',MarkerFaceAlpha=0.5) % swarm\nhb = violinplot(ones(1,numel(left.x)),left.x); % violin\nhb.Parent.XAxis.Visible='off';\ngrid on\ntitle(\"Left Skewed\")\n\nnexttile % Plot Right Skewed Data\nhold on\nswarmchart(ones(1,300),right.x,'filled',MarkerFaceAlpha=0.5) % swarm\nhb = violinplot(ones(1,300),right.x); % violin\nhb.Parent.XAxis.Visible='off';\ngrid on\n\ntitle(\"Right Skewed\")\n</code></pre>"},{"location":"dataProcessing/SamplesDistributions/#distributions-all-the-way-down","title":"Distributions all the way down","text":"<p>There are a lot more distributions beyond the scope of this guide. Search for 'probability distributions' if you're interested.</p>"},{"location":"dataProcessing/dataTypes/","title":"Data Types","text":"<p>Data can be broadly categorized into two types:</p> <ol> <li>Quantitative. Also known as Numeric, these data are used to count or measure something. Their values are stored in various numeric classes of MATLAB, including floating-point types (such as double and single) and integer types (such as uint8, uint16, int32, etc.).</li> <li>Qualitative. Also known as Categorical, these data are used to describe something using a label like Male or Female, or Good or Bad. In MATLAB, qualitative data can be stored as logical, string, or categorical arrays (see below), depending on the nature of the categories.</li> </ol> <pre><code>graph TD\n    DATA:::data --&gt; Num[Numbers];\n    DATA --&gt; Cat[Categories];\n    Num --&gt; Disc[Discrete];\n    Num --&gt; Cont[Continuous];\n    Cat --&gt; Nom[Nominal];\n    Cat --&gt; Ord[Ordinal];\n    Cont --&gt; Int(interval)\n    Cont --&gt; Rat(ratio)\n    Rat --&gt; RatX(speed, height, weight)\n    Int --&gt; IntX(Temp, 12-Hour Clocks)\n    IntX --&gt; MatFloat(datetime, single, double)\n    RatX --&gt; MatFloat\n    Disc --&gt; Whole(Whole Numbers)\n    Whole --&gt; WholX(Counts, Ratings,\n     Images)\n    WholX --&gt; MatInt(uint8, uint16, etc.)\n    Nom --&gt; NomDesc(No Order)\n    Ord --&gt; OrdDesc(Ordered)\n    NomDesc --&gt; NomX1(Male, Female)\n    NomDesc --&gt; NomX2(Colors)\n    OrdDesc --&gt; OrdX(Beginner,\n     Intermediate,\n     Advanced)\n    NomX1 --&gt; MatCat[string, categorical]\n    NomX2 --&gt; MatCat\n    OrdX --&gt; MatCat\n    class Num,Disc,Whole,WholX,Cont,Int,IntX,Rat,RatX nums\n    classDef nums fill:#5DADE2  \n    classDef data fill:#F39C12\n    class MatFloat,MatInt,MatCat mats\n    classDef mats fill:#48C9B0\n</code></pre> <p>Categorizing Data</p> <p>Numeric Data can be classified into Discrete or Continuous classes. </p> <ul> <li> <p>Discrete numbers are whole numbers or integers.</p> </li> <li> <p>Continuous numbers have an infinite number of possible values between whole numbers, like <code>1.2</code> or the value of \\(\\pi\\). In statistics, Continuous numbers can be further classified into Interval and Ratio values, depending on whether they have a true absolute zero point (absence of value). The presence or absence of a true zero affects the types of mathematical operations you can perform and the conclusions you can draw from the data. For example, you can't say 20\u00b0C is twice as hot as 10\u00b0C (interval), but you can say 20kg is twice as heavy as 10kg (ratio).</p> <ul> <li> <p>Interval Numbers, like Temperature (1) or Time on a clock, do not have an absolute zero reference. For example, 0 C\u02da or 0 F\u02da Temperature, does not mean no temperature, it simply one value in a range of values. Similarly, 0:00 does not mean the absence of time, it just means midnight. In fact, to handle time values, MATLAB came up with the <code>datetime</code> data type.</p> </li> <li> <p>Ratio Numbers, by comparison, do have an absolute zero reference. For example,  a height of 0 means the absence of height and a weight of 0 means absence of any weight, so measurements like height, weight, speed, are all Ratio Numbers. By the way, time measured in seconds would also be a Ratio number, since in this scenario 0 seconds means the absence of seconds.</p> </li> </ul> <ol> <li>unless you're dealing with Kelvin</li> </ol> </li> </ul> <p>Categorical Data can be further classified into Ordered (Ordinal) or Non-ordered (Nominal) categories. Ordinal categories are categories with an implied order, such as Beginner, Intermediate, or Advanced. Nominal categories do not have an implied order, e.g. Male and Female.</p>"},{"location":"dataProcessing/dataTypes/#categorical-arrays","title":"Categorical Arrays","text":"<p>To handle Qualitative Data, MATLAB created the <code>categorical</code> variable type. Categorical arrays operate similar to string arrays, but they have built-in functions for statistical uses.</p> <p>Consider the following string array.</p> Create String array<pre><code>sex = [\"Male\" \"Male\" \"Female\" \"Female\" \"Male\" \"Female\"] % create string array\n</code></pre> <pre><code>sex = \n\n  1\u00d76 string array\n\n    \"Male\"    \"Male\"    \"Female\"    \"Female\"    \"Male\"    \"Female\"\n</code></pre> <p>We can easily convert this string array into a categorical array using the function <code>categorical</code></p> <pre><code>sex = categorical(sex) % typecast to categorical\n</code></pre> <p>\u2026Here we just overwrite the string array with its categorical version</p> <pre><code>sex = \n\n  1\u00d76 categorical array\n\n     Male      Male      Female      Female      Male      Female \n</code></pre> <p>And that's it. <code>sex</code> is now a categorical array. You can do a lot of the same things with a categorical array that you can do with a string array</p> Create logical array from a categorical array<pre><code>la = sex == \"Male\" % logical array\n</code></pre> <pre><code>la =\n\n  1\u00d76 logical array\n\n   1   1   0   0   1   0\n</code></pre> <p>\u2026Here we create a logical array from the relation operation \"sex is equal to Male\"</p> <p>Categorical also has a lot of built-in functions, designed to make data analysis easier. The function <code>categories</code> returns the categories (or group names) in a categorical array</p> Get Categories<pre><code>categories(sex) % return categories\n</code></pre> <pre><code>ans =\n\n  2\u00d71 cell array\n\n    {'Female'}\n    {'Male'  }\n</code></pre> <p>\u2026There are two categories: Female and Male</p> <p>And you can use the function summary to report the count of each category in the array</p> Summary<pre><code>summary(sex) % rturns category count\n     Female      Male \n     3           3    \n</code></pre>"},{"location":"dataProcessing/dataTypes/#creating-ordinal-data","title":"Creating Ordinal Data","text":"<p>If you have ordinal data, you still use the  <code>categorical</code> function, but with a couple of additional inputs.</p> Create Ordinal Categorical Array<pre><code>level = [\"Advanced\" \"Advanced\" \"Beginner\" \"Intermediate\" \"Advanced\" \"Beginner\"] % create string\nlevel = categorical(level,{'Beginner','Intermediate','Advanced'},Ordinal=true) % typecast to ordinal\n</code></pre> <p>\u2026Here, the second input into <code>categorical</code> is the category names in the order that you want. The third input sets Ordinal to true.</p> <p>And we get an ordinal categorical array that looks very similar to just a categorical array.</p> <pre><code>level = \n\n  1\u00d76 categorical array\n\n     Advanced      Advanced      Beginner    Intermediate  Advanced      Beginner     \n</code></pre> <p>The main differences is that when you call a function like  <code>summary</code>\u2026</p> <pre><code>summary(level)\n</code></pre> <pre><code>     Beginner      Intermediate      Advanced \n     2             1                 3       \n</code></pre> <p>\u2026the results are reported in the order of the ordinal categories (and not in alphabetical order)</p>"},{"location":"dataProcessing/dataTypes/#transforming-numeric-data-into-qualitative-data","title":"Transforming Numeric Data into Qualitative Data","text":"<p>Sometimes the raw data comes in as numeric, when what you actually want is categorical.</p> <p>Consider the following numeric array</p> <pre><code>ratings = [3 3 2 1 3 2 1 1 1 2]\n</code></pre> <p>These numbers actually represent three different categories</p> <ol> <li>Terrible</li> <li>Meh</li> <li>Awesome</li> </ol> <p>To replace the numbers with the category labels, you enter the following into <code>categorical</code>:</p> <pre><code>ratings = categorical(ratings,[1 2 3],{'Terrible','Meh','Awesome'},Ordinal=true)\n</code></pre> <p>\u2026notice here that the second input is the rating categories as numbers, while the third input is the ratings categories as labels. The fourth input turns Ordinal on.</p> <p>And you get\u2026</p> <pre><code>ratings = \n\n  1\u00d710 categorical array\n\n  Columns 1 through 5\n\n     Awesome      Awesome      Meh      Terrible      Awesome \n\n  Columns 6 through 10\n\n     Meh      Terrible      Terrible      Terrible      Meh \n</code></pre> <p>\u2026a categorical array with all the correct categories included.</p> <p>And these categories show up in the summary:</p> <pre><code>summary(ratings)\n     Terrible      Meh      Awesome \n     4             3        3   \n</code></pre>"},{"location":"dataProcessing/groupStats/","title":"Group Statistics","text":"<p>Once we have our data tidied, we can get into the business of analyzing the data. Often, we want to calculate our stats on subgroups of the data so we can compare results across categories or groups. For example, we may want to compare the means of the female observations to the male observations. Such comparisons are known as Group Statistics.</p>"},{"location":"dataProcessing/groupStats/#overview","title":"Overview","text":""},{"location":"dataProcessing/groupStats/#useful-resources","title":"Useful Resources","text":"<ul> <li>Perform Calculations by Group</li> </ul>"},{"location":"dataProcessing/groupStats/#useful-functions","title":"Useful Functions","text":"<ul> <li>groupsummary</li> <li>groupcounts</li> </ul>"},{"location":"dataProcessing/groupStats/#load-the-data","title":"Load the Data","text":"<p>I have saved a csv file of some tabular data in a secret online location. You can download this data using the following MATLAB code:</p> Load<pre><code>url = 'https://raw.githubusercontent.com/salcedoe/MtMdocs/refs/heads/main/docs/dataProcessing/class.csv';\nT = readtable(url);\nT.Name = string(T.Name); % typecast to string\nT.Sex = categorical(T.Sex) % typecast to categorical\n</code></pre> <p>\u2026after loading the data, we typecast the Name column to a <code>string</code> and the Sex column to a <code>categorical</code> array. And we get the following table of metrics from a group of adolescents.</p> <pre><code>T =\n\n  19\u00d75 table\n\n      Name       Sex    Age    Height    Weight\n    _________    ___    ___    ______    ______\n\n    \"Alfred\"      M     14        69     112.5 \n    \"Alice\"       F     13      56.5        84 \n    \"Barbara\"     F     13      65.3        98 \n    \"Carol\"       F     14      62.8     102.5 \n    \"Henry\"       M     14      63.5     102.5 \n    \"James\"       M     12      57.3        83 \n    \"Jane\"        F     12      59.8      84.5 \n    \"Janet\"       F     15      62.5     112.5 \n    \"Jeffrey\"     M     13      62.5        84 \n    \"John\"        M     12        59      99.5 \n    \"Joyce\"       F     11      51.3      50.5 \n    \"Judy\"        F     14      64.3        90 \n    \"Louise\"      F     12      56.3        77 \n    \"Mary\"        F     15      66.5       112 \n    \"Philip\"      M     16        72       150 \n    \"Robert\"      M     12      64.8       128 \n    \"Ronald\"      M     15        67       133 \n    \"Thomas\"      M     11      57.5        85 \n    \"William\"     M     15      66.5       112 \n</code></pre> <p>\u2026Remember, the columns contain the variables, so we have five variables: <code>Name</code>, <code>Sex</code>, <code>Age</code>, <code>Height</code>, and <code>Weight</code>. The rows contain the observations, so we have <code>20</code> observations. Row <code>1</code> contains all of the observed metrics from <code>Alfred</code>, whereas row <code>20</code> contains all the observed metrics from <code>William</code>.</p> <p>This table has both Quantitative and Qualitative data. The Quantitative data columns are <code>Age</code>, <code>Height</code>, and <code>Weight</code>, whereas the Qualitative Data Columns are <code>Name</code> and <code>Sex</code>.</p>"},{"location":"dataProcessing/groupStats/#grouping-variables","title":"Grouping Variables","text":"<p>In our analysis, we want to calculate stats like mean and standard deviation of the Quantitative data (e.g. mean height), but we want to group those statistics using the Qualitative data (e.g. mean female weight). So, we need to use the <code>Sex</code> column as a grouping variable. </p> <p>A grouping variable is a variable that helps group the observations (e.g. the rows).</p> <p></p> <p>In the above image, there are 2 groups, AB and XYZ. The data from the data variable column (in gray) is broken down into these two groups before processing</p> <p>In our table, the Sex column contains a categorical array with two categories: M or F. In our stats, when we calculate stats like mean height or weight, we want to first group all the male rows together and calculate those stats, and then group  the female rows together and calculate those stats.</p>"},{"location":"dataProcessing/groupStats/#calculating-stats-by-group","title":"Calculating Stats by group","text":"<p>The function <code>groupcounts</code> returns the number of group elements in a categorical array</p> groupcounts<pre><code>groupcounts(T,\"Sex\")\n</code></pre> <pre><code>ans =\n\n  2\u00d73 table\n\n    Sex    GroupCount    Percent\n    ___    __________    _______\n\n     F          9        47.368 \n     M         10        52.632 \n</code></pre> <p>\u2026Our data has one more male than female.</p> <p>The function groupsummary calculates group statistics in one fell swoop:</p> Group summary for Height<pre><code>s = groupsummary(T,\"Sex\",[\"mean\" \"std\"],\"Height\")\n</code></pre> <p>\u2026Notice that we input the whole table into groupsummary as the first input (T). Then we indicate which variable to use as a grouping variable (\"Sex\"). Then we indicate the stats we want to run (\"mean\" and \"std\"). Finally, we indicate which variable we want the stats to be calculated on (\"Height\").</p> <p>And we get our stats nicely packaged in a new table, s.</p> <pre><code>s =\n\n  2\u00d74 table\n\n    Sex    GroupCount    mean_Height    std_Height\n    ___    __________    ___________    __________\n\n     F          9          60.589         5.0183  \n     M         10           63.91         4.9379  \n</code></pre> <p>\u2026Notice in the table s, the variables now include \"mean_Height\" and \"std_Height\"</p> <p>We can even run the stats on multiple variables, simply by change the last input:</p> Group summary for Height and Weight<pre><code>s = groupsummary(T,\"Sex\",[\"mean\" \"std\"],[\"Height\", \"Weight\"])\n</code></pre> <pre><code>s =\n\n  2\u00d76 table\n\n    Sex    GroupCount    mean_Height    std_Height    mean_Weight    std_Weight\n    ___    __________    ___________    __________    ___________    __________\n\n     F          9          60.589         5.0183        90.111         19.384  \n     M         10           63.91         4.9379        108.95         22.727 \n</code></pre> <p>\u2026And now we have two addition variables in our stats table: mean_Weight and std_Weight.</p>"},{"location":"dataProcessing/groupStats/#visualizing-the-group-stats","title":"Visualizing the Group Stats","text":""},{"location":"dataProcessing/groupStats/#bar-plots","title":"Bar Plots","text":"<p>Once we have calculated the group statistics, we can plot the data from s as a bar plot with error bars</p> <pre><code>% set data\nx = s.Sex; % grouping variable\ny = s.mean_Height; % stat to plot\ne = s.std_Height; % error \n\n% plot data\nfigure\nbar(x,y,FaceAlpha=0.5);\n\nhold on\nerrorbar(x,y,e,'k',LineStyle=\"none\")\nylabel('Height (in)')\n</code></pre> <p>\u2026Notice the <code>errorbar</code> is a separate function from <code>bar</code>. Thus, we need to turn <code>hold on</code> to ensure that the error bar doesn't overwrite the bar. Also, <code>errorbar</code> requires at minimum three inputs: the grouping variable, the mean data (height of the bar), and the standard deviation (height of the error bar). <code>bar</code> only needs the grouping variable and the mean data.  </p> <p></p>"},{"location":"dataProcessing/groupStats/#swarm-chart","title":"Swarm Chart","text":"<p>Also known as a beeswarm chart, these types of visualizations plot every single data point in a cluster, or swarm, of points. These are very useful types of plots to display the true distribution of the data. They are also useful in conjunction with box or violin plots (see below)</p> <p>Many plotting functions accept grouping variables to sort plots by group.</p> Swarm chart of male and female heights<pre><code>figure(Visible=\"on\")\nhs = swarmchart(T,\"Sex\",\"Height\",\"filled\",MarkerFaceAlpha=0.75,XJitterWidth=0.5)\n</code></pre> <p></p> <p>Here we plot a swarm chart in which we separate the male and female heights. Each dot represents one observation. Male heights trend slightly higher than female heights.</p>"},{"location":"dataProcessing/groupStats/#box-plots","title":"Box Plots","text":"<p>Similarly, we can create box plots organized by groups using the boxchart function. Here we overlay the box plots onto the swarm charts. </p> Box Plot with Swarm Chart overlay<pre><code>hold on % overlay plot\nboxchart(T,\"Sex\",\"Height\",\"BoxFaceColor\",'k',\"BoxFaceAlpha\",0.15)\n</code></pre> <p></p> <p>Notice the difference in the two function calls. For <code>boxchart</code>, we using dot notation to index out the Sex and Height data. For <code>swarmchart</code>, we inputted the table, T, and then indicated which variable names to plot or use as a grouping variable.</p>"},{"location":"dataProcessing/groupStats/#violin-plots","title":"Violin Plots","text":"<p>A violin plot combines the features of a box plot with a kernel density plot, showing the distribution of the data.</p> Violin plot with Swarm Chart overlay<pre><code>violinplot(T,\"Sex\", \"Height\")\nhold on\nswarmchart(T, \"Sex\", \"Height\",\"filled\",MarkerFaceAlpha=0.5,XJitterWidth=0.5) % overlay swarm chart\n</code></pre> <p></p> <p>\u2026Notice the bulge in the violin plots indicate the highest concentration of data points.</p>"},{"location":"dataProcessing/groupStats/#scatter","title":"Scatter","text":"<p>The function gscatter, included with the Statistics and Machine Learning toolbox, plots grouped data in different colors:</p> <pre><code>figure\ngscatter(T.Weight,T.Height,T.Sex,'mb',[],25)\nylabel('Height (inches)')\nxlabel('Weight (lbs)')\n</code></pre> <p>\u2026notice again that here we input the column data (Weight, Height, Sex) from T using dot notation. We also include a couple extra inputs: <code>'mb'</code> - indicates the two group colors to use, magenta and blue. <code>25</code> - indicates the size of the dot.</p> <p></p> <p>This scatter plot indicates that Height and Weight are positively correlated for both males and females. Notice that the function <code>gscatter</code> automatically includes a legend in the plot.</p>"},{"location":"dataProcessing/statsViz/","title":"statsViz","text":""},{"location":"dataProcessing/statsViz/#grouping-variables","title":"Grouping Variables","text":"<p>Up to this point, we have been plotting entire columns of data. Sometimes though we need to separate the data in a column into distinct groups. We can group this data using grouping variables.</p> <p>Consider the following columns in our dataset</p> <pre><code>T.MDT = datetime(T.MDT); % good for time data\nT.Events = categorical(T.Events); % good for statistical organization\nT.Events = addcats(T.Events,'none'); % add a category of none\nT.Events(isundefined(T.Events)) = 'none'; % set all undefined events to the category of none\ncategories(T.Events) % list the categories found in events\n</code></pre> <p>Consider for example our events column.</p> <p>Using grouping variables, we can group the different rows of the table into different categories, isolating these subsets of data. Notice that in our table we have columns of numbers, such as temperature, dewpoint, humidity, and windspeed, and columns of identification, such as date (MDT) and event (e.g., rain, snow, etc.). The identifying data are also known as grouping variables and can be used to group rows into different categories. These grouping variables are more useful when you typecast them to certain variable types, like datetime and categorical</p>"},{"location":"dataProcessing/statsViz/#bar-example-1-bar-plot-event-counts","title":"Bar Example 1: Bar Plot event counts","text":""},{"location":"dataProcessing/statsViz/#bar-example-1-clean-up-the-data-and-group","title":"Bar Example 1: Clean up the data and group","text":"<p>The \"Events\" column of <code>T</code> contains categorical data---data that can easily be divided into groups.</p> <p>To simplify plotting this data, we are going to convert this column to a categorical class:</p> Convert Events column to a categorical array<pre><code>T.Events = categorical(T.Events)\n</code></pre> Contents of Event column<pre><code>ans = \n\n  30\u00d71 categorical array\n\n     &lt;undefined&gt; \n     &lt;undefined&gt; \n     &lt;undefined&gt; \n     Rain-Thunderstorm \n     Rain-Thunderstorm \n     \u22ee\n</code></pre> <p>\u2026As you can see, many rows contain the term <code>&lt;undefined&gt;</code>, while some contain an event, like 'Rain-Thunderstorm'.</p> <p>For our purposes, we'll use <code>&lt;undefined&gt;</code> as an indicator that there was no weather event and we'll call this event <code>'none'</code>. We can convert <code>&lt;undefined&gt;</code> to <code>'none'</code> in the array as follows:</p> Replace undefined data<pre><code>T.Events(isundefined(T.Events)) = ('none') % replace all undefined data with 'none'\n</code></pre> result<pre><code>  30\u00d71 categorical array\n\n     none \n     none \n     none \n     Rain-Thunderstorm \n     Rain-Thunderstorm \n</code></pre>"},{"location":"dataProcessing/statsViz/#bar-example-1-count-events","title":"Bar Example 1: Count Events","text":"<p>To plot our bar plot, we first need to count up the number of each event (or group). The function <code>groupsummary</code> simplifies this nicely:</p> <pre><code>s = groupsummary(T,\"Events\")\n</code></pre> result<pre><code>s =\n\n  6\u00d72 table\n\n           Events            GroupCount\n    _____________________    __________\n\n    Fog                           1    \n    Fog-Rain                      2    \n    Fog-Rain-Thunderstorm         2    \n    Rain                          4    \n    Rain-Thunderstorm             7    \n    none                         14    \n</code></pre> <p>\u2026<code>groupsummary</code> returns a table, <code>s</code>, with the data that we need for the next step. And importantly, this data is already sorted by count.</p>"},{"location":"dataProcessing/statsViz/#bar-example-1-plot-event-counts","title":"Bar Example 1: Plot Event Counts","text":"<p>Now we are ready to plot our data. The following code creates a bar plot and adds a title, an x- and a y-label. It also changes the transparency of the bars, so you get a nicer shade of blue.</p> Plot Event Counts as a Bar Plot<pre><code>x = s.Events;\ny = s.GroupCount;\n\nhb = bar(x,y); % notice the two inputs\n\nhb.FaceAlpha = 0.5; % increase transparency of plot (nicer shade of blue)\n\n% axis formatting\nylabel(\"Number of days\")\nxlabel(\"Weather Event\",\"FontWeight\",\"bold\")\ntitle(\"Denver - September 2013\")\nylim([0 17]) % increase the limits on the y-axis\n</code></pre> <p>\u2026Notice since <code>x</code> is a categorical array, we got the event labels at the bottom of the bar plot. (1)</p> <ol> <li>The function <code>bar</code> does not accept a string or a cell array as an input for <code>x</code> \u2014 it has to be a categorical array for this to work.</li> </ol> <p></p> <p>Notice in this bar plot, that the counts of the events have been sorted from fewest to most. This makes the data much easier to interpret. On the left, we se that there were very few days of fog, while on the right, we see that on a majority of days, nothing of note happened ('none').</p>"},{"location":"dataProcessing/statsViz/#example-2-horizontal-bar-plot","title":"Example 2: Horizontal Bar Plot","text":"<p>The function <code>barh</code> operates exactly like <code>bar</code>, but produces horizontal bars, as follows:</p> <pre><code>hb = barh(x,y);\n\nhb.FaceAlpha = 0.5; % increase transparency of plot\n\n% axis formatting\nxlabel(\"Number of days\")\nylabel(\"Weather Event\",\"FontWeight\",\"bold\")\ntitle(\"Denver - September 2013\")\n% ylim([0 17]) % increase the limits on the y-axis\nxlim([0 15])\n</code></pre> <p></p> <p>\u2026And now our bar plot is horizontal. Notice that we had to input the correct data in the correct labeling functions and we had to use <code>xlim</code> instead of <code>ylim</code>.</p>"},{"location":"dataProcessing/tidyData/","title":"Data Wrangling","text":"<p>Data comes in many forms and often these forms are messy. Part of data wrangling involves organizing and cleaning up this data in a fashion that makes it easier to analyze. Usually, the first step in data analysis is to organize the data in a tidy fashion\u2014a concept popularized for the R programming language but applicable to all data analysis.</p> <p> Read more about tidy data in the linked PDF.</p>"},{"location":"dataProcessing/tidyData/#what-is-tidy-data","title":"What is Tidy Data?","text":"<p>Tidy data is data organized in a table as follows:</p> <ol> <li>Each row corresponds to a single observation</li> <li>Each variable is a column</li> <li>Each element in a table contains a single value</li> </ol> <p></p> <p>Consider the following messy data:</p> Subject 1 Name Alfred Sex M Age 14 Height 69 Weight 112.5 Subject 2 Name Alice Sex F Age 13 Height 56.5 Weight 84 Subject 3 Name Barbara Sex F Age 13 Height 65.3 Weight 98 <p>While this organization is relatively easy to read and understand (for a human), it is not considered tidy data because the variables are not organized in columns and the values are spread across three tables. This messy data organization makes it difficult to analyze the data.</p> <p>The tidy way to organize this data would be as  follows:</p> Name Sex Age Height Weight Alfred M 14 69 112.5 Alice F 13 56.5 84 Barbara F 13 65.3 98 <p>Notice there are five variables (5 columns: Name, Sex, Age, Height, Weight) and three observations (three rows).</p>"},{"location":"dataProcessing/tidyData/#matlab-table","title":"MATLAB Table","text":"<p>Here is that same data imported into a MATLAB table variable:</p> <pre><code>T =\n\n  3\u00d75 table\n\n      Name       Sex    Age    Height    Weight\n    _________    ___    ___    ______    ______\n\n    \"Alfred\"     \"M\"    14        69     112.5 \n    \"Alice\"      \"F\"    13      56.5        84 \n    \"Barbara\"    \"F\"    13      65.3        98 \n</code></pre> <p>We can inspect the properties of a MATLAB using the properties field:</p> Get Table Properties<pre><code>T.Properties\n</code></pre> <pre><code>ans = \n\n  TableProperties with properties:\n\n             Description: ''\n                UserData: []\n          DimensionNames: {'Row'  'Variables'}\n           VariableNames: {'Name'  'Sex'  'Age'  'Height'  'Weight'}\n    VariableDescriptions: {}\n           VariableUnits: {}\n      VariableContinuity: []\n                RowNames: {}\n</code></pre> <p>Notice that the column names in a MATLAB table are Called Variable Names.</p> <p>If we want the average height, we would simply index out the Height variable, as follows:</p> Calculate Mean Height<pre><code>mean(T.Height)\n</code></pre> result<pre><code>ans =\n\n         63.6\n</code></pre> <p>Or, we can get summary data for all of the Variables (columns) using the summary function:</p> <pre><code>summary(T)\n</code></pre> Output from Summary<pre><code>Variables:\n\n    Name: 3\u00d71 string\n\n    Sex: 3\u00d71 string\n\n    Age: 3\u00d71 double\n\n        Values:\n\n            Min          13   \n            Median       13   \n            Max          14   \n\n    Height: 3\u00d71 double\n\n        Values:\n\n            Min         56.5  \n            Median      65.3  \n            Max           69  \n\n    Weight: 3\u00d71 double\n\n        Values:\n\n            Min           84  \n            Median        98  \n            Max        112.5  \n</code></pre>"},{"location":"dataProcessing/tidyData/#data-clean-up","title":"Data Clean-up","text":"<p>When importing data, it is important to have standardized column headers with names that can be used as MATLAB variables. So, your column headers should have no spaces or characters like spaces, parentheses, or asterisks.</p> <p>For example, the following headers would not work as tidy headers</p> Messy Column Headers<pre><code>Name    Sex Age Height (in) Weight (lbs)\n</code></pre> <p>These column headers are messy because two of the columns contain parentheses and spaces.</p> <p>The MATLAB data import tool automatically handles these messy header names. The following is the window brought up after clicking on the data import button (Home tab, in the Variable section) and selecting a csv file with above messy headers</p> <p></p> <p>Notice that the parentheses and spaces have been dropped from the Height and Weight Column Names. This, however, makes the column headers harder to read.</p> <p>You can edit the Column Names directly by double-clicking on the Column name. An easier way to read the columns with the units intact would be to include underscores, as follows:</p> <p></p> <p>After import, the table would look like the following:</p> <pre><code>T =\n\n  3\u00d75 table\n\n      Name       Sex    Age    Height_in    Weight_lbs\n    _________    ___    ___    _________    __________\n\n    \"Alfred\"     \"M\"    14         69         112.5   \n    \"Alice\"      \"F\"    13       56.5            84   \n    \"Barbara\"    \"F\"    13       65.3            98   \n</code></pre>"},{"location":"imageProcessing/Color%20Blind%20Simulation/","title":"Color Blind Simulation","text":"<p>Color Blind Simulation</p> <p>This image contains a hidden numeric value that is only visible if you are colorblind</p> <p></p> <p>To see the value, open the image in Fiji</p> <p>Select the <code>Image:Color:Simulate Color Blindness</code> menu item</p> <p>In the \"Daltonize\" dialog window that comes up, Choose \"Deuteranopia (no green)\" mode</p> <p></p> <p>And select OK.</p> <p>If you have deuteranopia, a specific type of red-green colorblindness, you can probably see a \"73\" written in the colorful image above. Bask in this example of your genetic difference being a strength, not a hindrance.</p> <p>If you have protanopia, you might see a crooked \"23\" instead, but that's probably due to the ambiguity that comes with working with little colored circles.</p> <p>What value do you see?</p>"},{"location":"imageProcessing/ImageEnhancement/","title":"Image Enhancement","text":"<p>like snapchat or instagram filtering, but for work</p>"},{"location":"imageProcessing/ImageEnhancement/#overview","title":"Overview","text":"<p>\ud83d\udcf8 Image enhancement is the process of adjusting digital images to improve their appearance or to prepare for further image analysis. For example, you can enhance contrast, remove noise, sharpen, or brighten an image.</p> <p>In this module, we explore low level image processing: displaying an image's histograms and modifying the image's pixel intensities, both globally and locally.</p>"},{"location":"imageProcessing/ImageEnhancement/#learning-objectives","title":"Learning Objectives","text":"<p>After completing this module, you should be able to:</p> <ul> <li>Display the histogram of an image</li> <li>Use a histogram to determine whether an image is properly exposed</li> <li>Adjust contrast by manipulating the image's histogram</li> <li>Describe how neighborhood processing works</li> <li>Use filters to adjust an image's appearance</li> </ul>"},{"location":"imageProcessing/ImageEnhancement/#relevant-documentation","title":"Relevant Documentation","text":"<ul> <li> <p>image filtering</p> </li> <li> <p>contrast adjustment</p> </li> <li> <p>neighbor operations</p> </li> </ul>"},{"location":"imageProcessing/ImageEnhancement/#important-functions-you-should-know","title":"Important Functions you should know","text":"<ul> <li> <p>imhist: Histogram of image data</p> </li> <li> <p>imcomplement: Complement image (like a digital negative)</p> </li> <li> <p>imadjust: Adjust image intensity values or colormap by adjusting pixel distributions</p> </li> <li> <p>histeq: Enhance contrast using histogram equalization</p> </li> <li> <p>adapthisteq: Contrast-limited adaptive histogram equalization (CLAHE)</p> </li> </ul>"},{"location":"imageProcessing/ImageEnhancement/#terminology-you-should-know","title":"Terminology you should know","text":"<ul> <li> <p>Histogram: a graphical representation of the distribution of pixel intensities.  </p> </li> <li> <p>Intensity Transformation: altering an image by adjusting the pixel values (intensity)</p> </li> <li> <p>Complement: the digital negative of an image</p> </li> <li> <p>Neighborhood Processing: modifying a single pixel at a time based on the intensities of its neighboring pixels.</p> </li> <li>Kernel: a small matrix used in neighboring processing to modify the values of single pixels (wikipedia link)</li> </ul>"},{"location":"imageProcessing/ImageEnhancement/#histograms","title":"Histograms","text":"<p>An image histogram is a graphical representation of the distribution of pixel intensities in a given image. Histograms on their own can give you useful information about your image.</p> <p>Consider the following three images of the same scene:</p> <p></p> <p>LEFT PANEL. In the underexposed image, the distribution of pixel intensity is shifted to the left, meaning most pixels have a very low intensity. MIDDLE PANEL In the correct exposure, the pixel intensities are distributed through the entire dynamic range of the image, meaning there is a nice distribution of pixel intensities throughout the image. RIGHT PANEL. In the overexposed image, the distribution of pixel intensities is shifted to the right, meaning more pixels have higher intensities (and very few have low intensities).</p>"},{"location":"imageProcessing/ImageEnhancement/#displaying-the-histogram","title":"Displaying the Histogram","text":"<p>The function <code>imhist</code> automatically generates a histogram from an image and plots the histogram along with a grayscale bar. Here we use <code>subplot</code>, <code>imshow</code>, and <code>imhist</code> functions to display the image and its histogram side by side. In this example, we need to use <code>subplot</code> to tile the figure because <code>nexttile</code> doesn't work nicely with <code>imhist</code>. (The folks at MATLAB tell me they are working on it, but that was a few years ago now).</p> Display Histogram of moon2<pre><code>moon2 = imread('https://saldenest.s3.amazonaws.com/MATLAB_images/moon2.tif'); % read image from a secret, remote location\n\nrows = 1; % set the number of rows needed\ncols = 2; % set the number of columns needed\n\nsubplot(rows,cols,1); % create the first tile\nimshow(moon2); % display the moon\n\nsubplot(rows, cols,2); % create the second tile\nimhist(moon2); % creates the histogram plot\nylim([0 5000]); % zoom in on the y-axis to better display the shape of the histogram\n</code></pre> <p></p> <p>The Moon and its Histogram. Left. Image of the dark side of the moon. Right. Histogram of the moon image. X-axis: pixel count. Y-axis: frequency. Gradient bar along the x-axis indicates mapped shade of gray that corresponds to the pixel intensity. Zero is black, 255 is white. Note: we have modified the default display of the histogram by capping the y-limits at 5000. The large amount of black (or zero) pixels completely overshadowed the rest of the histogram (see as the tallest bin on the left side of the histogram )</p>"},{"location":"imageProcessing/ImageEnhancement/#image-contrast","title":"Image Contrast","text":"<p>The appearance of an image can be markedly altered simply by adjusting the distribution of pixel (intensity) values. There are many tools in MATLAB that can remap intensity values.</p>"},{"location":"imageProcessing/ImageEnhancement/#manually-adjust-contrast","title":"Manually Adjust Contrast","text":"<p>You can use the <code>imageViewer</code> app to manually adjust contrast. First, let's open the 'moon' image with <code>imtool</code>.</p> <pre><code>imageViewer(moon2)\n</code></pre> <p>Next, in the imageViewer app, click on the contrast tab to bring up the contrast toolbar.</p> <p></p> <p>Click on the \"Interative Histogram\" button and you should see the following:</p> <p></p> <p>Now we have an interactive histogram displayed below the image of the moon. Although not easily seen, there are gray bars in this histogram. The most obvious bar is the one on the far left that represents all of the zeros in the image. The rest of the bars are little black bumps at the bottom of the histogram. The reason that the histogram looks like this is that the zero pixels represent more than half of all of the pixels in the image and the frequency of the pixels larger than 0 is dwarfed in comparison.</p> <p>Overlaid atop the histogram is a white box bookended by two blue handles. This white rectangle is the \"window\" that is referred to in the \"Window Bounds\" section of the contrast toolbar.</p> <p>To change the distribution of pixel intensities, you drag the blue handles. Notice as you do so that the Min, Max, Width and Center values in the Window Bounds section of the toolbar change. As you move the handles closer together, you are making the width of the window narrower, and vice versa. You are also changing the distribution of pixel intensities so that they fall inside that window. Any intensities outside of the window are clipped either to the minimum or maximum intensity (black or white in this case).</p> <p>For example, here we have dragged the right blue handle to the left:</p> <p></p> <p>Our window has now changed to have a width of 128 and a center of 64. Any values greater than 128 are now treated as max intensities, which is why the moon looks so washed out and overexposed.</p> <p>If you hover over the middle of the histogram window (white box bookended by the blue handles), your cursor will turn into a 4-way arrow and you can drag the  window to the left or right. Try it now and drag the window over to the right side of the histogram so that the maximum intensity is 255 and the minimum intensity is 128.</p> What will happen to the image if you drag the histogram window to the right? <p>The moon will appear much dimmer as all pixels that fall below 128 will be clipped to black</p> <p></p> <p>If you don't like the changes, simple click on the \"Undo Changes\" button and the window will be restored to its original width and the image will look like when it was originally loaded.</p>"},{"location":"imageProcessing/ImageEnhancement/#programmatically-adjust-contrast","title":"Programmatically Adjust Contrast","text":"<p>Instead of playing around with histogram windows to manually adjust contrast, you can apply functions to images that automatically adjust the contrast for you.</p>"},{"location":"imageProcessing/ImageEnhancement/#linear-contrast","title":"Linear Contrast","text":"<p>One way to adjust the contrast is linear scale (stretch) the distribution of pixel intensities so that they cover the full dynamic range of the image. This basically means that the brightest pixels in the adjusted image will have a value of 255 and the dimmest pixels have a value of 0.</p> <p>Consider the following:</p> <pre><code>figure;\nrows = 2; cols = 2;\nimg = {moon2, imadjust(moon2)}; % package the original and adjusted image into a 1x2 cell\ntitles = [\"original\",\"adjusted\"]; % 1x2 string with the titles to be used\n\nfor n=1:2\n    subplot(rows, cols, n)\n    imshow(img{n}) % indexes out the image on each iteration of the loop\n    title(titles{n},'FontSize',18) % indexes out title on each iteration\n\n    subplot(rows, cols, n+cols)\n    imhist(img{n})\n    xlim([-5 260]) % adjust the x-axis to just outside range of pixel intensities\n    ylim([0 5e3]) % adjust y-axis to highlight the intensity frequency outside of the background\nend\n</code></pre> <p></p> <p>As you can see, <code>imadjust</code> s t r e t c h e s the distribution of pixel intensities so that 1% of the data is saturated at low and high intensities of the image. If you look carefully at the histograms, there is now a vertical line at the far right of the plot. This line represents the bin of saturated pixels on the bright end. There is also a line on the left side, which represents the bin of clamped pixels on the dark end. Also notice how the adjusted moon has more patches of bright white as compared to the original.</p>"},{"location":"imageProcessing/ImageEnhancement/#non-linear-contrast","title":"Non-linear Contrast","text":"<p>As opposed to linearly correcting the distribution, we can also adjust the distribution using a curve.</p> <p></p> <p>As you can see here, a gamma setting &lt; 1 raises the intensities of low-intensity pixels, so that the end result is an overall brighter image. By contrast, a gamma &gt; 1 lowers the intensities of low intensity pixels, resulting in an overall dimmer image. A gamma of 1 does not affect the histogram distribution at all.</p> <p>by adding some additional inputs into  </p> <p>We can use <code>imadjust</code>  to modify the histogram in a non-linear fashion. This is known as \"gamma\". The gamma setting adds a curve to the histogram distribution as follows:</p> <p>imadjust inputs for gamma<pre><code>img_adj = imadjust(img, [low_in high_in], [low_out high_out], gamma)\n</code></pre> To visualize these effects, we will apply incrementing amounts of gamma to the picture of the moon, as follows:</p> Apply gamma to moon2<pre><code>figure;\nrows = 2; cols = 3;\ngamma = 0.25; % start with a gamma of 0.25\n\nfor n=1:3\n    moon_adj = imadjust(moon,[],[],gamma); % notice the two empty inputs before gamma\n\n    % plot image\n    subplot(rows,cols,n)\n    imshow(moon_adj)\n    title(sprintf('Gamma - %0.2f', gamma))\n\n    % plot histogram\n    subplot(rows,cols,n+cols)\n    imhist(moon_adj)\n    xlim([-10 265])\n    ylim([0 5e3]) \n    gamma = gamma+0.75; % increase gamma by 0.75 on each iteration\nend\n</code></pre> <p></p> <p>Notice the asymmetrical shifting of the histogram towards the intensity poles. For gamma values below 1, the histogram distribution shifts towards the maximum pixel intensity (255). In contrast, for gammas greater than 1, the histogram distribution shifts towards zero. Also notice that the effect is primarily on the appearance of the moon. With a low Gamma setting, the moon surface loses contrast, but still has high contrast compared to space. With a high gamma setting, the shadows in on the moon's surface begin to blend in with the space.</p>"},{"location":"imageProcessing/ImageEnhancement/#image-complement","title":"Image Complement","text":"<p>The complement is the process of inverting an image. Maximum Intensity Values are inverted to minimum intensity values and vice versa. The function <code>imcomplement</code> automates this process. The following code compares the complement to the original image:</p> Apply Complement to moon2<pre><code>figure;\nrows = 2; cols = 2;\nimg = {moon2; imcomplement(moon2)}; % Package image and its complement into a 1X2 cell array\ntitle_str = [\"original\",\"complement\"]; \nfor n=1:numel(img) % run for number of elements in img\n    subplot(rows,cols,n);\n    imshow(img{n}); % display image\n    title(title_str{n})\n\n    subplot(rows,cols,n+cols);\n    imhist(img{n}); % display histogram\n    xlim([-5 260]) \n    ylim([0 5e3]) % crop histogram display to better visualize distribution\nend\n</code></pre> <p></p> <p>Notice how the histograms for the two images are mirrored horizontally. Also notice that the colormap is the same for both images. Here, the actual pixel intensities of the image change, not the colormap. To emphasize the reflected shapes of the histograms, we cropped the y-axis and expanded the x-axis using <code>xlim</code> and <code>ylim</code></p>"},{"location":"imageProcessing/ImageEnhancement/#neighborhood-block-processing","title":"Neighborhood / Block Processing","text":"<p>In the previous examples, we enhanced the image by globally modifying all pixel intensities across the dynamic range of the image. In some cases, such global transformations can inadvertently saturate local intensity variations and mask finer details. To avoid this, you can use Neighborhood (or Block) Processing. A Neighborhood processing operation processes a single pixel at a time, and modifies that pixel intensity based on the intensities of its neighboring pixels.</p> <p>A neighborhood (or block) is simply a small piece of the entire image. Block processing, therefore, operates on a small block of the image, one block at a time, until the entire image has been processed. In this type of processing, only the center pixel in the block is actually modified and that modification is based on the immediately surrounding pixels.</p> <p>Neighborhood processing is also referred to as a filter---as in applying a filter to an image.</p> <p>The most common type of filtering involves averaging the adjacent pixels in a matrix and then replacing the center pixel intensity with the average intensity.</p> <p></p> <p>Illustration of an average filter. The value of the central pixel is replaced with the average value of the surrounding 8 pixels</p> <p>The process is then repeated for all pixels in the image. Ultimately, this process blurs the image, but it can also smooth out noise.</p> <p></p>"},{"location":"imageProcessing/ImageEnhancement/#predefined-filters","title":"Predefined Filters","text":"<p>The specific block used in a given filter is called a kernel. A kernel (or mask or filter) is essentially a small matrix populated with numbers that can be used to apply mathematical operations to the neighborhood pixels. Different kernels have different sizes and can be used to apply different types of math to the pixels.</p> <p>The function <code>imsharpen</code>  uses an unsharp masking filter to make edges and fine detail in the image more crisp. The function <code>imgaussfilt</code> blurs the image based on a gaussian distribution. The following code applies both filters to a somewhat blurry image of our moon</p> Apply filters to image<pre><code>blurry_moon = imread('https://saldenest.s3.amazonaws.com/MATLAB_images/Filter_blurry_moon.png'); % read image from secret remote location\ntiledlayout(1,3,\"TileSpacing\",\"compact\",\"Padding\",\"compact\")\n\nfigure\n\nnexttile\nimshow(blurry_moon) % display image\ntitle('Original','FontSize',18)\n\nnexttile\nimshow(imsharpen(blurry_moon,\"Amount\",3)) % display sharpened image\ntitle('Unsharp Mask - Amount 3','FontSize',18)\n\nnexttile\nimshow(imgaussfilt(blurry_moon,3)) % display blurred image\ntitle('Gaussian Blur - Sigma 3','FontSize',18)\n</code></pre> <p></p> <p>There are many standard filters that you can find in digital image processing software. Review the image filtering documentation page for more information.</p>"},{"location":"imageProcessing/ImageEnhancement/#contrast-limited-adaptive-histogram-equalization","title":"Contrast-limited adaptive histogram equalization","text":"<p>The <code>adapthisteq</code> function uses neighborhood processing to adjust the image histogram of an image block by block (instead of the entire image histogram at once). This process is often abbreviated as CLAHE (Contrast-limited adaptive histogram equalization)</p> <p>The following code compares the image of the moon to CLAHE to imadjust:</p> Apply CLAHE to moon2<pre><code>figure;\nrows = 2; cols = 3;\nimg = {moon2, adapthisteq(moon,'Distribution','uniform'), imadjust(moon)};\ntitle_str = [\"original\", \"adapthisteq\", \"imadjust\"];\n\nfor n=1:cols\n    subplot(rows, cols, n);\n    imshow(img{n});\n    title(title_str{n},'FontSize',18)\n\n    subplot(rows, cols, n+cols)\n    imhist(img{n})\n    xlim([-5 260])\n    ylim([0 5e3])\nend\n</code></pre> <p></p> <p>Comparison of imadjust to adapthisteq. The <code>imadjust</code> histogram is spread to cover the entire dynamic range of the image. In contrast, the <code>adapthisteq</code> histogram maintains a similar distribution shape to the original image, but it has been smoothed. In the images,  local variations in the CLAHE image are greatly exaggerated, especially compared to <code>imadjust</code> image.</p> <p>Congratulations, you have made to the end! \ud83d\udcf8</p>"},{"location":"imageProcessing/ImageIntro/","title":"Grayscale Images","text":"<p>You know, like pictures and stuff, but with no color.</p>"},{"location":"imageProcessing/ImageIntro/#overview","title":"Overview","text":"<p>\ud83d\udcf0 NEWS FLASH: Images are just matrices. As such, images have elements with coordinates (rows and columns) and numeric values. The coordinates of the elements represent a location in the image, while the numeric value represents intensity (or luminance)\u2014how bright that pixel should be. In the following example, we have two luminance values: black and white. These luminance values are stored as 1's and 0's.</p> <p></p> <p>Since images are just numeric matrices, we can easily leverage the full power of MATLAB for image processing.</p> <p>In this module, we will explore the properties of intensity (or grayscale) images, which are images that contain only one pixel value per image location and typically represent shades of gray or just one color.</p>"},{"location":"imageProcessing/ImageIntro/#things-you-should-know","title":"Things You Should Know","text":"<p>By the end of this module, you should be able to:</p> <ul> <li> <p>open an image in MATLAB</p> </li> <li> <p>manipulate the basic properties of an image</p> </li> <li> <p>typecast an array so that it can be properly displayed in MATLAB</p> </li> <li> <p>normalize an image to improve contrast</p> </li> <li> <p>Define all of the [Key Terminology]</p> </li> <li> <p>use all of the listed [Key Functions]</p> </li> <li> <p>Change the colormap of a grayscale image</p> </li> </ul>"},{"location":"imageProcessing/ImageIntro/#relevant-matlab-documentation","title":"Relevant MATLAB Documentation","text":"<ul> <li> <p>MATLAB Images Overview</p> </li> <li> <p>Image Types</p> </li> <li> <p>Image Processing Toolbox</p> </li> <li> <p>Image Processing Toolbox Examples</p> </li> </ul>"},{"location":"imageProcessing/ImageIntro/#key-functions","title":"Key Functions","text":"<ul> <li> <p><code>mat2gray</code> - converts a numeric matrix to a grayscale image array by normalizing the pixel intensity values to range from 0 to 1. Always returns a class double. </p> </li> <li> <p><code>colormap</code> - sets current color map (look-up table)</p> </li> <li> <p><code>double</code> - typecasts an array to a double class</p> </li> <li> <p><code>uint8</code> - typecasts an array to an unsigned 8-bit integer class</p> </li> <li> <p><code>uint16</code> - typecasts an array to an unsigned 16-bit integer class</p> </li> </ul>"},{"location":"imageProcessing/ImageIntro/#image-processing-toolbox-functions","title":"Image Processing Toolbox Functions","text":"<p>Notice that these functions start with the prefix \"im\":</p> <ul> <li> <p><code>imageViewer</code> - image viewer app</p> </li> <li> <p><code>imread</code> - reads in image files and returns a matrix</p> </li> <li> <p><code>imshow</code> - displays images in a figure</p> </li> <li> <p><code>imshowpair</code> - overlays images or displays side by side to compare differences</p> </li> <li> <p><code>im2double</code> - converts an image to double precision ranging from 0 to 1 (but without normalizing the values first)</p> </li> </ul>"},{"location":"imageProcessing/ImageIntro/#key-terminology-you-should-know","title":"Key Terminology you should know","text":"<ul> <li> <p>Pixel: Picture element: the smallest addressable element in a rasterized, bitmapped digital image. Considered to be a point sample of an image. Has x- and y- coordinates and a discretized value to indicate intensity or color.</p> </li> <li> <p>Bit depth: the number bits used to indicate the color of a single pixel in a bitmapped image</p> </li> <li> <p>Dimensions: The height and width (in pixel count) of an image</p> </li> <li> <p>Colormap / Look-up table (LUT): A table or array that maps pixel values to color intensities. For example 0 = black, and 255 = white</p> </li> <li> <p>Metadata: included information about an image, such as its dimension, bit depth, acquisition parameters, etc.</p> </li> </ul>"},{"location":"imageProcessing/ImageIntro/#reading-images","title":"Reading images","text":"<p>You can programmatically read images into MATLAB using the function <code>imread</code>, which takes a file path (or URL) as an input and returns a numeric array.</p> <p>For this example, we will read one of MATLAB's built-in images (moon.tif):</p> Read in Image<pre><code>img = imread('moon.tif');\n</code></pre> <p>\u2026Since MATLAB already knows about the \"moon.tif\" image and it's location, we just have to enter the file name.</p> <p>WARNING: Do not forget the semi-colon at the end of the <code>imread</code> command to suppress output or you will see a lot of numbers populate the command window.</p> <p>After the <code>imread</code> function call, examine the <code>img</code> variable's properties in the workspace:</p> <p></p> <p>\u2026<code>img</code> is a numeric variable\u2014an unsigned, 8-bit variable.</p> <p>So, how is this an image? Read on to find out...</p>"},{"location":"imageProcessing/ImageIntro/#images-are-matrices","title":"Images are Matrices","text":"<p>Once loaded, image variables work like any other numeric matrices. For example, you can get the number of rows and columns of an image variable using the function <code>size</code>, as follows:</p> Get Dimensions<pre><code>[rows, cols] = size(img)\n</code></pre> result<pre><code>rows =\n\n   537\n\ncols =\n\n   358\n</code></pre> <p>\u2026So we have a numeric matrix with 537 rows and 358 columns. In image terms, the width is 358 pixels and the height is 537 pixels.</p> <p>You can perform math on an image matrix, just like you can with any other numeric variable. Here we calculate the maximum intensity value of the image using the function <code>max</code>:</p> Max of img<pre><code>max(img(:))\n</code></pre> result<pre><code>ans =\n\n  255\n</code></pre> <p>\u2026A maximum of 255 matches the maximum potential vale of an unsigned 8-bit variable. Here we indexed <code>img</code> using <code>(:)</code>. This syntax ensures that you get just one value returned from <code>max</code>, instead of getting a maximum value from each column in the matrix.</p>"},{"location":"imageProcessing/ImageIntro/#challenge-images-are-matrices","title":"Challenge: Images are matrices","text":"Question: What do you predict the minimum pixel intensity of the image to be? Use the function <code>min</code> to test your prediction. <p>Since this image is an unsigned 8-bit variable <code>uint8</code>, the minimum possible value is <code>0</code>. You can see this in the workspace as well.</p>"},{"location":"imageProcessing/ImageIntro/#image-properties","title":"Image Properties","text":"<p>Every image stores data in a hidden header field known as the image's metadata. The metadata describes the properties of the image, such as its dimensions, bit depth, acquisition parameters, etc.</p> <p>The function <code>imfinfo</code> reads this metadata and returns a structure:</p> Get metadata<pre><code>img_meta = imfinfo('moon.tif');\n</code></pre> result<pre><code>img_meta = \n\n  struct with fields:\n\n                     Filename: '/Applications/MATLAB_R2018a.app/toolbox/images/imdata/moon.tif'\n                  FileModDate: '13-Apr-2015 13:23:13'\n                     FileSize: 184388\n                       Format: 'tif'\n                FormatVersion: []\n                        Width: 358\n                       Height: 537\n                     BitDepth: 8\n                    ColorType: 'grayscale'\n                    \u22ee\n</code></pre> <p>\u2026As you can see, <code>img_meta</code>, is a MATLAB structure with multiple fields such as, 'Filename','FileSize', 'BitDepth', 'Width', 'Height', etc. And yep, it's an 8-bit image.</p> <p>Width and Height corresponds to the number of columns and rows, respectively, in the <code>img</code> variable.</p>"},{"location":"imageProcessing/ImageIntro/#displaying-images","title":"Displaying images","text":""},{"location":"imageProcessing/ImageIntro/#built-in-image-viewer","title":"Built-in Image Viewer","text":"<p><code>imageViewer</code> is the basic image viewer app that is included in the MATLAB Image Processing toolbox. (1)</p> <ol> <li>imageViewer is only recently developed app in MATLAB. The previous image viewer tool was called <code>imtool</code>. This tool has similar functionality to imageViewer but looks and operates a little differently. Refer to the MATLAB documentation for more information</li> </ol> <p>You can launch <code>imageViewer</code> from the Apps tab. Click on the Image Viewer icon:</p> <p></p> <p>Or, you can run <code>imageViewer</code> from the command window. Simply type:</p> Launch imageViewer<pre><code>imageViewer\n</code></pre> <p>In either case, MATLAB will return a window that looks like this:</p> <p></p> <p>To open images, you can click on the \"Import Image\" icon.</p> <p>Or, you can call <code>imageViewer</code>  from the command window and input a image file path:</p> <pre><code>imageViewer('moon.tif')\n</code></pre> <p>Or, since we have have already loaded the moon image into the workspace as variable <code>img</code>, we can input the variable name, as follows:</p> <pre><code>imageViewer(img)\n</code></pre> <p>Either way, you should see the following image in <code>imageViewer</code>:</p> <p></p> <p>\u2026Notice that the window now has three tabs: \"Viewer\", \"Contrast\", and \"Colormap\".</p> <p>The bottom left-hand corner of the image viewer displays a live update of pixel information:</p> <pre><code>Pixel Info: (X,Y) intensity\n</code></pre> <p>\u2026This information is relevant to the current pixel being pointed at by the mouse pointer. As you move the pointer around the image to point at different pixels, this info will update the X,Y coordinates and the intensity value of the pixel currently being pointed at.</p> <p>The bottom right corner displays the dimensions of the image:</p> <pre><code>Height: 537, Width: 358\n</code></pre> <ul> <li>Height = number of rows</li> <li>Width = number of columns</li> </ul>"},{"location":"imageProcessing/ImageIntro/#imageviewer-tools","title":"imageViewer Tools","text":"<p>The <code>imageViewer</code> app has a variety of built-in tools that you can use to explore and modify the properties of the displayed image.</p> <p>You can review the functionality of the viewer here.</p> <p>Take a moment to familiarize yourself with the imageViewer tools and explore their operations.</p>"},{"location":"imageProcessing/ImageIntro/#useful-imtool-syntax","title":"Useful imtool Syntax","text":"<p>Before we move on, let's tidy up a bit. If you have opened many <code>imageViewer</code> windows, you can close them all with the following syntax:</p> Close All imageViewer Windows<pre><code>imageViewer close\n</code></pre>"},{"location":"imageProcessing/ImageIntro/#image-display-function-imshow","title":"Image Display Function (imshow)","text":"<p>Often you don't always need all of the bells and whistles of the <code>imageViewer</code> app. When you simply want to display your image, you can use the function <code>imshow</code>.</p> Display Image<pre><code>imshow(img)\n</code></pre> <p></p> <p>\u2026Notice that the image is displayed in a normal figure window (like a plot).</p>"},{"location":"imageProcessing/ImageIntro/#displaying-multiple-images-or-plots-in-one-figure","title":"Displaying multiple images or plots (in one figure)","text":"<p><code>imshow</code> becomes really useful when you want to display more than one image in a single figure\u2014or an image and a plot.</p> <p>First, let's open another image. I have stored another picture on the internets for our enjoyment. As you can see in the syntax below, <code>imread</code> accept URLs as file locators, so this code will download the image from my cloud drive:</p> Import moon2 from the internets<pre><code>URL = 'https://saldenest.s3.amazonaws.com/MATLAB_images/moon2.tif';\nmoon2 = imread(URL);\nimshow(moon2)\n</code></pre> <p>Now we have two image variables in the workspace: <code>img</code> and <code>moon2</code>. To display them side by side, we simply combine the use of <code>tiledlayout</code>, <code>nexttile</code>,  and <code>imshow</code> as follows:</p> Tile Images<pre><code>figure ('Name','A tale of two moons');\ntiledlayout(1,2,'TileSpacing',\"none\",'Padding',\"compact\")\n\nnexttile % first tile\nimshow(img)\ntitle('moon pic - the MATLAB built-in')\n\nnexttile % second tile\nimshow(moon2)\ntitle('moon2 - the dark side of the moon')\nimpixelinfo\n</code></pre> <p></p> <p>\u2026Here the use of <code>tiledlayout</code> with the paired inputs of ('TileSpacing', \"none\", 'Padding', \"compact\") allowed us to minimize the spacing around the two images.</p>"},{"location":"imageProcessing/ImageIntro/#interactive-display-tools-impixelinfo","title":"Interactive Display Tools (impixelinfo)","text":"<p>If you need a little more functionality than what is provided by <code>imshow</code>, you can add your own display tools (similar to the ones found in <code>imageViewer</code>) using the interactive tools included in the Image Processing toolbox.</p> <p>For example, in the code block above, we used the function <code>impixelinfo</code> to add a pixel browser to the bottom left corner of the figure window so you can browse the pixel information of the image just like you could in <code>imageViewer</code>:</p> <pre><code>Pixel Info(X,Y) Pixel Value\n</code></pre>"},{"location":"imageProcessing/ImageIntro/#cropping-images","title":"Cropping Images","text":"<p>Cropping is just like indexing a matrix. You can index an image variable just like any numeric variable because an image variable is a numeric variable.</p> <p>For this example,  we will crop the image of the dark side of the moon, <code>moon2</code>. Display the image using the <code>imtool</code> app</p> <pre><code>imageViewer(moon2)\n</code></pre> <p>You should now see the following picture of the moon in MATLAB:</p> <p></p> <p>If you inspect the image metadata you will see that this image has different dimensions from the previous image.</p> <p></p> <p>\u2026Its width and height are 987 and 984, respectively.</p>"},{"location":"imageProcessing/ImageIntro/#selecting-xy-coordinates","title":"Selecting x,y coordinates","text":"<p>In <code>imageViewer</code>, move the pointer around the image to orient yourself to the rows and columns of the image.</p> <p>Pixel coordinates vs ROW, COL indices</p> <p>In the MATLAB image tools, like <code>imageViewer</code>, pixel coordinates are listed by their X,Y coordinates, not their ROW, COL indices. In XY coordinates, X corresponds to the column index and Y corresponds to the row index. This means that first number listed inside the parenthesis indicates the column index while the second number indicates the row index \u2014 the reverse of  MATLAB indexing. Also notice that the XY coordinate of 0,0 refers the the top left corner of the image, instead of the bottom left corner of most plots.</p> <p>To convert to row, column indices, make sure that you use the X values as your columns indices and your Y values as your row indices. For example, the off-center crater in the moon image has the following row, column indices:</p> <pre><code>crater = moon2(417:529, 384:520); % index out crate\nimageViewer(crater)\n</code></pre> <p></p> <p>Similarly, you can slice out a column of image data and display using the syntax to index \"all\" rows, as follows:</p> Index out a Column of Image data<pre><code>crater_col = moon2(:,384:520)\nimageViewer(crater_col)\n</code></pre> <p></p>"},{"location":"imageProcessing/ImageIntro/#crop-function","title":"Crop Function","text":"<p>To simplify cropping, the MATLAB Imaging Toolbox includes a crop tool. The function is called <code>imcrop</code>. There is also a crop button in the <code>imageViewer</code> toolbar that does the same thing.</p> <p>Here is the syntax to call the crop tool:</p> Crop Tool<pre><code>figure; % create an empty figure\n[moon2_crop, rect] = imcrop(moon2); % crop function\nimshow(moon2_crop) % show new cropped image\n</code></pre> <p>After you execute the above commands, a window will appear displaying the image <code>moon2</code>. Your mouse pointer will turn into cross-hairs. Drag the cross-hairs over the image to capture the part of the image you would like to crop.  Then double-click inside the box you created.</p> <ul> <li> <p></p> </li> <li> <p></p> </li> </ul> <p>After double-clicking, a new variable will appear in the workspace called <code>moon2_crop</code>. This is the cropped version of <code>moon2</code>. Notice that crater variable has smaller dimensions than <code>moon2</code>.</p>"},{"location":"imageProcessing/ImageIntro/#common-image-classes","title":"Common Image Classes","text":"<p>Images are imported into MATLAB as numeric variables. To properly display images, you need a good understanding of the range of pixels found in the image (the bit depth) and the range of values possible in the numeric class. Remember, integer classes, like <code>uint8</code> have a maximum value of 255. This can a little confusing when the bit depth of the image does not match the bit depth of the numeric class.</p>"},{"location":"imageProcessing/ImageIntro/#integer-class","title":"Integer Class","text":"<p>Grayscale images are often stored as unsigned integers to save hard disk space. This means that the pixel values in these images are stored as integers and they have a set maximum value (like 255 or 4095).</p> <p>The following table lists the typical integer classes used for images of different bit depths.</p> MATLAB Class bit depth Pixel Range Class Range uint8 8-bit 0-255 0-255 uint16 12-bit 0-4095 0-65,535 uint16 16-bit 0-65,535 0-65,535 <p>For example, take the <code>moon2</code> variable that we created using <code>imread</code>. As you can see in the workspace, the class of <code>moon2</code> is uint8, which likely means that it is an 8-bit image (and has a pixel range of 0-255).</p> <p>Also, if you hover over the image in <code>imageViewer</code> you will notice that the pixel intensity varies between 0 and 255.  </p> <p>!!! note \"A word on Bit Depth and Numeric Classes</p> <pre><code>  In the table above, notice that we use the same numeric class, **`uint16`**, for both 12-bit and 16-bit images. While images may be captured at bit depths such as 12-bit, numeric variables can never be 12-bit due to the way computer memory is chunked into bytes (8 bits). So, you can only have a variable that is 8-bit or 16-bit and nothing in between. This can cause display issues in  MATLAB (and other image processing applications) if you don't adjust the image dynamic range to match to the numeric variable's dynamic. More on this later.\n</code></pre>"},{"location":"imageProcessing/ImageIntro/#logical-class","title":"Logical Class","text":"<p>The most basic raster image is a binary image, which is comprised of all ones or zeros pixels, (or , trues or falses). The MATLAB class used for binary images is logical. We can easily create a binary image by typecasting (1) into a logical class.</p> <p>1.Typecasting coverts a variable from one data type to another. Typecasting is critical for the proper display of scientific images due to the way that these images are stored and (sometimes) improperly imported. <code>moon2</code>.</p> Typecast to logical<pre><code>binary_moon2 = logical(moon2)\nimageViewer(binary_moon2)\n</code></pre> <p></p> <p>Notice that the binary image only contains <code>true</code> or <code>false</code>. Also notice that the image is listed as a 'logical' DataType in the <code>imageViewer</code> metadata panel.</p> <p></p>"},{"location":"imageProcessing/ImageIntro/#floating-point-class","title":"Floating-Point Class","text":"<p>MATLAB images can also be stored in floating point classes, such as double or single. This is especially useful for performing mathematical operations on images or for adjusting the dynamic range of an image to match the dynamic range of the numeric class. </p> <p>If you convert an image to a floating-point class, then all the pixel values in that image must range from 0 to 1 to be displayed properly in MATLAB.</p> MATLAB Class Pixel Intensity Range Class Range single 0 - 1 0-2^24 double 0 - 1 0-2^53 <p>You can use the MATLAB function <code>double</code> to typecast <code>moon2</code> to a floating point class as follows:</p> Typecast to Double<pre><code>moon2_dbl = double(moon2); \n</code></pre> <p>\u2026And the variable <code>moon2_dbl</code> is listed as a \"double\" class in the workspace. </p> <p>But when we try to display <code>moon2_dbl</code> using <code>imageViewer</code>:</p> <pre><code>imageViewer(moon2_dbl)\n</code></pre> <p>\u2026We are confronted with the following range warning</p> <p></p> <p>This warning is telling us that the range of in the <code>moon2_dbl</code> variable (0-255) do not match the expected range, which should be from 0-1.</p> <p>If we go ahead and click \"OK\", then we see the following:</p> <p></p> <p>\u2026Hmm, the image looks like a binary image, but is listed as an \"intensity\" or grayscale image in Image Information window:</p> <p></p> <p>\u2026Also, notice that if you move the cursor around the image, you can see that the original pixel values are maintained in the image as reported in the Pixel Info display at the bottom of the window</p> <p>So, the image still has a range of pixel intensities (and thus contrast), but MATLAB does not display it properly. What gives? Well, as MATLAB warned when we opened the window, a variable with a numeric class of \"double\" should have a range of values that fall between 0 and 1. ANY pixel values above 1 are displayed as the maximum intensity (or in this case, white).</p> <p>To properly covert <code>moon2</code> to a double, you can use the MATLAB function <code>im2double</code> (which is included with the Image Processing toolbox).</p> Properly typecast to double<pre><code>moon2_dbl = im2double(moon2);\nimageViewer(moon2_dbl)\n</code></pre> <p></p> <p>\u2026and now we see the moon in its all its glory, properly displayed in 256 shades of gray. We also have the restoration of the Contrast tab at the top of the window. Notice that the pixel values in the Pixel Info display are now displayed as fractions that all fall between 0.00 and 1.00.</p>"},{"location":"imageProcessing/ImageIntro/#saving-images","title":"Saving Images","text":"<p>Saving an image to your hard drive is fairly straightforward: use the functions <code>imwrite</code> and <code>uiputfile</code>.</p> <p>The following code prompts you to save the image of the moon to your computer. Choose a folder (such as the MATLAB folder) when prompted to save the image.</p> <pre><code>[file_name, folder_name] = uiputfile('moon2.tif')\nimage_path = fullfile(folder_name,file_name)\nimwrite(moon2, image_path)\n</code></pre> <p>Notice that <code>uiputfile</code> allows you to create a file name and location for the file. Otherwise the syntax is very similar to reading files.</p> <p>END</p> <p>Congratulations, you've made it to the end. Way to hang in there. \ud83d\udcf0</p>"},{"location":"imageProcessing/ImageRGB/","title":"RGB Images","text":"<p>For seeing colors and stuff</p>"},{"location":"imageProcessing/ImageRGB/#overview","title":"Overview","text":"<p>Color images are known as RGB or truecolor images. These images have three pixel intensity values per pixel position. In MATLAB, this information is organized as a three-dimensional array, where the first plane in the third dimension represents the red pixel intensities, the second plane represents the green pixel intensities, and the third plane represents the blue pixel intensities. In this module we will explore opening, displaying, and modifying RGB images.</p> <p>This module is broken down into the following sections:</p>"},{"location":"imageProcessing/ImageRGB/#things-you-should-know","title":"Things you should know","text":"<ul> <li>Describe the difference between a true-color image and a grayscale image</li> <li>Define a colormap and differentiate an RGB image with a grayscale image and a colormap</li> <li>Load an RGB image into the MATLAB workspace</li> <li>Index an RGB image to extract its component channels</li> <li>List the channel order in an RGB image (eg. plane one is always the red channel, etc. )</li> <li>Define an RGB triplet and explain how the triplet represents color</li> </ul>"},{"location":"imageProcessing/ImageRGB/#key-terminology-you-should-know","title":"Key Terminology you should know","text":"<ul> <li>RGB: a color model that uses three color values, Red, Green, and Blue, to encode all colors visible to human vision</li> <li>truecolor: 24-bit color</li> <li>Channels: color specific layers in an image</li> <li>24-bit: An image with three channels, 8-bits each</li> </ul>"},{"location":"imageProcessing/ImageRGB/#key-functions","title":"Key Functions","text":"<ul> <li>cat</li> <li>imread</li> <li>impixelinfo</li> <li>circshift</li> </ul>"},{"location":"imageProcessing/ImageRGB/#rgb-images-are-3d","title":"RGB images are 3D","text":"<p>In contrast to binary or grayscale images, RGB (or truecolor) images are 3D arrays (think cube, or cuboid).  Each channel in an RGB image is stored as plane.</p> <p></p> <p>Illustration of a 3D array. Red slice = first channel, Green = second channel, and Blue = third channel</p> <p>For RGB images, the order of the channels is always the same:</p> <ul> <li>The first plane ( index 1 in the 3rd dimension) is always the red channel</li> <li>The second plane (index 2) is always the green channel</li> <li>The third plane (index 3) is always the blue channel</li> </ul>"},{"location":"imageProcessing/ImageRGB/#loading-an-rgb-image","title":"Loading an RGB image","text":"<p>We can use <code>imread</code> to load an RGB image into MATLAB, just like we can with grayscale images.</p> <p>Here we load one of the example images that comes with MATLAB:</p> Read tissue iamge<pre><code>RGB = imread('tissue.png');\n</code></pre> whos output<pre><code>Name        Size                 Bytes  Class    Attributes\n\n  RGB       506x800x3            1214400  uint8    \n</code></pre> <p>Note the dimensions of the image that you just read in: <code>506X508X3</code>. These dimensions match the dimensions we noted in imageViewer.</p>"},{"location":"imageProcessing/ImageRGB/#displaying-an-rgb-image","title":"Displaying an RGB image","text":"<p>Even though RGB images are stored in 3D, they are displayed in 2D, like other images.</p> Display RGB image<pre><code>imageViewer('tissue.png')\n</code></pre> <p></p> <p>Here, we show the image 'tissue.png' along with its metadata. Notice the Image type is listed as <code>truecolor</code>,  the bitdepth is 24 bit. Also notice that the \"Pixel Info\" indicator now shows three intensity values ([203 203 241] in this case) instead of just one. And there is no contrast tab (those are only available for grayscale images)</p> <p>When we zoom to pixels (in the Zoom section), each pixel has three color values, R, G, and B</p> <p></p>"},{"location":"imageProcessing/ImageRGB/#challenge-questions","title":"Challenge Questions","text":"Q1: What are the dimensions of this image? <p>506 X 800 X 3 (506 rows, 800 columns, 3 'planes')</p> Q2: Based on the class of the variable, what is the maximum pixel intensity that you would expect to find in this image? What single line of MATLAB code could you write to test this? <p>Max Intensity of 255 per channel</p> Max across all Channels<pre><code>max(RGB(:))\n</code></pre> <pre><code>ans = \n    255\n</code></pre> Q3: What happens if you forget the 'all elements' indexing syntax ( : ) ? <p>For each channel, you get the max of each column (800 columns). So, the end result is a 3D vector\u20143  1X800 vectors stacked on top of each other.</p>"},{"location":"imageProcessing/ImageRGB/#indexing-rgb-images","title":"Indexing RGB Images","text":"<p>To index an entire plane from a 3D array, you need three indices: (<code>row,column,plane</code>)</p> <p></p> <p>Here we index out the RED Channel (index 1) and assign it to the variable <code>red</code></p> Index out Channel 1<pre><code>red = RGB(:,:,1);\n</code></pre> <p>\u2026This indexing syntax means \"all rows, all columns, 1st plane\" from the RGB 3D array</p> <p>Once indexed out, each 2D array is treated like a grayscale image.</p> <p>We can display the channel, using <code>imshow</code></p> Display Channel<pre><code>imshow(red) % display channel\nimpixelinfo % add pixel info tool\nimdisplayrange % display the intensity range in the bottom right corner\n</code></pre> <p></p> <p>Display of Red Channel. Notice that the red variable is displayed as if it were an 8-bit, grayscale image, which technically it is. You only get an RGB truecolor image when you have three intensity values for each pixel.</p>"},{"location":"imageProcessing/ImageRGB/#plot-all-of-the-channels","title":"Plot all of the channels","text":"<p>Here we use a FOR LOOP to display all of the channels in the RGB image. Notice that we display the RGB image before we start the FOR LOOP.</p> <pre><code>figure % new figure\ntiledlayout(\"horizontal\",\"TileSpacing\",\"none\",\"Padding\",\"tight\") % set tile layout\n\nnexttile % create new tile\nimshow(RGB) % display the RGB image\ntitle(\"RGB\") % title\n\nchs = [\"Red\" \"Green\" \"Blue\"]; % string array for channel titles\nfor n=1:3 % run three times to display the channels\n    channel = RGB(:,:,n); % index out each channel\n\n    nexttile % create a new tile\n    imshow(channel) % display the current channel\n    title(chs(n)) % title the current channel\nend\n</code></pre> <p></p>"},{"location":"imageProcessing/ImageRGB/#build-an-rgb-image-from-its-channels","title":"Build an RGB Image From its Channels","text":"<p>To build an RGB image, you simply need to recreate the 3D array. Use the <code>cat</code> function to easily concatenate in the third dimension.</p> <pre><code>figure; \nrgb2 = cat(3, red, green, blue)\nimshow(rgb2)\n</code></pre> <p></p>"},{"location":"imageProcessing/ImageRGB/#swapping-channels","title":"Swapping Channels","text":"<p>What happens when you swap the channels---that is, build the RGB image with channel order mixed up:</p> <pre><code>figure; \nrgb2 = cat(3, green, red, blue) % swap channel order\nimshow(rgb2)\n</code></pre> <p></p> <p>If you swap the channel order, you change the colors, sometimes in unexpected ways!</p>"},{"location":"imageProcessing/ImageRegionProcessing/","title":"Region Processing","text":"<p>For counting and measuring stuff</p>"},{"location":"imageProcessing/ImageRegionProcessing/#overview","title":"Overview","text":"<p>Ok. Great. We have segmented the moon and cleaned up the mask, so\u2026 now what? Well, now, lots of stuff. For example, you can use that mask to make calculations, such as the area or diameter of the mask. Or you can use the mask to restrict image processing to the corresponding regions in the image.  </p>"},{"location":"imageProcessing/ImageRegionProcessing/#things-you-should-know","title":"Things you should know","text":"<p>You should know how to:</p> <ul> <li> <p>Calculate quantities, such as area and length, using image masks and simple mathematical operations</p> </li> <li> <p>Convert calculated quantities into real-world measurements</p> </li> <li> <p>Calculate the region properties of connected components using the Image Region Analyzer tool or the <code>regionprops</code> function</p> </li> </ul>"},{"location":"imageProcessing/ImageRegionProcessing/#important-terminology","title":"Important Terminology","text":"<ul> <li>Region Properties: The properties of said regions. Examples include area, count, roundness, etc.</li> </ul>"},{"location":"imageProcessing/ImageRegionProcessing/#stuff-you-should-read","title":"Stuff you should read","text":"<ul> <li>Region and Image Properties</li> </ul>"},{"location":"imageProcessing/ImageRegionProcessing/#functions-you-should-know","title":"Functions you should know","text":"<ul> <li>regionprops - Measure properties of image regions</li> </ul>"},{"location":"imageProcessing/ImageRegionProcessing/#local-processing","title":"Local Processing","text":"<p>Say we wanted to increase the brightness of the moon. For reference, here is our moon and it's histogram. You can find the code for loading the moon here.:</p> <p></p> <p>Original moon2 and its histogram</p> <p>Since all images are just numeric matrices, the simplest way to brighten an image is to add 50 to all pixels, as follows</p> Brighten Image<pre><code>moon2 = imread('https://saldenest.s3.amazonaws.com/MATLAB_images/moon2.tif'); % load moon2\nmoon_bright = moon2 + 50; % brighten image\n\n% display results\nsubplot(1,2,1); % create new tile\nimshow(moon_bright) % display image\n\nsubplot(1,2,2); % create new tile\nimhist(moon_bright) % display histogram\nxlim([-5 260]) % adjust X- limits\nylim([0 7e3]) % adjust Y- limits of the histogram\n</code></pre> <p></p> <p>And the moon is brighter, but so is space, which is now an unsatisfyingly dull gray. When we examine the  histogram, we see that we have simply shifted the distribution of pixels to the right and introduced a significant number of saturated pixels, thereby reducing the overall contrast in the image. Remember, this is an 8-bit image, so the maximum intensity any one pixel can have is 255.</p> <p>To avoid changing the brightness of space, we can use our moon mask as a logical index to restrict the brightening of pixels to just those pixels found in the moon. Remember, we created our moon mask here and stored the final cleaned-up mask in <code>p.sm_nz</code>.</p> <pre><code>% set image and mask\nmoon_bright = moon2; % copy moon image;\nmoon_mask = p.sm_nz; % copy final mask from clean-up steps\n\n% brighten image\nmoon_bright(moon_mask) = moon_bright(moon_mask) + 50; % brighten moon by 50 (1)\n\n% display results\nimshowpair(moon_bright, moon2,'montage') % display side-by-side\ntitle('Brightened | Original')\n</code></pre> <ol> <li> Notice the use of recursive assignment here: On both sides of the equal sign we have <code>moon_bright(moon_mask)</code>. This means to only brighten those pixels that fall inside the moon and then overwrite those values with the brightened ones.</li> </ol> <p></p> <p>Using <code>moon_mask</code> as a logical index on the grayscale image <code>moon_bright</code> allows us to add 50 to only those pixels found inside the mask (and nowhere else). Notice that space has remained a satisfyingly dark black.</p> <p>We can also see the effect of just brightening the moon pixels by comparing the histograms:</p> <p></p> <p>Here you can see that the space pixel bin remains locked at 0 for both histograms, while in the brightened histogram, the moon pixels have been shifted to the right, brightening the moon. Also notice that in the brightened image there are now a significant number of pixels that have been saturated to the maximum pixel intensity of 255. These pixels appear as bright white in the brightened image. It is usually not best practice to saturate a large portion of your pixels and the brightened image does look worse than the original image, but fine for demonstration purposes.</p>"},{"location":"imageProcessing/ImageRegionProcessing/#challenge-brighten-up-that-space","title":"Challenge - Brighten up That Space","text":"QuestionAnswer <p>Using the same moon mask from the example above, how would you brighten just the space pixels and not moon pixels, as shown below? Recall that in the original image the space pixels all had a value of 0. Review the histogram.  can you guess what intensity value the space pixels should be set to?</p> <pre><code>space_bright = moon2; % copy moon image\nspace_bright(~moon_mask) = 100; % set all NON-MOON pixels (aka SPACE pixels) to 100\n\n% display the results\nsubplot(1,2,1);\nimshow(space_bright) % show brightened space image\n\nsubplot(1,2,2);\nimhist(space_bright) % show histogram\nxlim([-5 260]) % adjust X- \nylim([0 7e3]) % and Y- limits of the histogram\n</code></pre> <p>\u2026As you can see from the code, we set the space pixel intensity values all to 100. Remember, \"~\" means LOGICAL NOT, which basically converts all TRUEs to FALSEs, and vice versa in the binary image. </p> <p></p>"},{"location":"imageProcessing/ImageRegionProcessing/#size-measurements","title":"Size Measurements","text":"<p>We can also use masks to make measurements. Recall, each pixel in an image represents the sampling of a location in space. Think tiny little boxes. As such, each pixel has a set width and length and, of course, an area. The length and width of each pixel is 1 and the area is also 1 (1x1 = 1 pixel\\(^2\\)). So measuring objects typically consists of counting pixels (and even fractions of pixels).</p> <p>For example, we can easily calculate the area of the moon mask by counting the number of pixels inside the mask. Since  <code>moon_mask</code>  is a logical array that contains only logical 1's and 0's, all you need to do add up all of the ones. MATLAB does this automatically for you when use the function <code>sum</code>:</p> Calculate the area of the mask<pre><code>moon_area = sum(moon_mask(:)) % Add up all of the TRUES\n</code></pre> area in pixels<pre><code>moon_area =\n\n      273495 % area in pixels\n</code></pre> <p>\u2026The value returned is the area in pixels\\(^2\\)</p>"},{"location":"imageProcessing/ImageRegionProcessing/#real-world-measurements","title":"Real World measurements","text":"<p>But what if we want to know our value in real-world measurements, like square miles (or square kilometers if you're un-American and have a fetish for reasonably spaced metrics).</p> <p>For that, we need to know the dimensions of the pixels, length and width, in miles. Often this type of information is included in the metadata of the image, but sadly our image did not provide such data. In such a situation, we need to compare our measurement to a known measurement, like the actual diameter of the Moon in miles.</p> <p>Once we have such a measurement, we can then easily figure out how big our pixels are in real-world measurements using the following steps</p> <ol> <li>Calculate the diameter of the Moon in pixels</li> <li>Get the actually diameter of the Moon in miles</li> <li>Divide the number of miles by the number of pixels to get the miles/pixel ratio in our image.</li> </ol> <p>So, how do we determine the diameter of the Moon in pixels? Well, we could just draw a line on the moon, using the `imageViewer app.</p> <p></p> <p>As shown here, Image Viewer has a \"Measure Distance\" tool, which we can use to measure distances in pixel on an image. Here, we measure the diameter of the moon to be 603.84 pixels (blue line).</p> <p>However, this method requires a precise placement of the line on the image. Another, more robust method that doesn't require user input would be to calculate the diameter from the area. Since the profile of the Moon is basically a circle, we calculate the diameter use some simple Euclidean Geometry and the rearranging of terms, as follows:</p> <ol> <li>\\(A=\\pi \\cdot r^2\\) - Area of a circle</li> <li>\\(r = \\sqrt{A / \u03c0}\\) - radius from the area</li> <li>\\(d = 2 \\cdot \\sqrt{A / \u03c0}\\) - diameter is 2x the radius</li> </ol> <p>Now we can calculate the diameter (in pixels) using the moon area that we calculated above:</p> Get Moon Diameter from Area<pre><code>moon_diameter = 2 * sqrt(moon_area / pi) % diameter in pixels\n</code></pre> <pre><code>moon_diameter =\n\n       590.11 % pixels\n</code></pre> <p>\u2026And we get a value that is slightly smaller than the value we measured using the Measure Distance tool, but within reason.</p> <p>Next, we need the diameter of the moon in actual miles. Luckily we have google, which tells us that the diameter of the moon is <code>2,159</code> miles. Sounds big. That's basically the distance between Denver and Miami.</p> <p>Finally, we can calculate the size of a pixel, as follows:</p> Calculate Miles Per Pixel<pre><code>moon_pixel = 2159 / moon_diameter\n</code></pre> <pre><code>moon_pixel =\n   3.6587\n</code></pre> <p>\u2026Thus, each pixel in the moon image is 3.67 miles per side (width and height), assuming square pixels.</p> <p>Now we can calculate the area of the moon mask in square miles:</p> Calc Area in Square Miles<pre><code>calc_area = moon_area*moon_pixel^2\n</code></pre> <pre><code>calc_area =\n\n   3.6610e+06\n</code></pre> <p>\u2026Which means that the cross-sectional area of the surface of the moon (the largest slice through the moon) is approximately 3.7 million square miles. That's real big.</p>"},{"location":"imageProcessing/ImageRegionProcessing/#intensity-measurements","title":"Intensity Measurements","text":"<p>Using the mask of the moon we can also calculate intensities metrics from the original image, such mean intensity:</p> <p>If we use the mask as logical index, we get the pixel values from inside the Moon. If we average those values, we get the mean intensity inside the moon</p> Mean Intensity of Moon<pre><code>moon_pixel_intensities = moon2(moon_mask); % pixel intensities inside moon\navg_moon_pixel_intensities = mean(moon_pixel_intensities) % calculate mean intensity of the moon pixels\n</code></pre> <pre><code>avg_moon_pixel_intensities =\n\n  106.2709\n</code></pre> <p>Compare this to the overall average intensity of the image.</p> Mean Intensity of Image<pre><code>img_pixel_intensities = moon2(:) % all pixels (1)\navg_img_pixel_intensities = mean(img_pixel_intensities)  % calculate mean intensity of all of the pixels\n</code></pre> <ol> <li> Remember, <code>(:)</code> means all elements</li> </ol> <pre><code>avg_img_pixel_intensities = \n\n   29.9287\n</code></pre> <p>\u2026The average of the image is far lower than the average of the moon, because the image includes a high number of space pixels with an intensity of <code>0</code>.</p>"},{"location":"imageProcessing/ImageRegionProcessing/#challenge-intensity-measurements","title":"Challenge - Intensity Measurements","text":"How would you calculate the range, min, and max pixel intensity of the moon pixels? Calculate Range<pre><code>range(moon2(moon_mask)) % range\n</code></pre> <pre><code>ans =\n\nuint8\n\n   255\n</code></pre> Calculate Minimum<pre><code>min(moon2(moon_mask)) % minimum\n</code></pre> <pre><code>ans =\n\nuint8\n\n   0\n</code></pre> Calculate Max<pre><code>max(moon2(moon_mask)) % maximum\n</code></pre> <pre><code>ans =\n\nuint8\n\n   255\n</code></pre>"},{"location":"imageProcessing/ImageRegionProcessing/#regional-processing-functions","title":"Regional Processing Functions","text":"<p>The function <code>regionprops</code> simplifies the process of calculating region properties. With one simple function call, you can quickly calculate an entire series of properties:</p> Calculate all the Region Properties<pre><code>regionprops(moon_mask, 'all')\n</code></pre> <pre><code>ans = \n\n  struct with fields:\n\n                   Area: 273495\n               Centroid: [493.4251 483.4057]\n            BoundingBox: [191.5000 194.5000 603 584]\n            SubarrayIdx: {[1\u00d7584 double]  [1\u00d7603 double]}\n        MajorAxisLength: 600.7383\n        MinorAxisLength: 579.7442\n           Eccentricity: 0.2621\n            Orientation: -6.8450\n             ConvexHull: [400\u00d72 double]\n            ConvexImage: [584\u00d7603 logical]\n             ConvexArea: 276330\n            Circularity: 0.7914\n                  Image: [584\u00d7603 logical]\n            FilledImage: [584\u00d7603 logical]\n             FilledArea: 273495\n            EulerNumber: 1\n                Extrema: [8\u00d72 double]\n          EquivDiameter: 590.1056\n               Solidity: 0.9897\n                 Extent: 0.7766\n           PixelIdxList: [273495\u00d71 double]\n              PixelList: [273495\u00d72 double]\n              Perimeter: 2.0840e+03\n           PerimeterOld: 2.2039e+03\n       MaxFeretDiameter: 605.7169\n          MaxFeretAngle: -173.6494\n    MaxFeretCoordinates: [2\u00d72 double]\n       MinFeretDiameter: 584\n          MinFeretAngle: -90\n    MinFeretCoordinates: [2\u00d72 double]\n</code></pre> <p>But wait, there's more. If you also want to calculate the intensity properties from the original image, input the image as the second input:</p> Calculate Intensity values<pre><code>regionprops(moon_mask,moon2, {'MaxIntensity','MeanIntensity','MinIntensity','WeightedCentroid'})\n</code></pre> <pre><code>ans = \n\n  struct with fields:\n\n    WeightedCentroid: [461.4839 441.1727]\n       MeanIntensity: 106.2709\n        MinIntensity: 0\n        MaxIntensity: 255\n</code></pre> <p>\u2026weight centroid uses intensity as an additional input to calculate the center of the mask.</p> <p>Review the regionprops documentation for more information.</p>"},{"location":"imageProcessing/ImageSegmentation/","title":"Segmentation and Region Processing","text":"<p>For Finding Stuff in Your Images and measuring them</p> <p></p>"},{"location":"imageProcessing/ImageSegmentation/#overview","title":"Overview","text":"<p>Sometimes you only need to process just part (or parts) of an image. Or, you need identify objects inside an image. To do these things, you need to label the image as having important and unimportant parts. This labeling is known as segmentation and these smaller parts are often referred to as regions (or blobs or connected components). These regions are often stored as logical arrays that are the same size as the image being processed. In this logical array, which are often called binary images or masks, the regions to be processed will be represented as a cluster of 1's.</p> <p>In this module, we will learn how to segment an image into regions, how to create a mask from those regions, and how to analyze the properties of those masks or how to use those masks for regional processing.</p>"},{"location":"imageProcessing/ImageSegmentation/#things-you-should-know","title":"Things you should know","text":"<p>By the end of this module you should be able to:</p> <ul> <li> <p>Manually segment an image</p> </li> <li> <p>Create a mask of an image using threshold values</p> </li> </ul>"},{"location":"imageProcessing/ImageSegmentation/#terminology-you-should-be-able-to-use","title":"Terminology you should be able to use","text":"<ul> <li>Image Segmentation: the process of partitioning an image into parts or regions</li> <li>Binarization: the process of creating a binary image by binning the original image's intensity values based a histogram threshold value. The most common binarization operation results in two bins: a positives bin for intensity values above the threshold and a negatives bin for intensity values that fall below the threshold.</li> <li>Connected components: connected clusters of pixels in an image</li> <li>Otsu's Method: A popular algorithm used to come up with the threshold value for binarization from an image's histogram</li> <li>Region: aka Neighborhood aka Connected Components aka Blobs: areas of significance in an image. In a binary image, these regions are essentially contiguous TRUEs surrounded by FALSEs.</li> <li>ROI: region of interest, a part of an image captured by a drawing tool such as the ellipse tool or the polygon tool</li> <li>Mask: a binary image with the same dimensions as a grayscale image, but which has <code>TRUEs</code> in the locations corresponding to regions of interest and <code>FALSEs</code> everywhere else.</li> </ul>"},{"location":"imageProcessing/ImageSegmentation/#relevant-matlab-stuff-you-should-read","title":"Relevant MATLAB Stuff you should read","text":"<ul> <li> <p>Image segmenter app</p> </li> <li> <p>ROI based processing</p> </li> <li> <p>Image segmentation</p> </li> </ul>"},{"location":"imageProcessing/ImageSegmentation/#important-functions-you-should-know","title":"Important Functions you should know","text":"<ul> <li>drawcircle - Create customizable circular ROI</li> <li>graythresh - Global image threshold using Otsu's method (input image)</li> <li>otsuthresh - Global histogram threshold using Otsu's method (input histogram)</li> <li>imbinarize - Binarize 2-D grayscale images thresholding</li> </ul>"},{"location":"imageProcessing/ImageSegmentation/#segmentation","title":"Segmentation","text":"<p>Segmentation is the process of selecting and labeling regions in an image. Each region represents a span of connected pixels and you can have more than one region. Segmentation is often used to identify objects in image and capture relevant metrics such as area and average pixel intensity of the object.</p> <p>Consider the following image of the moon:</p> <p></p> <p>This image can clearly be segmented into two parts: pixels that are in Space and pixels that are on the Moon.</p>"},{"location":"imageProcessing/ImageSegmentation/#manual-segmentation","title":"Manual Segmentation","text":"<p>Often the most straightforward way to segment an image (and the most time-consuming) is to manually outline the region of interest. A manual outline is typically called a Region-of-Interest or ROI.</p> <p>MATLAB includes a collection of ROI tools with differing shapes that you can use to manually segment images, as described in the ROI-based processing documentation.  Shape options include circles, ellipses, polygons, lines, and others.</p> <p>The following example code activates the Circle ROI tool, allowing you to draw a circle around the moon and create your very first ROI. Here we use the function <code>drawcircle</code>, which activates the ROI tool and returns a handle to the ROI, called simply <code>roi</code>.</p> <pre><code>moon2 = imread('https://saldenest.s3.amazonaws.com/MATLAB_images/moon2.tif');\nfigure; \ntiledlayout(1,2,\"TileSpacing\",\"none\")\n\nnexttile % create tile\nimshow(moon2); % display image\ntitle('image') % add title\n\nroi = drawcircle; % activate the circle ROI tool\nroi.wait; % pause code until user double-clicks on ROI\n\nnexttile\nbw = roi.createMask; % create mask\nimshow(bw) % display the mask\ntitle('mask)\n</code></pre> <p></p> <p>After running this code, a picture of the moon will appear. Hover the mouse over the image. The arrow should change to a cross-hair indicating that the ROI tool is activated. To draw the circle, simply click and drag the cross-hair from the top of the moon to the bottom of the moon. Release the mouse button when the ROI covers the moon. If your circle is too large or too small, simply click on one of the four vertices to resize the circle. As you can see in the right panel in the above image, we have successfully segmented (or masked) our moon.</p> <p>Notice that the handle <code>roi</code> has the cube icon () in the workspace. This identifies the variable as an object. An object is kind of like a variable/function combo. In this example, the object contains all of the data and methods needed to manipulate the ROI that you just drew. For example, the following returns the x- and y- coordinates of the ROI center and its radius in pixels.</p> Display ROI Center coordinates<pre><code>roi.Center\n</code></pre> result<pre><code>ans =\n\n  495.9819  486.5542\n</code></pre> Display ROI Radius<pre><code>roi.Radius\n</code></pre> result<pre><code>ans =\n\n  296.1042\n</code></pre> <p>If you move the ROI, the coordinates will automatically be updated. If you resize the ROI, the radius will be updated.</p> <p>The object handle also includes functions that can be evoked using dot notation. For example, the code <code>roi.wait</code> executes a wait function, which tells MATLAB to pause execution of the code until you have finished drawing the ROI to your specifications. MATLAB waits until you double-clicked on the ROI. This allows you to draw and move the ROI at your leisure without worrying about the code continuing to execute without your final input. Once you double-click inside the ROI and the code will resume execution after the  <code>roi.wait</code> line. The function <code>roi.createMask</code> creates a mask from your ROI. This mask is a binary image that has the same dimensions as the original image but with TRUEs at locations that correspond to inside the ROI, and FALSEs everywhere else.</p>"},{"location":"imageProcessing/ImageSegmentation/#multiple-manual-segmentations","title":"Multiple Manual Segmentations","text":"<p>Sometimes, you need to segment multiple ROIs sequentially. To simplify this process, we can use a WHILE LOOP to continue the segmentation process until the user indicates they would like to stop.</p> <p>The following code allows us to segment multiple circles on the moon. To use, activate the code block. When the image comes up, draw a circle on each crater that you want to capture. Make sure that you double-click on the crater when you're finished. And then draw the next crater.  When you're done, press the stop button.</p> Multiple Segmentations<pre><code>figure;\nimshow(moon2)\ncrater_mask = false(size(moon2)); % reset the mask to all false\n\n% add a push-button to the figure\nbutton_handle = uicontrol('Style', 'PushButton', ...\n    \"FontWeight\",\"bold\",...\n    'String', 'STOP', ...\n    \"ForegroundColor\",\"white\",...\n    'BackgroundColor',[1 0 0],...\n    'Callback', 'delete(gcbf)'); % calls the function delete when pressed\n\nwhile ishandle(button_handle) % continue looping while there is still a STOP button\n    roi = drawcircle;\n\n    if ishandle(roi)\n      wait(roi); % wait for double click\n      crater_mask = roi.createMask | crater_mask;\n    end\nend\n\nfigure; % create a new figure\nimshowpair(img,crater_mask) % overlay the mask (pink) and the original image (green)\n</code></pre> <p>\u2026In this code, we start by adding a push-button (labeled \"STOP\") to the figure. The sole function of this button is to delete the figure in which it exists.  This is accomplished by setting the callback property of the button to <code>delete(gcbf)</code>. The callback function is the function that is called when the button is pressed.  <code>gbcf</code> is a function that points to the current figure, so <code>delete(gcbf)</code> deletes the current figure. Once you delete the figure, everything inside of the figure is deleted as well, including the button. So, this acts kind of like a self-destruct function. Pretty cool.</p> <p></p> <p>Before the WHILE LOOP, we also create a logical array, crater_mask, that is the same size as the image and which will hold the masks for our craters.</p> <p>Then, we initiate the WHILE LOOP, which is contingent on the existence of the STOP button: <code>ishandle(button_handle)</code>. The <code>ishandle</code> function asks if the button still exists. So, once you press the button you destroy the figure, which destroys both the button and the image, and ultimately stops the WHILE LOOP.</p> <p>Inside the WHILE LOOP, we have the code for generating ROIs and masks from these ROIs. Notice that we perform a logical OR operation to combine the mask created by the ROI with the pre-initialized mask, crater_mask.</p> <p>When the loop ends, we overlay the image with our crater_mask.</p> <p></p>"},{"location":"imageProcessing/ImageSegmentation/#thresholding","title":"Thresholding","text":"<p>Manual segmentation can be a bit of a drag (see what I did there) and very time-consuming. A far simpler way to segment an image would be to automate the process\u2014let the computer do it.</p> <p>Thresholding is the process of generating binary images from grayscale images based on an intensity threshold (or cut-off). Any pixel intensity equal to or greater than the cut-off is set to <code>true</code>, whereas any pixel intensity value below the cut-off is set to <code>false</code>.</p>"},{"location":"imageProcessing/ImageSegmentation/#thresholding-by-logical-operation","title":"Thresholding by Logical Operation","text":"<p>The simplest way to threshold is to choose a cut-off and then apply a logical operation.</p> <p>For example, the space pixels in the moon image all have an intensity of 0. You can confirm this by \"Zooming to Pixels\" in the <code>imageViewer</code>: in the imageViewer \"Viewer\" tab, under the \"ZOOM\" section, select \"Zoom to Pixels\" in the pop-up menu. Be sure that the \"Show Pixels Values\" checkbox is checked.</p> <p></p> <p>Zoom to Pixels. This is what you should see when you Zoom to Pixels. Left Panel. An overview of the image with a small blue rectangle indicating the region of zoom. You can click and drag this rectangle around to inspect different regions of the image. Right Panel The zoomed-in region showing an enlarged view of the moon-space boundary image, down to the level of the pixels. Inside each pixel, is the letter I followed by the pixel intensity. Notice that most of the black pixels have an intensity of <code>0</code>, while the brighter, lighter gray pixels have an intensity greater than 0.</p> <p>Here we simply perform a relational operation on the moon along the lines of \"find all pixels with an intensity great than zero\":</p> Pixels greater than 0<pre><code>moon_binary = moon2&gt;0;\nimshow(moon_binary)\n</code></pre> <p></p> <p>A binary image that masks the moon.</p> <p>NOTE: This is an unusually easy image to segment. Most images would have more noise in the segmentation.</p>"},{"location":"imageProcessing/ImageSegmentation/#threshold-by-algorithm","title":"Threshold by algorithm","text":"<p>In the previous example, we visually inspected the image and found that most space pixels had an intensity of 0 whereas the moon pixels had intensity values greater than 0. Which means that there is an abrupt change in pixel intensity values at the edge of the moon. This edge can be seen in the image's histogram:</p> <p></p> <p>Notice the propensity of space pixels (intensity of 0) while most of the moon's intensity values fall between 25 and 200.</p> <p>Wouldn't it be nice if we could train a computer to read an image's histogram and come up with a threshold all on its own, leaving us time to work on our instagram posts or Tik-tok videos? Well, in fact, we have, and this method is called Otsu's Method (so, technically Otsu came up with this method). This algorithm assumes that an image contains two classes of pixels (background and foreground pixels) and it then calculates a threshold that best separates these pixels based on the image's histogram. Note, there are other algorithms out there, but Otsu's is one of the most commonly used algorithms for thresholding. Otsu was the man.</p> <p>The function <code>graythresh</code> uses Otsu's method and returns a threshold value. All we do is plug in the image variable, as follows:</p> Get Cut-off<pre><code>cutoff = graythresh(moon2)\n</code></pre> result<pre><code>cutoff =\n\n    0.2745\n</code></pre> <p>\u2026and we get a cut-off value in the range from 0 to 1 (the double class range). One thing to emphasize here is that <code>graythresh</code> converts the input image into a double class before performing its magic. And then, it spits out the result as a double. So keep that in mind.</p> <p>Now that we have a cut-off value, we simply need to run the logical operation. However, since the cut-off value is a double class while the image is still a <code>uint8</code> class, we need to rescale the cutoff to the 8-bit class range before proceeding. The function  <code>im2uint8</code> simplifies this:</p> Convert value to double<pre><code>cutoff = im2uint8(cutoff)\n</code></pre> result<pre><code>cutoff =\n\n  uint8\n\n   70\n</code></pre> <p>\u2026The cutoff variable is now a class <code>uint8</code> and its value falls in the 0-255 range. 70 seems a little high, considering most space pixels appeared to have a value of 0, but we'll try it anyway.</p> <p>As before, we'll use a logical relational operation to create a binary image and then use the function <code>imshowpair</code> with a third input of 'montage' to display the original image and the mask side by side:</p> Threshold using Otsu's method<pre><code>mask = moon2&gt;cutoff; % create mask\nimshowpair(moon2, mask,'montage') % display original and mask, side by side\n</code></pre> <p></p> <p>And\u2026the segmentation sort of works. True, the algorithm lumped the crater pixels with the space pixels, so those didn't get masked, but this kind of result often happens with automated segmentation techniques. Computers just aren't that smart.</p>"},{"location":"imageProcessing/ImageSegmentation/#image-pre-processing","title":"Image Pre-processing","text":"<p>Because computers are kind of dumb, you will often need to preprocess your image to make the thresholding task really easy for the computer. For the moon image, one way to do so would be to reduce the contrast between the crater pixels and the pixels from the rest of the moon. As we discussed in the Enhancement Module, we can do this using <code>gamma</code> and <code>imadjust</code>. Then, we just repeat the steps from above.</p> Preprocess, then Threshold<pre><code>img = imadjust(moon2,[],[],0.10); % apply gamma \ncutoff = im2uint8(graythresh(img)); % find threshold\nmask = img&gt;cutoff; % logical operation to create mask\n</code></pre> <p>And plot the results to see how we did:</p> Display results<pre><code>figure;\nsubplot(2,1,1); % create first tile\nimshowpair(img, mask,'montage') % display preprocessed image and mask, side by side\ntitle('Gamma Adjusted Moon | Mask','FontSize',18)\n\nsubplot(2,1,2); % create second tile\n imhist(img) % display histogram of the preprocessed image\nhold on\nplot([cutoff cutoff], [0 2e4],'--r') % plot cutoff as a dotted red line\nxlim([-5 260]) % adjust X- limit\nylim([0 2e4]) % and Y- limits of the histogram\ntitle('histogram after gamma')\n</code></pre> <p></p> <p>\u2026And the thresholding works much better. Notice how we eliminated the shadows in the preprocessed image (gamma-adjusted moon). In the histogram, we can see how we shifted the moon pixels far to the right and away from the space pixels, which are still locked at 0. So, it was a much easier task for the algorithm to come up with a cut-off, shown here as a dotted red line, that separates the moon pixels from the space pixels.</p>"},{"location":"imageProcessing/ImageSegmentation/#thresholding-functions","title":"Thresholding Functions","text":"<p>Of course, there are thresholding functions, such as <code>imbinarize</code> which simplify much of the process of finding a threshold and applying it to the image. For example, this code\u2026</p> <pre><code>BW = imbinarize(moon2,'adaptive','Sensitivity',1);\nimshow(BW)\n</code></pre> <p>\u2026results in this:</p> <p></p> <p>Which is pretty good for a simple function call, but could still use some image pre-processing. The mask also needs to be cleaned up, which is something we'll talk about in the next module\u2026</p>"},{"location":"imageProcessing/ImageSegmentationCleanup/","title":"Segmentation Clean-up","text":"<p>For cleaning up your stuff</p>"},{"location":"imageProcessing/ImageSegmentationCleanup/#overview","title":"Overview","text":"<p>As we saw in the previous module, automatic thresholding can often get us most of the way to segmenting a region of interest, but often leaves some part of the region of interest unsegmented.</p> <p>Fortunately, there are easy ways to clean this up, which is what this module is about.</p>"},{"location":"imageProcessing/ImageSegmentationCleanup/#things-you-should-know","title":"Things you should know","text":"<ul> <li> <p>How to use Morphological Operations to clean up the masks</p> </li> <li> <p>Calculate quantities, such as area and length, using image masks and simple mathematical operations</p> </li> <li> <p>Convert calculated quantities into real-world measurements</p> </li> <li> <p>Calculate the region properties of connected components using the Image Region Analyzer tool or the <code>regionprops</code> function</p> </li> </ul>"},{"location":"imageProcessing/ImageSegmentationCleanup/#important-terminology","title":"Important Terminology","text":"<ul> <li>Morphological Operations: Image processing that works on Regions. Examples include removing small regions from an image (noise clean-up) or changing the shapes of the regions by, for example, making them fatter or skinnier.</li> <li>Region Properties: The properties of said regions. Examples include area, count, roundness, etc.</li> <li>4- or 8 -Connected Neighborhoods: Refers to the Method of determining whether two pixels are contiguous (touching). Are their sides touching (4-connected, more restrictive)? Or are their corners touching too (8-connected, less restrictive)?</li> </ul>"},{"location":"imageProcessing/ImageSegmentationCleanup/#stuff-you-should-read","title":"Stuff you should read","text":"<ul> <li>Morphological operations</li> <li>Types of Morphological Operations</li> </ul>"},{"location":"imageProcessing/ImageSegmentationCleanup/#functions-you-should-know","title":"Functions you should know","text":"<ul> <li>bwmorph - Perform a select set of morphological operations on an image</li> <li>bwareaopen - Remove small objects from binary image</li> <li>bwareafilt - Extract objects from binary image by size</li> <li>imfill - Fill image regions and holes</li> </ul>"},{"location":"imageProcessing/ImageSegmentationCleanup/#morphological-operations","title":"Morphological Operations","text":"<p>Once we have created a mask, it is often useful to clean up the mask using Morphological Operations. As the name implies, morphological operations operate on the shape of a mask. These operations can change the shape of a mask or, in some cases, remove the mask entirely.</p> <p>These operations depend on the concept of \"touching\" or \"connected pixels.\" So, what does it mean to say that pixels are \"connected\"? Consider the following two diagrams:</p> <p></p> <p>Pixel Connectivity. Left Panel. In a 4-connected neighborhood, only pixels that share an edge (horizontally or vertically) are considered touching. In this definition, the Red pixels touch the white pixel, while the gray pixels do not.  A 4-connected neighborhood is a more stringent definition of touching. Right Panel. In an 8-connected neighborhood, pixels that touch an edge or a corner are considered touching. In the above figure, all of the red pixels are considered to be touching the white pixel. This is the default setting.</p> <p>A collection of touching pixels is known by many names: connected components, blobs, objects, or even regions. And you can have more than one blob per image mask, which are known as non-contiguous blobs.</p>"},{"location":"imageProcessing/ImageSegmentationCleanup/#basic-morphological-operations","title":"Basic Morphological Operations","text":"<p>The image processing toolbox offers many functions that manipulate connected-components based on their size, shape, or location.</p> <p>These operations work using a Structuring Element, which is like a mini-mask with a specified shape like a disk or a diamond</p> <p>Morphological Operations on masks can be summarized as follows</p> <ul> <li>Dilate: Expand the mask and shrink holes in the mask</li> <li>Erode: Shrink the mask and expand holes in the mask</li> <li>Open: Erosion followed by dilation.  Remove masks objects smaller than the structuring element</li> <li>Close: Dilation followed by erosion. This removes holes in the mask smaller than the structuring element</li> </ul> <p>For example, the most basic operations make masks thicker (aka \"dilate\"):</p> <p></p> <p>Left Panel. Original Mask. Right Panel. Dilated Mask</p> <p>\u2026or thinner (aka \"erosion\")</p> <p></p> <p>Left Panel. Original Mask. Right Panel. Eroded Mask</p> <p>Common matlab functions that we will use include:</p> <ul> <li><code>bwareaopen</code> - used to clean up small pixel clusters.</li> <li><code>bwmorph</code> - a general morphologic operations tool</li> <li><code>bwareafilt</code> - filter out connected-components by size</li> <li><code>imfill</code> - When used with the 'holes' input, fills any gaps (or holes) in the connected components</li> <li><code>imclearborder</code> - remove connected components that touch the edges of the image</li> </ul>"},{"location":"imageProcessing/ImageSegmentationCleanup/#morph-ops-example","title":"Morph Ops Example","text":"<p>To clean up the mask of our moon, we could use the following morphological operations:</p> Threshold Moon Image and Clean-up<pre><code>p.img = moon2; % copy moon variable\np.mask = imbinarize(p.img,'adaptive','Sensitivity',1); % threshold moon\n\n% morphological operations\np.edges  = bwmorph(p.mask,'close'); % seal the edges\np.fill = imfill(p.edges,'holes'); % fill any holes\np.sm_nz = bwareaopen(p.fill,100); % remove any small noise\n\n% display the results\nfigure(visible=\"on\");\ntiledlayout(\"horizontal\",\"TileSpacing\",\"none\",\"Padding\",\"tight\");\n\ns = [\"img\" \"mask\" \"edges\" \"fill\" \"sm_nz\"]; % setsorder of display\n\n% FOR LOOP\nfor n=s % runs for each field in p\n    nexttile % create a new tile\n    imshow(p.(n)) % display current field in p in the current tile\n    title(n,Interpreter=\"none\") % title with fieldname\nend\n</code></pre> <p></p> <p>Here we display the incremental steps in the Segmentation and Mask Clean-up process. To organize all of the incrementally changing masks, we package everything in structure, <code>p</code>, which  then allows us to easily create a FOR LOOP that displaying all of the images. img. The original image. mask. The thresholded image (a binary image) generated using <code>imbinarize</code>. edges. The mask after <code>bwmorph</code> with a 'close' second input. fill. The mask after <code>imfill</code>. ms_nz. The mask after a `bwareaopen.</p> <p>Notice in the code that for each the morphological operation, we input the output from the previous step. So, we are in effect daisy chain morphological operations. This is a very common procedure as each morphological operation typically only affects one aspect of the mask.</p>"},{"location":"imaging/","title":"Imaging","text":"<p>Imaging</p> <p>The representation or reproduction of an object's form; especially a visual representation (i.e., the formation of an image).</p>"},{"location":"imaging/CTImaging/","title":"Computed Tomography Overview","text":""},{"location":"imaging/CTImaging/#important-terminology","title":"Important Terminology","text":"Term Definition Tomography Creating a virtual cross section through a human body or other solid object using any kind of penetrating wave  (typically X-rays or ultrasound) CT Computed Tomography or  Computed Axial Tomography (CAT scan): the process of using multiple X-ray images taken across multiple angles to produce tomographic slices. Computations are used to generate the tomographic slices Radon Transformation Used to compute the linear projections of an image matrix along specified directions. Sinogram A visual representation of the raw data obtained in a computed axial tomography (CT) scan Filtered Back projection The process of deblurring and reconstructing a 2D image from the sinogram captured during the CT scanning process <p>Illustration of a tomograph. S1 and S2 are the tomographic cross-sections. P is the projection</p>"},{"location":"imaging/CTImaging/#important-resources","title":"Important Resources","text":"<ul> <li> <p>Basic CT intro - Sprawls CT tutorial</p> </li> <li> <p>More detailed discussion of Tomography and CT</p> </li> <li> <p>Wikiradiography</p> </li> </ul>"},{"location":"imaging/CTImaging/#ct-sinogram","title":"CT Sinogram","text":"<p>CT captures radon transform data which is often called a sinogram because the Radon transform of an off-center point source is a sinusoid. Each horizontal line of a sinogram is a (1D) projection of that (2D) slice in that direction. </p> <p></p> <p>For each angle, a projection (or line integral) is captured. This line integral represents the sum of the density of the object in a given direction. Therefore, brightness corresponds with the sum of the radiographic density of objects being scanned</p> <p>To visualize the scanned cross-section, the data must be computationally reconstructed into an image from the sonogram. This process is known as a back projection (or inverse radon transformation).</p> <p></p> <p></p> <p></p> <p>Final 2D recreation of the object from the sinogram  </p>"},{"location":"imaging/CTImaging/#hounsfield-units","title":"Hounsfield units","text":"<p>The Hounsfield unit is a dimensionless unit used in computed tomography (CT) to measure the radiodensity of a tissue. The units are calibrated so that air is -1000 and water is 0, using the following formula:</p> <p>\\(HU=\\frac{(\\mu _{material}-\\mu _{water})}{\\mu _{water}}\\times 1000\\)</p> <p>Where:</p> <ul> <li>\\(\\mu _{material}\\) is the linear attenuation coefficient of the tissue being measured.</li> <li>\\(\\mu _{water}\\) is the linear attenuation coefficient of distilled water.\u00a0</li> </ul> <p>Values typically range from -1000 to 1000. Higher Hounsfield values correspond to denser materials, making them appear brighter on a CT scan, while lower values appear darker. HU values are widely used in clinical practice for tissue differentiation, helping radiologists distinguish between different types of tissue and pathology.</p> <p>The following is a table HU for common tissues and substances:</p> Substance HU Air \u22121000 Lung \u2212500 Fat \u2212100 to \u221250 Water 0 CSF 15 Kidney 30 Blood +30 to +45 Muscle +10 to +40 Grey matter +37 to +45 White matter +20 to +30 Liver +40 to +60 Soft Tissue, Contrast +100 to +300 Bone (cancellous) +700 Bone (cortical) +3000"},{"location":"imaging/XrayImaging/","title":"Radiography","text":"<p>Radiography uses X-rays or electromagnetic radiation to generate internal images of the body, typically for medical examination. Or sizing shoes...</p> <p></p>"},{"location":"imaging/XrayImaging/#useful-links","title":"Useful Links","text":"<ul> <li>Radiology Master Class</li> <li> <p>Basics of X-ray Physics </p> </li> <li> <p>Chest X-ray anatomy </p> </li> <li> <p>Abdominal X-ray </p> </li> <li> <p>Radiopaedia - Radiology Reference</p> </li> <li>Sprawls.org - Learning Module of Digital Image Processing of Radiographic Images</li> </ul>"},{"location":"imaging/XrayImaging/#radiographs-the-very-basics","title":"Radiographs - the very basics","text":"<p>Radiographs are images created using X-rays. X-rays are a form of electromagnetic radiation, with the same properties as visible light, but differing in wavelength:</p> <p></p>"},{"location":"imaging/XrayImaging/#radiographs-are-projections","title":"Radiographs are Projections","text":"<p>Similar to your shadow generated by the sun, a radiograph is a 2D projection of a 3D volume.</p> <p></p> <p>So, the way you are positioned between the X-ray tube and the detector affects how the radiograph will look. Just like the position of the sun affects your shadow.</p> <p></p>"},{"location":"imaging/XrayImaging/#generating-x-rays","title":"Generating X-rays","text":"<p>X-rays are generated using an X-ray tube. No external radioactive material is involved.</p> <p></p> <p>To generate X-rays, a small increase in the filament voltage results in a large increase in tube current, which accelerates high-speed electrons from the very high-temperature filament negative cathode within a vacuum, towards a positive tungsten target anode. This anode rotates to dissipate heat generated. X-rays are generated within the tungsten anode and an X-ray beam is directed towards the patient.</p> <p>X-rays are generated by the interaction of electrons around the tungsten atoms that make up the anode.</p>"},{"location":"imaging/XrayImaging/#characteristic-x-ray-generation","title":"Characteristic X-ray generation","text":"<p>Sometimes, these electrons crash into each other and cause an X-ray photon to be released in the process. This is known as Characteristic X-ray generation. </p> <p></p> <p>When a high energy electron collides with an inner shell electron both are ejected from the tungsten atom leaving a 'hole' in the inner layer. This is filled by an outer shell electron with a loss of energy emitted as an X-ray photon.</p>"},{"location":"imaging/XrayImaging/#bremsstrahlungbraking-x-ray-generation","title":"Bremsstrahlung/Braking X-Ray Generation","text":"<p>Most of the time, the electrons emitted by the cathode simply wiz by the nucleus.</p> <p></p> <p>When an electron passes near the nucleus it is slowed and its path is deflected. Energy lost is emitted as a bremsstrahlung X-ray photon. Bremsstrahlung = Braking Approximately 80% of the population of X-rays within the X-ray beam consists of X-rays generated in this way.</p>"},{"location":"imaging/XrayImaging/#x-ray-spectrum","title":"X-Ray Spectrum","text":"<p>The above image shows the spectrum produced by X-ray tube. The continuous spectrum indicates the bremsstrahlung x-rays, while the peaks indicate the characteristic x-rays. Case courtesy of Raymond Chieng (Case rID: 176014)</p>"},{"location":"imaging/XrayImaging/#creating-images-from-x-rays","title":"Creating Images from X-rays","text":"<p>Similar to light images, the intensity values found in a radiograph (an image created from x-rays) represent the amount of X-rays that reach the X-ray detector (e.g. film, cassette, digitizer, etc). But in contrast to light images, the look-up table in a radiograph is typically inverted. That is, the brightest areas in the radiograph represent the regions that received the fewest amount of X-rays, while darkest areas represent areas that received the most X-rays.</p>"},{"location":"imaging/XrayImaging/#attenuation","title":"Attenuation","text":"<p>Depending on their energy, X-rays passing through a body can either freely pass through, be absorbed, or be scattered. This interaction with the matter in a body is measured by the Attenuation Coefficient, which is a measure of how much the x-ray is weakened by the material it is passing through. Because different tissues in a body attenuate x-rays differently, a radiograph is in effect a grayscale map of x-ray attenuation.</p> <p>This is also known as x-ray tissue densities, and there are 5 main densities</p> <p></p> <p>Low density material such as air is represented as black on the final radiograph. Very dense material such as metal or contrast material is represented as white. Bodily tissues are varying degrees of grey, depending on density, and thickness. So, in a radiograph, bone and metal tends to be brighter than.</p> <p>These tissue density standards are based on the historic properties of x-ray film, which used silver halide ions to detect x-rays. X-ray Film is naturally transparent, but exposure to X-ray energy makes film more opaque. When these films were placed on light table, the transparent areas (the areas where the x-rays were mostly blocked, like bone) appeared brighter.</p>"},{"location":"imaging/XrayImaging/#intensity-conventions","title":"Intensity Conventions","text":"<p>Bone blocks the most X-rays but is given a high intensity (appears bright) on the radiograph, which may seem counterintuitive if you are unfamiliar with radiology conventions. These conventions are based on the properties of film development: bone appears white and air appears black on radiographs because bone blocks X-rays (preserving film transparency) while air allows X-rays to expose the film (making it darker).</p> <p>Film Development of yore</p> <p></p> <ul> <li> <p>Radiology Film before exposure is transparent</p> </li> <li> <p>Exposure to X-ray energy breaks bonds between silver and halides</p> </li> <li> <p>Silver-ions are then free to be removed (via chemical washes), leaving behind large silver particles</p> </li> </ul>"},{"location":"imaging/XrayImaging/#radiology-grayscale-conventions-based-on-properties-of-film-on-a-light-table","title":"Radiology Grayscale Conventions based on properties of film on a light table","text":"<ul> <li> <p>Optical Density is logarithmically proportional to Silver particles (more silver, more dense to light)</p> </li> <li> <p>Bone blocks radiation, so fewer silver ions are released and less silver is deposited; this results in bone-shadows being more transparent on the film.</p> </li> </ul> <p>On a light table:</p> <ul> <li> <p>Bone appears white because light can shine through the clear areas where the bone preserved the transparent nature of the film.</p> </li> <li> <p>Air is black because x-ray easily passes through air and exposes more of the film, creating more silver grains in that area, and increasing the opacity.</p> </li> </ul>"},{"location":"imaging/XrayImaging/#proper-windowing-of-an-x-ray-image","title":"Proper Windowing of an X-ray image","text":"<p>The windowing (or gray-level mapping) greatly affects the contrast of an x-ray.</p> <p></p> <p>X-rays and their corresponding histograms. A is overexposed, B is just right, and C is underexposed. Notice how the histograms below the images shift with the exposure. Also notice that the exposure is the opposite from what we are used to seeing. Underexposed is \"brighter\" than overexposed. Adapted from The standardized exposure index for digital radiography.</p> <p>We can adjust the exposure of the images through proper windowing:</p> <p></p> <p>Here the windowing (or gray-level mapping) of the images, as indicated by the position of the red lines, improves the image contrast.</p>"},{"location":"imaging/colorModels/","title":"Color Models","text":"<p>Definition</p> <p>Color Models are abstract mathematical models to represent colors.</p> <p> Programming design systems:</p> <ul> <li>Color Models and Color Spaces</li> <li>Perceptually Uniform Color Spaces</li> </ul> <p> On the Youtube - Captain Dillusionment: Color</p>"},{"location":"imaging/colorModels/#rgb-colors","title":"RGB Colors","text":"<ul> <li> <p>Based on how we see color using three different cones.</p> </li> <li> <p>All color is represented by the combination of three colors: Red, Green, and Blue.</p> </li> </ul> <p></p>"},{"location":"imaging/colorModels/#hsl-hsv","title":"HSL / HSV","text":"<p>HSL and HSV are representations of the RGB color model as a cylinder with Hue, Saturation, and Lightness/Value axes.</p> <p></p>"},{"location":"imaging/colorModels/#lab-colors","title":"L*a*b* Colors","text":"<p>The CIELAB color space, also referred to as Lab*, is a color space designed to create reproducible representations of color. CIELAB expresses color as a combination of perceptual lightness and 4 human colors: red, green, blue and yellow.</p> <p></p> <p>CIELAB values</p> <ul> <li>L* for perceptual lightness</li> <li>a* for the red-green scale</li> <li>b* for the blue-yellow scale</li> </ul>"},{"location":"imaging/digitalMicroscopy/","title":"Digital Microscopy","text":"<p>Primarily adapted from Nikon's MicroscopeU Source for Microscopy Education</p> <p>Additional Useful Resources: Molecular Expressions</p> <ul> <li>Light and Color</li> <li>Electromagnetic Radiation</li> <li>Jablonski Diagram</li> <li>Lenses and Geometrical Optics</li> <li>The Concept of Magnification</li> <li>Ray Diagrams</li> <li>Radius and Refractive Index Effects on Lens Action</li> </ul>"},{"location":"imaging/digitalMicroscopy/#modern-microscope-configurations","title":"Modern Microscope Configurations","text":"<p>Modern microscopes are complex (and quite pricey).</p> <p></p> <p>Adapted from The Microscope Optical Train, MicroscopyU</p>"},{"location":"imaging/digitalMicroscopy/#microscope-lens","title":"Microscope Lens","text":"<p>The main innovation in these modern microscopes are a trio of lenses:</p> <ul> <li>Objective Lens: The lens closest to the specimen (or object) being imaged. This lens projects the image to infinity (and beyond).</li> <li>Tube Lens: This lens focuses parallel ray bundles and produces an intermediately magnified image.</li> <li>Eyepiece: The lens closest to the eye. This lens also acts as an additional magnifier.</li> </ul> <p></p> <p>As shown above, the lens configuration has an Infinity \"afocal\" space between the objective and the tube lens. This creates Infinity-Corrected Microscope Conjugate Field Planes, which basically means that there is a parallel light beam running through the middle of the system. This set-up allows additional components, such as beam splitter or a prism, to be added to the light path.  Light focused by the objective produces an image at I(3) (the intermediate image) that is further magnified by the eyepiece to produce an image on the retina at I(4). Adapted from Infinity Microscopes.</p> <p>Because of this modular setup, a modern microscope has the ability to magnify up to 1000X.</p>"},{"location":"imaging/digitalMicroscopy/#objective-lens","title":"Objective Lens","text":"<p>Microscope objectives are the lens closest to the specimen (the object). They are probably one of the most important components of an optical microscope. They form the primary image and basically determine the quality of images that can be produced. Objectives also determine the magnification of a particular specimen and the achievable resolution. The many glass elements of an objective help correct for primary optical aberrations, such as chromatic aberrations or curvature of field.</p> <p></p> <p>Shown here is a 60x oil immersion with a Numeric Aperture of 1.4. It has corrections for Curvature of Field (Plan) and Chromatic Aberrations (Apo), aka apochromat. And, the lens is capable of Differential Interference Contrast (DIC). It has all these properties and capabilities because of the 15 optical elements cemented together into multiple groups. Even though there is more than one lens in an objective, they are collectively referred to as the objective lens. Intro to Microscope Objectives</p>"},{"location":"imaging/digitalMicroscopy/#curvature-of-field","title":"Curvature of Field","text":"<p>When visible light is focused through a curved lens, the image plane produced by the lens will be a curved Petzval surface. This is why eyeballs are balls (i.e. have curved surfaces). Plan Objective lenses correct for this curvature. Adapted from Curvature of Field, MicroscopeU.</p>"},{"location":"imaging/digitalMicroscopy/#chromatic-aberrations","title":"Chromatic Aberrations","text":"<p>Simple lenses refract different wavelengths of light at slightly different angles (dispersion). Effectively, this means that different colors of light are not brought into common focus. A specialized achromat doublet lens helps correct for this aberration and focuses light of two different wavelengths to the same location (just the blue and red light, in this example). There are also Apochromatic lenses (not shown) that can correct the chromatic aberrations from 3 wavelengths of light (Blue, Red, and Green). Adapted from Chromatic Aberrations, MicroscopeU.</p>"},{"location":"imaging/digitalMicroscopy/#resolution","title":"Resolution","text":"<ul> <li>Resolution</li> <li>The Diffraction Barrier</li> </ul> <p>The resolution of an optical microscope is defined as the shortest distance between two points on a specimen that can still be distinguished by the observer or camera system as separate entities. Point sources of light generate blurry Airy disks, as shown below. In this example, resolution is defined by the ability to distinguish two airy disks as separate (\"Resolution Limit\") and not blurred together (\"Unresolved\").</p> <p></p> <p>When imaging a point source of light, diffraction causes it to appear as a blurred spot known as an Airy disk, which has a bright center surrounded by fading rings.</p> <p>Rayleigh Criterion: Two point sources observed in the microscope are regarded as being resolved when the principal diffraction maximum (the central spot of the Airy disk) from one of the point sources overlaps with the first minimum (dark region surrounding the central spot) of the Airy disk from the other point source.</p>"},{"location":"imaging/digitalMicroscopy/#numeric-aperture-na","title":"Numeric Aperture (NA)","text":"<p>An objective lens\u2019s ability to gather light and resolve detail. Numerical Aperture is a value (often symbolized by the abbreviation NA) originally defined by Abbe for microscope objectives and condensers. It is given by the simple expression:</p> \\[NA=n*sin(\\alpha)\\] <p>In this equation, \\(n\\) represents the refractive index of the medium between the objective front lens and the specimen, and \\(\\alpha\\) is the one-half angular aperture of the objective.</p> <p></p> <p>Lenses with a larger NA can gather light from a wider angle of view, but a shallower depth of field. Adapted from NA - MicroscopyU, Nikon</p>"},{"location":"imaging/digitalMicroscopy/#brightfield-imaging","title":"Brightfield Imaging","text":"<p>Optical Microscopy.</p> <p>In brightfield imaging, you transmit the light through the specimen.</p>"},{"location":"imaging/digitalMicroscopy/#conjugate-planes","title":"Conjugate Planes","text":"<p>In Brightfield microscopes, both the illumination light path and the Image-forming Light path are carefully focused using a series of lenses to form conjugate planes. Two planes are conjugate if an object placed in one plane is perfectly focused in the other, meaning they are interchangeable.</p> <p></p>"},{"location":"imaging/digitalMicroscopy/#fluorescence-imaging","title":"Fluorescence Imaging","text":"<p>aka Photoluminescence</p> <p>Fluorescence is light created by light. That is, the release of light (emission) is caused by the absorption of light in a fluorescent molecule. The light being absorbed has a shorter wavelength (and higher energy), while the light being emitted has a longer wavelength (and lower energy).  For example, blue light absorption causes green light emission. This phenomenon is summarized by the Jablonski Energy Diagram, shown below.</p> <p></p> <p>A Jablonkski diagram starts with an electron in a ground state. Absorption of a higher energy photon causes an electron to jump to a higher energy (and vibrational) state. That's right, its an electron dance party. Eventually, the electron gets tired and returns to the Ground State. This loss of energy cause a photon of lower energy to be emitted. Phosphorescence is a similar phenomenon, but the dance party lasts longer.  Adapted from Molecular Expressions</p>"},{"location":"imaging/digitalMicroscopy/#fluorescence-microscopy","title":"Fluorescence Microscopy","text":"<ul> <li>Fluorescence Techniques</li> <li>Intro to Fluorescence Microscopy</li> <li>Fluorescent Proteins</li> </ul> <p>In fluorescence microscopy, you irradiate the specimen with a specific band of wavelength and then image the much weaker emitted fluorescence. As shown below, the transmitted and emitted light pass through the objective lens.</p> <p></p> <p>Cutaway diagram of a modern epi-fluorescence microscope equipped for both transmitted and reflected fluorescence microscopy. The vertical illuminator in the center of the diagram has the light source positioned at one end (labeled the episcopic lamphouse) and the filter cube turret at the other.</p> <p>Broad spectrum light from the Lamp house (typically a mercury bulb) is directed to the Filter Cube, which contains an excitation filter, a dichroic mirror, and a barrier filter. The excitation filter allows only the desired wavelengths of light to pass. The dichroic mirror reflects these wavelengths of light (the transmitted light) into the objective lens and onto the specimen. Emitted fluorescence from the specimen is directed back through the objective lens and the dichroic mirror, but this mirror is transmissive to the emitted, higher-wavelength. The emitted light then passes through the barrier filter to ensure that only the desired wavelength of light are imaged  by the digital camera.</p> <p></p> <p>Filter Cube excitation filter, dichromatic mirror, and barrier filter are incorporated into an optical block (often referred to as a cube). Modern fluorescence microscopes are capable of accommodating between four and six fluorescence cubes (usually on a revolving turret or through a slider mechanism; see Microscope Diagram) and permit the user to easily attach replacement aftermarket excitation and barrier filters, and dichromatic mirrors.</p> <p>Stokes Shift is the difference in the absorption and emission spectral profile of the fluorophore. A wider Stokes shift is preferable for good imaging.</p> <p></p>"},{"location":"imaging/digitalMicroscopy/#confocal-microscopy","title":"Confocal Microscopy","text":"<ul> <li>Confocal Techniques</li> </ul> <p>Confocal microscopy uses similar concepts as epifluorescence, but adds lasers for more power transmitted light, introduces a pinhole into the light path to eliminate out of focus light, and uses a photomultiplier to capture the focused point of light. Since only one point of light is imaged, the confocal microscope must raster (scan across) the image to capture the intended region of interest. Confocal images also capture along the z-axis, so confocal images are usually 3D.</p> <p></p> <p>The principal light pathways in a basic confocal microscope configuration.</p>"},{"location":"imaging/digitalMicroscopy/#super-resolution","title":"Super Resolution","text":"<ul> <li>Super Resolution Techniques</li> </ul> <p>Super resolution refers to any light microscopy image that circumvents the diffraction limit (200 nm) and can achieve improved lateral (x-y) resolution down to tens of nanometers.</p> <p>Examples include:</p> <ul> <li>STED</li> <li>STORM</li> <li>SIM</li> </ul>"},{"location":"imaging/digitalPhotography/","title":"Digital Photography","text":"<p>By Astrocog - Own work, CC BY-SA 3.0, Link</p>"},{"location":"imaging/digitalPhotography/#useful-resources","title":"Useful Resources","text":"<p> Cambridge in Color (CIC)</p> <p>  Expert Photography (EP)</p> <p> Camera Simulator</p>"},{"location":"imaging/digitalPhotography/#human-vision-is-not-digital-photography","title":"Human Vision is not Digital Photography","text":"<p> CIC: Cameras vs. the Human Eye</p> <p>Humans do not capture photos to see.</p> <p>Human vision</p> <ul> <li>Integrates visual information with multimodal inputs</li> <li>Reconstructs Visual objects using Higher Order processing</li> <li>This reconstruction involve including memory from past events.</li> <li>Constantly moving (fixations and saccades)</li> <li>dynamically adjusts based on subject matter</li> <li>Alternately focused on objects at various distances</li> <li>Can dynamically compensate across vast ranges of brightness (High dynamic range)</li> </ul>"},{"location":"imaging/digitalPhotography/#camera-vs-human-vision","title":"Camera vs Human vision","text":"<p>The Main things to consider are</p> <ol> <li>Angle of View</li> <li>Resolution and Detail</li> <li>Sensitivity and Dynamic Range</li> </ol>"},{"location":"imaging/digitalPhotography/#angle-of-view","title":"Angle of View","text":"<p>In cameras, the angle of view of the lens can create distortions (such as the relative heights of objects in an image) that we don't have in our vision because we reconstruct visual information into a mental 3D image. Have you have taken a picture of a mountains off in the distance and they look much smaller than your mental image of the same mountain range? Or taken a picture of a monstrous moon at the horizon and it looks tiny? Angle of View.  </p> <p></p> <p></p>"},{"location":"imaging/digitalPhotography/#resolution-and-detail","title":"Resolution and Detail","text":"<p>Only our central vision has high resolution at 20/20. Away from the center, our resolution drops off dramatically. At just 20\u02da off center, resolution drops off by one-tenth. Our minds don't record single glances as images pixel by pixel. Instead, to develop a detailed mental picture of a scene, we rapidly focus on multiple regions in the scene in rapid succession, building what seems us to be a detailed mental image of the scene, but in fact represents our biases, prioritized by interest.</p> <p></p> <p>Adapted From Younis et al, 2019</p>"},{"location":"imaging/digitalPhotography/#sensitivity-and-dynamic-range","title":"Sensitivity and Dynamic Range","text":"<p>Human vision has huge dynamic range (due to the dual Rod and Cone system in our retinas) and the fact that our visions is jumping around (fixations and sacades) all time. Our eyes are especially sensitive in low-light conditions (Rods are very sensitive to photons). We have the equivalent of 30 stops in our vision (cameras can have up to 14 stops).</p> <p></p>"},{"location":"imaging/digitalPhotography/#image-sensors","title":"Image Sensors","text":"<ul> <li> Canon: Image sensors explained</li> <li> EP: Image Sensors</li> <li> CIC: Camera Sensors</li> </ul> <p>Image sensors contain millions of light receptors, or photosites, which convert the light energy into an electrical charge. The magnitude of the charge is proportional to the intensity of the light: the more light that hits a particular photosite, the stronger the electrical charge it produces.</p> <p></p>"},{"location":"imaging/digitalPhotography/#color-filter-arrays","title":"Color Filter arrays","text":"<ul> <li> Wiki:Color Filter Arrays</li> <li> CIC: Camera Sensors</li> </ul> <p>To capture color information, image sensors have a mosaic of tiny colored filters placed over the photosites. These filters restrict which colors (wavelengths) of light are detected by each photosite.</p> <p></p> <p>A Bayer filter pattern restricting the colors of light dectected by certain photosites. For example, the top left photosite detects only blue light, while the bottom right site detects red light. Adapted from Interiot.</p> <p>The raw image data captured by the image sensor is then converted to a full-color, 3-channel image by a demosaicing algorithm that interpolates the amount of color received at each photosite.</p>"},{"location":"imaging/digitalPhotography/#dynamic-range","title":"Dynamic Range","text":"<p> CiC - Dynamic Range</p> <p>Dynamic range (DR) is the ratio between the largest and smallest measurable values of a specific quantity, or in the case of a camera, pure white vs black.  Usually photographs don't contain just black and white. So, this measurement is more relevant to the sensitivity of the photosites in the image sensor \u2014 the total number of detectable photons vs the minimum detectable number photons (usually more than just 1 photon).</p> <p>An image sensor with a wide dynamic range is able to capture images with better contrast, especially in the darker or brighter regions. More expensive cameras typically have image sensors with a wider DR.</p> <p></p>"},{"location":"imaging/digitalPhotography/#bit-depth","title":"Bit Depth","text":"<p> CiC - Bit Depth</p> <p>Bit depth is the other side of the coin to Dynamic Range. Whereas DR is the ratio between the largest and smallest measurable value, bit depth is the number of steps that the DR is chopped up into.</p> <p>One useful analogy is that DR is the height of the staircase, while bit depth is the number of steps.</p> <p> </p>"},{"location":"imaging/digitalPhotography/#camera-lenses","title":"Camera Lenses","text":"<p> CIC - Camera Lenses</p> <p></p> <p>Cross section (cut) of SLR camera. A single camera lens typically comprises multiple lenses.</p> <p>Camera Lenses are very complex, but the critical property of a lens are its focal length and aperture.</p>"},{"location":"imaging/digitalPhotography/#focal-length","title":"Focal length","text":"<p>Focal length determines the magnification power and angle of view.</p> <ul> <li>Shorter focal lengths provide a wider angle of view, but subjects appear smaller (less magnification).</li> <li>Longer focal lengths offer a narrower field of view, and make subjects look larger (increased magnification). They also have a narrower depth of field.</li> </ul> <p></p> <p>Adpated from Elements Property</p>"},{"location":"imaging/digitalPhotography/#exposure","title":"Exposure","text":"<ul> <li>CIC: Camera Exposure</li> <li>Depth of Field</li> <li>Tones and Contrast</li> <li>EP: Exposure</li> </ul> <p>A photograph's exposure determines how light or dark an image will appear when it's been captured by your camera.</p> <p>There are 3 camera settings that determine exposure:</p> <ol> <li>Aperture</li> <li>ISO</li> <li>Shutter Speed</li> </ol> <p>Collectively, these are known as the exposure triangle.</p> <p></p> <p></p>"},{"location":"imaging/electromagneticRadiation/","title":"Electromagnetic Radiation (EMR) and Light","text":""},{"location":"imaging/electromagneticRadiation/#online-resources","title":"Online resources","text":"<p> Libretext Physics Online Textbook</p> <ul> <li>Electromagentic Waves</li> <li>Propagation of Light</li> <li>Thin Lenses</li> </ul>"},{"location":"imaging/electromagneticRadiation/#electromagnetic-radiation","title":"Electromagnetic Radiation","text":"<p>Electromagnetic Radiation (EMR)</p> <p>A type of Radiant Energy released by certain electromagnetic processes, like the sun.</p> <p>The Sun is the most familiar source of electromagnetic radiation.</p>"},{"location":"imaging/electromagneticRadiation/#wave-particle-duality","title":"Wave / Particle Duality","text":"<p>An electromagnetic wave consists of an electric field, defined as usual in terms of the force per charge on a stationary charge, and a magnetic field, defined in terms of the force per charge on a moving charge. The electromagnetic field is assumed to be a function of only the x-coordinate and time. The y-component of the electric field is then written as  \ud835\udc38\ud835\udc66(\ud835\udc65,\ud835\udc61) , the z-component of the magnetic field as  \ud835\udc35\ud835\udc67(\ud835\udc65,\ud835\udc61) , etc.</p> <p>EMR travels as a wave.</p> <p></p> <ul> <li>Two perpendicular waveforms: magnetic and electrical.</li> <li>The Frequency of the Wave is Proportional to Energy</li> </ul> <p>EMR also travels as a Particle:</p> <p>And is generally all around weird:</p>"},{"location":"imaging/electromagneticRadiation/#light","title":"Light","text":"<p>Light is a sliver of the electromagnetic Spectrum.</p> <p></p> <p>Since EMR can be described by its wave properties, and wavelength is proportional to energy, you can define a region of the spectrum by wavelength</p> <p>Light ranges from 400 nanometers to 700 nanometers in wavelength. So, the only difference between light and X-rays is the wavelength of the radiation.</p>"},{"location":"imaging/electromagneticRadiation/#the-ray-model-of-light","title":"The Ray Model of Light","text":"<p>When light interacts with an object several times larger than its wavelength (like a human eye), it travels in straight lines and acts like a ray. Its wave characteristics are not pronounced in such situations, so you can totally think of light traveling like a laser beam. There are three ways in which light can travel from a source to another location. It can come directly from the source through empty space, such as from the Sun to Earth. Or light can travel through various media, such as air and glass, to the observer. Light can also arrive after being reflected, such as by a mirror. In all of these cases, we can model the path of light as a straight line called a ray.</p> <p></p> <p>Three methods for light to travel from a source to another location. (a) Light reaches the upper atmosphere of Earth, traveling through empty space directly from the source. (b) Light can reach a person by traveling through media like air and glass. (c) Light can also reflect from an object like a mirror. In the situations shown here, light interacts with objects large enough that it travels in straight lines, like a ray.</p> <p>When light encounters and interacts with materials, it changes direction. Since light moves in a straight line, like a laser, it's path can be described by simple trigonometry (geometric optics). Two laws govern how light changes direction when it interacts with matter. These are the law of reflection, for situations in which light bounces off matter, and the law of refraction, for situations in which light passes through matter.</p>"},{"location":"imaging/electromagneticRadiation/#refraction","title":"Refraction","text":"<p>When light encounters a new medium (e.g. from air to glass), it bends. This bend is known as refraction, and its the same angle going backwards and forwards.</p> <p></p> <p>The change in direction of a light ray depends on how the index of refraction changes when it crosses from one medium to another. In the situations shown here, the index of refraction is greater in medium 2 than in medium 1. (a) A ray of light moves closer to the perpendicular when entering a medium with a higher index of refraction. (b) A ray of light moves away from the perpendicular when entering a medium with a lower index of refraction.</p> <p>Refraction depends on how fast light travels. We all know that the speed of light in a vacuum \\(c\\) is \\(3.00\u00d7108m/s\\). This is the fastest known speed in the universe. What we may not remember is that light travels slower when it passes through matter. This is because light interacts with atoms in a material. The speed of light depends strongly on the type of material, since its interaction varies with different atoms, crystal lattices, and other substructures. </p> <p>The index of refraction is a constant used to describe the speed of light in a given material. We define this index, \\(n\\), as follows:</p> \\[n=\\frac{c}{v}\\] <p>So, the index of refraction (\\(n\\)) is just  a ratio of the speed of light in a vacuum (\\(c\\)) to the speed of light in matter (\\(v\\)). The higher the index, the lower the light is traveling in the medium, and the greater the bend in the light. For example, light travels nearly half as fast in a diamond (\\(n=2\\)), which makes the light bend more and is what makes diamonds all sparkly. Zircon has an \\(n = 1.5\\), so, less bend and less sparkle. And air has an \\(n = 1.000293\\), so barely any reduction in speed and hardly any bend. But its there, if you look for it.</p> <p>The exact mathematical relationship is the law of refraction, or Snell\u2019s law, after the Dutch mathematician Willebrord Snell (1591\u20131626), who discovered it in 1621. The law of refraction is stated in equation form as</p> \\[n_1 \\, \\sin \\, \u03b8_1=n_2 \\, \\sin \\, \u03b8_2.\\] <p>Here \\(n_1\\) and \\(n_2\\)  are the indices of refraction for media 1 and 2, and  \\(\\theta_1\\)  and  \\(\\theta_2\\)  are the angles between the rays and the perpendicular in media 1 and 2. The incoming ray is called the incident ray, the outgoing ray is called the refracted ray, and the associated angles are the incident angle and the refracted angle, respectively.</p>"},{"location":"imaging/electromagneticRadiation/#lenses","title":"Lenses","text":"<p>Lenses use refraction and a spherical shape to bend light. There are lots of different lenses, but we are going to focus on thin lenses, which have a thickness that is negligible compared to the radii of curvature of the lens surfaces. So, no crystal balls or anything like that. Thin lenses can be roughly categorized into Converging and Diverging lenses:</p> <p></p> <p>Rays of light entering (a) a converging lens and (b) a diverging lens, parallel to its axis, converge at its focal point F. The distance from the center of the lens to the focal point is the lens\u2019s focal length \\(f\\). Note that the light rays are bent upon entering and exiting the lens, with the overall effect being to bend the rays toward the optical axis.</p> <p>Notice the relationship between the focal point and the lens. In a converging lens, parallel rays of light converge onto the focal length.</p>"},{"location":"imaging/electromagneticRadiation/#ray-tracing","title":"Ray Tracing","text":"<p>Ray tracing is the technique of determining (tracing) the paths taken by light rays as they pass through a lens.</p> <p></p> <p>Example Ray Tracing Diagram. Thin lenses have the same focal lengths on either side. Parallel light rays entering a converging lens from the right cross at its focal point on the left. Ray 1 (red): A ray entering a converging lens parallel to the optical axis passes through the focal point on the other side of the lens. Ray 2 (green): A ray passing through the center of a converging lens is not deviated. Ray 3 (purple): A ray that passes through the focal point exits the lens parallel to the optical axis .</p> <p>Ray Tracing can determine the location of the image based on the focal length of the lens and the position of the object in relation to the lens.</p> <p></p> <p>Ray tracing can be used to locate the image formed by a lens. Rays originating from the same point on the object are traced\u2014the three chosen rays each follow one of the rules for ray tracing, so that their paths are easy to determine. The image is located at the point where the rays cross. In this case, a real image\u2014one that can be projected on a screen\u2014is formed.</p> <p>The thin lens equation describes this relationship:</p> \\[\\frac{1}{d_o}+\\frac{1}{d_i}=\\frac{1}{f}\\] <p>where \\(d_o\\) is the distance of the object from the lens, \\(d_i\\) is the distance of the image from the lens, and \\(f\\) is the focal length of the lens. Notice that the image is inverted in relation to the optical axis.</p>"},{"location":"imaging/electromagneticRadiation/#magnification","title":"Magnification","text":"<p>Similarly, we can determine the height of the image (magnification) using ray tracing. Magnification is defined as:</p> \\[m\\equiv\\frac{h_i}{h_o} = -\\frac{d_i}{d_o}\\] <p>where \\(h_i\\) is the height of the image and \\(h_o\\) is the height of the object. The negative sign indicates that the image height is inverted in relation to the object height. </p>"},{"location":"imaging/humanVision/","title":"Human Vision","text":"<p>Vision is the special sense of sight that is based on the transduction of light stimuli received through the eyes.</p> <p> Much of the content presented here is adapted from</p> <ul> <li>Openstax Anatomy and Physiology</li> <li>Openstax Bioology 2</li> </ul>"},{"location":"imaging/humanVision/#interesting-links-and-videos","title":"Interesting Links and Videos","text":"<ul> <li> Neuroscientist Answers Illusion Questions From Twitter</li> </ul>"},{"location":"imaging/humanVision/#structure-of-the-eye","title":"Structure of the Eye","text":"<p>The eyes are located within either orbit in the skull. The bony orbits surround the eyeballs, protecting them and anchoring the soft tissues of the eye (Figure 14.13). The eyelids, with lashes at their leading edges, help to protect the eye from abrasions by blocking particles that may land on the surface of the eye. The inner surface of each lid is a thin membrane known as the palpebral conjunctiva. The conjunctiva extends over the white areas of the eye (the sclera), connecting the eyelids to the eyeball. Tears are produced by the lacrimal gland, located just inside the orbit, superior and lateral to the eyeball. Tears produced by this gland flow through the lacrimal duct to the medial corner of the eye, where the tears flow over the conjunctiva, washing away foreign particles.</p> <p></p> <p>Figure 14.13. The Eye in the Orbit. The eye is located within the orbit and surrounded by soft tissues that protect and support its function. The orbit is surrounded by cranial bones of the skull.</p> <p>The eye itself is a hollow sphere composed of three layers of tissue. The outermost layer is the fibrous tunic, which includes the white sclera and clear cornea. The sclera accounts for five sixths of the surface of the eye, most of which is not visible, though humans are unique compared with many other species in having so much of the \u201cwhite of the eye\u201d visible (Figure 14.15). The transparent cornea covers the anterior tip of the eye and allows light to enter the eye. The middle layer of the eye is the vascular tunic, which is mostly composed of the choroid, ciliary body, and iris. The choroid is a layer of highly vascularized connective tissue that provides a blood supply to the eyeball. The choroid is posterior to the ciliary body, a muscular structure that is attached to the lens by suspensory ligaments, or zonule fibers. These two structures bend the lens, allowing it to focus light on the back of the eye. Overlaying the ciliary body, and visible in the anterior eye, is the iris\u2014the colored part of the eye. The iris is a smooth muscle that opens or closes the pupil, which is the hole at the center of the eye that allows light to enter. The iris constricts the pupil in response to bright light and dilates the pupil in response to dim light. The innermost layer of the eye is the neural tunic, or retina, which contains the nervous tissue responsible for photoreception.</p> <p>The eye is also divided into two cavities: the anterior cavity and the posterior cavity. The anterior cavity is the space between the cornea and lens, including the iris and ciliary body. It is filled with a watery fluid called the aqueous humor. The posterior cavity is the space behind the lens that extends to the posterior side of the interior eyeball, where the retina is located. The posterior cavity is filled with a more viscous fluid called the vitreous humor.</p> <p></p> <p>Figure 14.15. Structure of the Eye. The sphere of the eye can be divided into anterior and posterior chambers. The wall of the eye is composed of three layers: the fibrous tunic, vascular tunic, and neural tunic. Within the neural tunic is the retina, with three layers of cells and two synaptic layers in between. The center of the retina has a small indentation known as the fovea.</p>"},{"location":"imaging/humanVision/#retina","title":"Retina","text":"<p>The retina is composed of several layers and contains specialized cells for the initial processing of visual stimuli. The photoreceptors (rods and cones) change their membrane potential when stimulated by light energy. The change in membrane potential alters the amount of neurotransmitter that the photoreceptor cells release onto bipolar cells in the outer synaptic layer. It is the bipolar cell in the retina that connects a photoreceptor to a retinal ganglion cell (RGC) in the inner synaptic layer. There, amacrine cells additionally contribute to retinal processing before an action potential is produced by the RGC. The axons of RGCs, which lie at the innermost layer of the retina, collect at the optic disc and leave the eye as the optic nerve (see Figure 14.15). Because these axons pass through the retina, there are no photoreceptors at the very back of the eye, where the optic nerve begins. This creates a \u201cblind spot\u201d in the retina, and a corresponding blind spot in our visual field.</p> <p>Note that the photoreceptors in the retina (rods and cones) are located behind the axons, RGCs, bipolar cells, and retinal blood vessels. A significant amount of light is absorbed by these structures before the light reaches the photoreceptor cells. However, at the exact center of the retina is a small area known as the fovea. At the fovea, the retina lacks the supporting cells and blood vessels, and only contains photoreceptors. Therefore, visual acuity, or the sharpness of vision, is greatest at the fovea. This is because the fovea is where the least amount of incoming light is absorbed by other retinal structures (see Figure 14.15). As one moves in either direction from this central point of the retina, visual acuity drops significantly. In addition, each photoreceptor cell of the fovea is connected to a single RGC. Therefore, this RGC does not have to integrate inputs from multiple photoreceptors, which reduces the accuracy of visual transduction. Toward the edges of the retina, several photoreceptors converge on RGCs (through the bipolar cells) up to a ratio of 50 to 1. The difference in visual acuity between the fovea and peripheral retina is easily evidenced by looking directly at a word in the middle of this paragraph. The visual stimulus in the middle of the field of view falls on the fovea and is in the sharpest focus. Without moving your eyes off that word, notice that words at the beginning or end of the paragraph are not in focus. The images in your peripheral vision are focused by the peripheral retina, and have vague, blurry edges and words that are not as clearly identified. As a result, a large part of the neural function of the eyes is concerned with moving the eyes and head so that important visual stimuli are centered on the fovea.</p> <p></p> <p>Figure 14.16. Organization of the Retina. (a) All photoreceptors have inner segments containing the nucleus and other important organelles and outer segments with membrane arrays containing the photosensitive opsin molecules. Rod outer segments are long columnar shapes with stacks of membrane-bound discs that contain the rhodopsin pigment. Cone outer segments are short, tapered shapes with folds of membrane in place of the discs in the rods. (b) Tissue of the retina shows a dense layer of nuclei of the rods and cones. LM \u00d7 800. (Micrograph provided by the Regents of University of Michigan Medical School \u00a9 2012)</p>"},{"location":"imaging/humanVision/#transduction","title":"Transduction","text":"<p>Light falling on the retina causes chemical changes to pigment molecules in the photoreceptors, ultimately leading to a change in the activity of the RGCs. Photoreceptor cells have two parts, the inner segment and the outer segment (Figure 14.16). The inner segment contains the nucleus and other common organelles of a cell, whereas the outer segment is a specialized region in which photoreception takes place. There are two types of photoreceptors\u2014rods and cones\u2014which differ in the shape of their outer segment. The rod-shaped outer segments of the rod photoreceptor contain a stack of membrane-bound discs that contain the photosensitive pigment rhodopsin. The cone-shaped outer segments of the cone photoreceptor contain their photosensitive pigments in infoldings of the cell membrane.</p> <p></p> <p>Rods and cones are photoreceptors in the retina. Rods respond in low light and can detect only shades of gray. Cones respond in intense light and are responsible for color vision. (credit: modification of work by Piotr Sliwa)</p> <p>There are three cone photopigments, called opsins, which are each sensitive to a particular wavelength of light. The wavelength of visible light determines its color. The pigments in human eyes are specialized in perceiving three different primary colors: red, green, and blue.</p> <p>At the molecular level, visual stimuli cause changes in the photopigment molecule that lead to changes in membrane potential of the photoreceptor cell. A single unit of light is called a photon, which is described in physics as a packet of energy with properties of both a particle and a wave. The energy of a photon is represented by its wavelength, with each wavelength of visible light corresponding to a particular color. Visible light is electromagnetic radiation with a wavelength between 380 and 720 nm. Wavelengths of electromagnetic radiation longer than 720 nm fall into the infrared range, whereas wavelengths shorter than 380 nm fall into the ultraviolet range. Light with a wavelength of 380 nm is blue whereas light with a wavelength of 720 nm is dark red. All other colors fall between red and blue at various points along the wavelength scale.</p> <p>Opsin pigments are actually transmembrane proteins that contain a cofactor known as retinal. Retinal is a hydrocarbon molecule related to vitamin A. When a photon hits retinal, the long hydrocarbon chain of the molecule is biochemically altered. Specifically, photons cause some of the double-bonded carbons within the chain to switch from a cis to a trans conformation. This process is called photoisomerization. Before interacting with a photon, retinal\u2019s flexible double-bonded carbons are in the cis conformation. This molecule is referred to as 11-cis-retinal. A photon interacting with the molecule causes the flexible double-bonded carbons to change to the trans- conformation, forming all-trans-retinal, which has a straight hydrocarbon chain (Figure 14.17).</p> <p>The shape change of retinal in the photoreceptors initiates visual transduction in the retina. Activation of retinal and the opsin proteins result in activation of a G protein. The G protein changes the membrane potential of the photoreceptor cell, which then releases less neurotransmitter into the outer synaptic layer of the retina. Until the retinal molecule is changed back to the 11-cis-retinal shape, the opsin cannot respond to light energy, which is called bleaching. When a large group of photopigments is bleached, the retina will send information as if opposing visual information is being perceived. After a bright flash of light, afterimages are usually seen in negative. The photoisomerization is reversed by a series of enzymatic changes so that the retinal responds to more light energy.</p> <p></p> <p>Figure 14.17. Retinal Isomers. The retinal molecule has two isomers, (a) one before a photon interacts with it and (b) one that is altered through photoisomerization.</p> <p>The opsins are sensitive to limited wavelengths of light. Rhodopsin, the photopigment in rods, is most sensitive to light at a wavelength of 498 nm. The three color opsins have peak sensitivities of 564 nm, 534 nm, and 420 nm corresponding roughly to the primary colors of red, green, and blue (Figure 14.18). The absorbance of rhodopsin in the rods is much more sensitive than in the cone opsins; specifically, rods are sensitive to vision in low light conditions, and cones are sensitive to brighter conditions. In normal sunlight, rhodopsin will be constantly bleached while the cones are active. In a darkened room, there is not enough light to activate cone opsins, and vision is entirely dependent on rods. Rods are so sensitive to light that a single photon can result in an action potential from a rod\u2019s corresponding RGC.</p>"},{"location":"imaging/humanVision/#trichromatic-color-vision","title":"Trichromatic Color Vision","text":"<p>There are three types of cones (with different photopsins), and they differ in the wavelength to which they are most responsive, as shown in Figure 14.18. Some cones are maximally responsive to short light waves of 420 nm, so they are called S cones (\u201cS\u201d for \u201cshort\u201d); others respond maximally to waves of 530 nm (M cones, for \u201cmedium\u201d); a third group responds maximally to light of longer wavelengths, at 560 nm (L, or \u201clong\u201d cones). With only one type of cone, color vision would not be possible, and a two-cone (dichromatic) system has limitations. Primates use a three-cone (trichromatic) system, resulting in full color vision.</p> <p>The color we perceive is a result of the ratio of activity of our three types of cones. The colors of the visual spectrum, running from long-wavelength light to short, are red (700 nm), orange (600 nm), yellow (565 nm), green (497 nm), blue (470 nm), indigo (450 nm), and violet (425 nm). Humans have very sensitive perception of color and can distinguish about 500 levels of brightness, 200 different hues, and 20 steps of saturation, or about 2 million distinct colors.</p> <p>Cones cannot react to low-intensity light, and rods are not used for color vision. Therefore, our low-light vision is essentially grayscale. In other words, in a dark room, everything appears as a shade of gray. If you think that you can see colors in the dark, it is most likely because your brain knows what color something is and is relying on that memory.</p> <p></p> <p>Figure 14.18. Comparison of Color Sensitivity of Photopigments. Comparing the peak sensitivity and absorbance spectra of the four photopigments suggests that they are most sensitive to particular wavelengths.</p>"},{"location":"imaging/humanVision/#colorblindness","title":"Colorblindness","text":"<p>Color blindness occurs when one or more types of cone cells either malfunction or are missing. The degree of malfunction can vary widely. If the cone is simply defective, that\u2019s known as anomaly (e.g., trichromatic anomaly), which is more common. If the cone is missing entirely, it\u2019s known as dichromacy (less common)(1).</p> <p>{ .annotate}</p> <ol> <li>Adapted from ColorBlind Smart</li> </ol> <p></p> <p>Normalized spectral sensitivity curves for the L (red), M (green), and S (blue) cones for a normal and five color vision deficiency cases (Adapted from: Shrestha, \"Simulating Colour Vision Deficiency from a Spectral Image.\" )</p> <p>In an anomalous trichromat, the sensitivity of one the cones has shifted to that of another. This occurs primarily with the red and green. For example, deuteronomy is a green cone anomaly. Because the green sensitivity now close matches the red sensitivity, these anomalous trichromat are no longer able to tell the difference between green and red colors</p> <p></p> <p>Deuteranomaly - red-green color deficiency in which the green cone sensitivity closely matches the red cone sensitivity. Adapted from ColorBlind Smart</p>"},{"location":"imaging/humanVision/#imaging-in-the-eye","title":"Imaging in the Eye","text":"<p>Adapted from Libretexts Physics III - Optics</p> <p>The eye is remarkable in how it forms images and in the richness of detail and color it can detect. However, our eyes often need some correction to reach what is called \u201cnormal\u201d vision. Actually, normal vision should be called \u201cideal\u201d vision because nearly one-half of the human population requires some sort of eyesight correction, so requiring glasses is by no means \u201cabnormal.\u201d Image formation by our eyes and common vision correction can be analyzed with the optics discussed earlier in this chapter.</p> <p>Figure 2.6.1 shows the basic anatomy of the eye. The cornea and lens form a system that, to a good approximation, acts as a single thin lens. For clear vision, a real image must be projected onto the light-sensitive retina, which lies a fixed distance from the lens. The flexible lens of the eye allows it to adjust the radius of curvature of the lens to produce an image on the retina for objects at different distances. The center of the image falls on the fovea, which has the greatest density of light receptors and the greatest acuity (sharpness) in the visual field. The variable opening (i.e., the pupil) of the eye, along with chemical adaptation, allows the eye to detect light intensities from the lowest observable to \\(10^{10}\\) times greater (without damage). This is an incredible range of detection. Processing of visual nerve impulses begins with interconnections in the retina and continues in the brain. The optic nerve conveys the signals received by the eye to the brain.</p> <p></p> <p>Figure  2.6.1. The cornea and lens of the eye act together to form a real image on the light-sensing retina, which has its densest concentration of receptors in the fovea and a blind spot over the optic nerve. The radius of curvature of the lens of an eye is adjustable to form an image on the retina for different object distances. Layers of tissues with varying indices of refraction in the lens are shown here. However, they have been omitted from other pictures for clarity.</p> <p>The indices of refraction in the eye are crucial to its ability to form images. Table  2.6.1  lists the indices of refraction relevant to the eye. The biggest change in the index of refraction, which is where the light rays are most bent, occurs at the air-cornea interface rather than at the aqueous humor-lens interface. The ray diagram in Figure  2.6.2  shows image formation by the cornea and lens of the eye. The cornea, which is itself a converging lens with a focal length of approximately 2.3 cm, provides most of the focusing power of the eye. The lens, which is a converging lens with a focal length of about 6.4 cm, provides the finer focus needed to produce a clear image on the retina. The cornea and lens can be treated as a single thin lens, even though the light rays pass through several layers of material (such as cornea, aqueous humor, several layers in the lens, and vitreous humor), changing direction at each interface. The image formed is much like the one produced by a single convex lens (i.e., a real, inverted image). Although images formed in the eye are inverted, the brain inverts them once more to make them seem upright.</p> <p>Table  2.6.1 : Refractive Indices Relevant to the Eye.</p> Material Index of Refraction Water 1.33 Air 1.0 Cornea 1.38 Aqueous humor 1.34 Lens 1.41* Vitreous humor 1.34 <p>*This is an average value. The actual index of refraction varies throughout the lens and is greatest in center of the lens.</p> <p></p> <p>Figure  2.6.2. In the human eye, an image forms on the retina. Rays from the top and bottom of the object are traced to show how a real, inverted image is produced on the retina. The distance to the object is not to scale.</p> <p>As noted, the image must fall precisely on the retina to produce clear vision\u2014that is, the image distance di must equal the lens-to-retina distance. Because the lens-to-retina distance does not change, the image distance di must be the same for objects at all distances. The ciliary muscles adjust the shape of the eye lens for focusing on nearby or far objects. By changing the shape of the eye lens, the eye changes the focal length of the lens. This mechanism of the eye is called accommodation.</p> <p>The nearest point an object can be placed so that the eye can form a clear image on the retina is called the near point of the eye. Similarly, the far point is the farthest distance at which an object is clearly visible. A person with normal vision can see objects clearly at distances ranging from 25 cm to essentially infinity. The near point increases with age, becoming several meters for some older people. In this text, we consider the near point to be 25 cm.</p>"},{"location":"imaging/humanVision/#lens-in-the-eye","title":"Lens in the Eye","text":"<p>The human eye images using an equivalent concave lens (cornea + lens)</p> <p></p> <p>Formation of a real image with a concave lens. \\(d_o\\) - distance of object from lens. \\(d_i\\) - distance of the image from the lens. \\(f\\) - focal length of the lens.</p> <p>Recall that the thin Lens equation relates the distance of the object and the image from the lens to the focal length of the lens, as follows:</p> \\[\\frac{1}{f}=\\frac{1}{d_o} + \\frac{1}{d_i}\\] <p>We can use the thin-lens equation to quantitatively examine image formation by the eye. First, we define the optical power(1) of a lens as</p> <ol> <li>Power is inverse of the focal length of a lens, with the focal length expressed in meters. The optical power P of a lens is expressed in units of diopters D;</li> </ol> \\[P = \\frac{1}{f}\\] <p>with the focal length f given in meters. The units of optical power are called diopters (D). That is, \\(1D=\\frac{1}{m}\\) (or \\(1m^{\u22121}\\)). Optometrists prescribe common eyeglasses and contact lenses in units of diopters. With this definition of optical power, we can rewrite the thin-lens equations as</p> \\[P=\\frac{1}{d_o}+\\frac{1}{d_i}\\] <p>Working with optical power is convenient because, for two or more lenses close together, the effective optical power of the lens system is approximately the sum of the optical power of the individual lenses:</p> \\[P_{total} = P_{lens1}+P_{lens2}+P_{lens3}+P_{lens*}\\] <p>Effective Focal Length of the Eye</p> <p>The cornea and eye lens have focal lengths of 2.3 and 6.4 cm, respectively. Find the net focal length and optical power of the eye.</p> <p>Strategy</p> <p>The optical powers of the closely spaced lenses add up, so \\(P_{eye}= P_{cornea}+P_{lens}\\)</p> <p>Solution</p> <p>Writing the equation for power in terms of the focal lengths gives:</p> \\[\\frac{1}{f_{eye}}=\\frac{1}{f_{cornea}}+\\frac{1}{f_{lens}}=\\frac{1}{2.3cm}+\\frac{1}{6.4cm}=0.59103\\] <p>So, the focal length of the eye (cornea and lens together) is \\(f_{eye}=1.69cm\\).</p> <p>The optical power of the eye is</p> \\[P_{eye} = \\frac{1}{f_{eye}}=\\frac{1}{0.0169m}= 59D\\] <p>For clear vision, the image distance \\(d_i\\) must equal the lens-to-retina distance. Normal vision is possible for objects at distances \\(d_o=25 cm\\) (~10 inches) to infinity. The following example shows how to calculate the image distance for an object placed at the near point of the eye.</p> <p>Example  2.6.2 : Image of an object placed at the near point</p> <p>The net focal length of a particular human eye is 1.7 cm. An object is placed at the near point of the eye. How far behind the lens is a focused image formed?</p> <p>Strategy</p> <p>The near point is 25 cm from the eye, so the object distance is \\(d_o=25 cm\\). We determine the image distance from the lens equation:</p> \\[\\frac{1}{d_i} = \\frac{1}{f} - \\frac{1}{d_o}\\] <p>Solution</p> \\[d_i = (\\frac{1}{f} - \\frac{1}{d_o})^{-1} = (\\frac{1}{1.7cm}-\\frac{1}{25cm})^{-1} =1.8 cm\\] <p>Therefore, the image is formed 1.8 cm behind the lens.</p> <p>Significance</p> <p>You can determine magnification simply based on the image and object distances from the lens, as follows:</p> \\[M = -\\frac{d_i}{d_o}\\] <p>The negative sign indicates that the image is inverted. </p> <p>So, using this magnification formula, we find that</p> \\[m=-\\frac{1.8cm}{25cm}=-0.073\\] <p>Since \\(m&lt;0\\), the image is inverted in orientation with respect to the object. From the absolute value of \\(m\\) we see that the image is much smaller than the object; in fact, it is only ~7% of the size of the object.</p>"},{"location":"imaging/humanVision/#vision-correction","title":"Vision Correction","text":"<p>The need for some type of vision correction is very common. Typical vision defects are easy to understand with geometric optics, and some are simple to correct. Figure  2.6.3  illustrates two common vision defects. Nearsightedness, or myopia, is the ability to see near objects, whereas distant objects are blurry. The eye over converges the nearly parallel rays from a distant object, and the rays cross in front of the retina. More divergent rays from a close object are converged on the retina for a clear image. The distance to the farthest object that can be seen clearly is called the far point of the eye (normally the far point is at infinity). Farsightedness, or hyperopia, is the ability to see far objects clearly, whereas near objects are blurry. A farsighted eye does not sufficiently converge the rays from a near object to make the rays meet on the retina.</p> <p></p> <p>Figure  2.6.3. (a) The nearsighted (myopic) eye converges rays from a distant object in front of the retina, so they have diverged when they strike the retina, producing a blurry image. An eye lens that is too powerful can cause nearsightedness, or the eye may be too long. (b) The farsighted (hyperopic) eye is unable to converge the rays from a close object on the retina, producing blurry near-field vision. An eye lens with insufficient optical power or an eye that is too short can cause farsightedness.</p>"},{"location":"imaging/humanVision/#nearsighted-correction","title":"Nearsighted correction","text":"<p>Since the nearsighted eye over converges light rays, the correction for nearsightedness consists of placing a diverging eyeglass lens in front of the eye, as shown in Figure  2.6.4. This reduces the optical power of an eye that is too powerful (recall that the focal length of a diverging lens is negative, so its optical power is negative). Another way to understand this correction is that a diverging lens will cause the incoming rays to diverge more to compensate for the excessive convergence caused by the lens system of the eye. The image produced by the diverging eyeglass lens serves as the (optical) object for the eye, and because the eye cannot focus on objects beyond its far point, the diverging lens must form an image of distant (physical) objects at a point that is closer than the far point.</p> <p></p> <p>Figure  2.6.4. Correction of nearsightedness requires a diverging lens that compensates for over convergence by the eye. The diverging lens produces an image closer to the eye than the physical object. This image serves as the optical object for the eye, and the nearsighted person can see it clearly because it is closer than their far point.</p>"},{"location":"imaging/humanVision/#farsighted-correction","title":"Farsighted correction","text":"<p>Correcting farsightedness consists simply of using the opposite type of lens as for nearsightedness (i.e., a converging lens), as shown in Figure  2.6.5. Such a lens will produce an image of physical objects that are closer than the near point at a distance that is between the near point and the far point, so that the person can see the image clearly. To determine the optical power needed for correction, you must therefore know the person\u2019s near point, as explained in Example  2.6.4 .</p> <p></p> <p>Figure  2.6.5. Correction of farsightedness uses a converging lens that compensates for the under convergence by the eye. The converging lens produces an image farther from the eye than the object, so that the farsighted person can see it clearly.</p>"},{"location":"imaging/medicalImagingIntro/","title":"Medical Imaging","text":"<p>In Medical imaging, we capture interior images of the human body for clinical analysis, functional interpretation, and medical intervention.</p> <p>Medical Images are often captured using modalities outside visible light. These modalities include:</p> <ul> <li>Radiography (X-ray imaging)</li> <li>Computed tomography (CT)</li> <li>Nuclear medicine (PET, SPECT)</li> <li>Magnetic resonance imaging (MRI)</li> <li>Ultrasound (US)</li> </ul>"},{"location":"matlabBasics/ArrayAssignmentOverview/","title":"Array Assignment","text":"<p>Adding basic data to variables.</p>"},{"location":"matlabBasics/ArrayAssignmentOverview/#overview","title":"Overview","text":"<p>In this module, we cover the basics of assigning fundamental data types to variables.</p>"},{"location":"matlabBasics/ArrayAssignmentOverview/#special-characters-used","title":"Special Characters Used","text":"<ul> <li><code>=</code> - Equal Sign. A.k.a, the Assignment operator. Used to assign data to a variable.</li> <li><code>[ ]</code> - Square Brackets. Used to concatenate (or group) numbers or logical values into one variable</li> <li><code>' '</code> - Single Quotes. Used to indicate Characters or concatenate multiple characters together.</li> </ul>"},{"location":"matlabBasics/ArrayAssignmentOverview/#functions-discussed-in-this-module","title":"Functions discussed in this Module","text":"<ul> <li>size</li> <li>ismatrix</li> <li>namelengthmax</li> <li>exist</li> </ul>"},{"location":"matlabBasics/ArrayAssignmentOverview/#basic-data-types","title":"Basic Data types","text":"<p>Remember, for our intents and purposes, there are only three types of data:</p> <ul> <li>Numbers</li> <li>Characters</li> <li>Booleans</li> </ul> <p>To indicate what data you want, you use the following syntax:</p> <ul> <li>For Numbers, you simply enter a number, like <code>12</code></li> <li>For Characters, you surround the characters that you want with single-quotes, like <code>'a'</code></li> <li>For Booleans, you use the function <code>true</code> or <code>false</code></li> </ul>"},{"location":"matlabBasics/ArrayAssignmentOverview/#assigning-data-to-matlab","title":"Assigning Data to MATLAB","text":"<p>The easiest way to assign data to a variable in MATLAB is to simply type the data you want in the command window.</p> <p>Type 100 in the command window and hit return, as follows:</p> <pre><code>100\n</code></pre> <p>When you do this, you get the following result:</p> result<pre><code>ans =\n\n   100\n</code></pre> <p>Notice what MATLAB did here. Since you just entered some data, MATLAB created a variable, <code>ans</code> and assigned the data to that variable. Inspect the workspace. There is now a row that contains information on the variable <code>ans</code></p> <p></p> <p>Notice that the class of the variable is listed as double, which is the default numeric class. We'll get into why \"double\" in a later module, but, just so you know, there are like ten different numeric classes. Don't worry, it will make sense later. </p> <p>Great, easy enough, but what happens when we enter a new piece of data? Type the character array <code>'a'</code> in the command window and hit return. Remember to use the single quotes to indicate that you want a character array.</p> <pre><code>'a'\n</code></pre> <p>result<pre><code>ans =\n\n    'a'\n</code></pre> Now we have the value 'a' assigned to <code>ans</code>. We didn't get a new variable, we just overwrote the previous contents of <code>ans</code>. If you review the Workspace, you will see that the <code>100</code> is nowhere to be found.</p> <p></p>"},{"location":"matlabBasics/ArrayAssignmentOverview/#assigning-data-to-variables","title":"Assigning Data to Variables","text":"<p>To do anything serious in  MATLAB, you are going to need more than one variable. Luckily, MATLAB provides the ability for you to name your own variables.</p> <p>To do so, you use the following syntax</p> <p><code>name_of_variable = value_of_variable</code></p> <p>Assignment Conventions: - the variable receiving the data is always on the left side of the equal sign. - The data to be assigned is always on the right side of the equation. - If the variable doesn't exist,  MATLAB creates one (of the appropriate class)</p> <p>Type the following in the Command Window:</p> <pre><code>a = 1\nb = 'a'\nc = true\n</code></pre> <p>\u2026These three lines of code create the three different variables with three different data types. Notice that the character array is colored pink.</p> <p>Review the properties of these variables in the workspace:</p> <p>Review the Workspace</p> <p></p> <ul> <li>Each variable is listed in a different row.</li> <li>Each row shows the name of the variable and its contents and gives you some information about the variable, such as the array size and class (data type).</li> <li>There are different yellow icons for the different variable classes.</li> <li>The variable classes are listed as \"double\", \"char\", and \"logical\".</li> <li>The variable sizes are all listed as <code>1x1</code>. This means that each variable has only one element of data.</li> </ul>"},{"location":"matlabBasics/ArrayAssignmentOverview/#concatenation","title":"Concatenation","text":"<p>Concatenation means to package multiple elements into one variable. Often, we want to add more than one value to a variable, packaged in separate elements. To concatenate numbers or logical values, we use the special character Square Brackets (<code>[ ]</code>), as follows:</p> <p>Example: Concatenating Numbers or Logicals</p> <pre><code>d = [1 2] % concatenate numbers\ne = [true false true] % concatenate logicals\n</code></pre> result<pre><code>d =\n\n    1     2\n\n\ne =\n\n1\u00d73 logical array\n\n1   0   1\n</code></pre> <p>Here, the variable <code>d</code> has two elements with the values 1 and 2, while the variable <code>e</code> has three elements with the logical values 1, 0, and 1.</p> <p>To concatenate characters, we use the single quotes, as follows</p> <p>Example: Concatenating Characters with Single Quotes</p> <pre><code>f = 'zx' % concatenating two characters\ng = '$?_%' % concatenating four characters\n</code></pre> <p><pre><code>f =\n\n'zx'\n\ng =\n\n    '$?_%'\n</code></pre> Here, the variable <code>f</code> has two elements with the values <code>z</code> and <code>x</code>, while the variable <code>g</code> has four elements with the values <code>$</code>,<code>?</code>, <code>_</code>, and <code>%</code></p>"},{"location":"matlabBasics/ArrayAssignmentOverview/#challenge-concatenation","title":"Challenge: Concatenation","text":"QuestionAnswer <p>Concatenate the values <code>11</code>,<code>12</code>,and <code>15</code> and assign to the variable <code>d2</code></p> <pre><code>d2 = [11 12 15]\n</code></pre> <pre><code>d2 =\n\n11    12    13\n</code></pre>"},{"location":"matlabBasics/ArrayAssignmentOverview/#copying-data","title":"Copying data","text":"<p>You can copy the value from one variable to another by using the following convention:</p> <pre><code>new_variable = old_variable\n</code></pre> <p>Notice that we have two different variable names on either side of the assignment operator (<code>=</code>). The variable name to the left of the <code>equal sign</code> receives the data that is extracted from the variable name on the right side of the <code>equal sign</code>. Data always moves from right to left. </p> <p>Example: Copying Data from a variable</p> <p>Type the following in the command window:</p> <pre><code>h = g\n</code></pre> result<pre><code>h =\n\n     '$?_%'\n</code></pre> <p>The variable <code>h</code> is created and receives the data extracted from the  variable <code>g</code> (which was created in the previous example).</p>"},{"location":"matlabBasics/ArrayAssignmentOverview/#recursive-assignment","title":"Recursive Assignment","text":"<p>Sometimes we want to add new elements to a variable that already exists. To do this, we use Recursive assignment, which simply means that we include the same variable name on both sides of the assignment operator.</p> <p>Tip</p> <p>Remember the convention: Data is always extracted from the variable name to the right of the <code>equal sign</code> and added to the variable name that is to the left of the <code>equal sign</code>.</p> <p>For example, the variable <code>h</code> currently contains the following characters: <code>$?_%</code> \u2014 a well known expletive in the comic book world. But, we forgot to include the most important part: the exclamation point at the end. No worries, we can add a character to <code>h</code> as follows:</p> Add exclamation point to end<pre><code>h = [h '!'] % h on both sides of assignment operator\n</code></pre> <p>Notice  we include the variable name <code>h</code> on the right side of the equal sign. With the square brackets, we indicate to concatenate the contents of <code>h</code> with the character <code>!</code>. And we get\u2026</p> result<pre><code>h =\n\n    '$?_%!'\n</code></pre> <p>\u2026the full expletive. The <code>!</code> character was added after data extracted from <code>h</code> and then all of the data was added back to <code>h</code>. Now, <code>h</code> has five elements, with <code>!</code> as the final element.</p> <p>If we want to expand on our expletive by adding a character to the first position of <code>h</code>, we would use the following syntax:</p> <pre><code>h = ['@' h] \n</code></pre> <pre><code>h =\n\n    '@$?_%!'\n</code></pre> <p>\u2026Here, the <code>@</code> character is added before all of the data extracted from <code>h</code>. Now <code>h</code> is a 1x6 character array and you can really let them have it.</p>"},{"location":"matlabBasics/ArrayAssignmentOverview/#challenge-copying-and-recursive-assignment","title":"Challenge: Copying and Recursive assignment","text":"QuestionAnswer <p>Show the syntax to:</p> <ol> <li>Copy the contents of <code>h</code> to <code>h2</code></li> <li>Use recursive assignment to add the characters <code>a</code> and <code>z</code> to first and last element of <code>h2</code></li> </ol> <pre><code>h2 = h\nh2 = ['a' h2 'z']\n</code></pre> result<pre><code>h2 =\n\n'a@$?_%!z'\n</code></pre>"},{"location":"matlabBasics/ArrayAssignmentOverview/#determining-the-number-of-elements-in-a-variable","title":"Determining the number of elements in a variable","text":"<p>So, how do we keep track of the size of our variables. One way is to check the workspace (or use the function <code>whos</code>):</p> whos<pre><code>  Name      Size            Bytes  Class      Attributes\n\n  a         1x1                 8  double               \n  b         1x1                 2  char                 \n  c         1x1                 1  logical              \n  d         1x2                16  double               \n  e         1x3                 3  logical              \n  f         1x2                 4  char                 \n  g         1x4                 8  char                 \n  h         1x6                12  char      \n</code></pre> <p>As you can see, we generated a lot of data in a very little amount of time. The column \"Size\" indicates the dimensions of each variable.</p> Why are the variables with just one element, like <code>a</code>,<code>b</code>, and <code>c</code>, listed as having a size <code>1x1</code>? Why not list the size as <code>1</code>? <p>Remember, all MATLAB numeric variables are matrices by default. While vectors and matrices technically have different definitions, MATLAB treats them all as if they are matrices. Importantly, MATLAB cannot differentiate between a vector (1 row or 1 column) and a matrix (at least one row and one column). You need to use a function, like [size][mlb-ref-size], to differentiate the two.</p> <p>Function: size</p> <p>The function size returns the array dimension size of a variable (so you can get the values programmatically instead of having to refer to the workspace)</p> <pre><code>size(b)\n</code></pre> result<pre><code>ans =\n        1     1\n</code></pre> <p>This result indicates that <code>b</code> is a matrix with the dimensions of 1 row and 1 column. Notice that the output is assigned to the variable ans.</p> <p>The function ismatrix reports whether a variable is a 2D matrix. A variable with more than 2 dimensions returns a zero. This will be important when we deal with image stacks and RGB images that have three or more dimensions.</p>"},{"location":"matlabBasics/ArrayAssignmentOverview/#challenge-size","title":"Challenge: Size","text":"QuestionAnswer <p>What will the following syntax return?</p> <pre><code>size(g)\n</code></pre> <p>hint, review the <code>whos</code> output</p> <p>result<pre><code>ans =\n\n    1     4\n</code></pre> \u2026One row, Four columns</p>"},{"location":"matlabBasics/ArrayAssignmentOverview/#variable-names-rules","title":"Variable Names Rules","text":""},{"location":"matlabBasics/ArrayAssignmentOverview/#capitalization-matters","title":"Capitalization matters","text":"<p>MATLAB is case-sensitive, which means a capital letter creates a different variable name than a lowercase letter. Consider the following:</p> <p>Example: Assigning A and a</p> <pre><code>A = 5\na = 10\n</code></pre> <p>\u2026In this syntax, the equal sign <code>=</code>  means 'assign', as in 'assign the value 10 to the variable a.'</p> <p>Notice that the workspace has been populated with two new variables, <code>A</code> and <code>a</code>. This is because MATLAB is case-sensitive and those two letters are treated as completely different names.</p> <p>Here, I use the function <code>whos</code> to display the contents of the workspace in text form:</p> whos<pre><code>  Name      Size            Bytes  Class     Attributes\n\n  A         1x1                 8  double              \n  a         1x1                 8  double              \n</code></pre>"},{"location":"matlabBasics/ArrayAssignmentOverview/#valid-array-names","title":"Valid Array Names","text":"<p>You can't just willy-nilly name your variable whatever you want. MATLAB has rules that you must follow.</p> <p>Valid MATLAB variable names must start with a letter, followed by letters, digits, or underscores. They can have NO SPACES or weird characters like exclamation or hashtag. Also, MATLAB is case-sensitive; recall that <code>A</code> and <code>a</code> were treated as different variable names.</p>"},{"location":"matlabBasics/ArrayAssignmentOverview/#using-complex-variable-names","title":"Using Complex Variable Names","text":"<p>Let's create a new, more complex name for a variable. Type the following in the command window:</p> <pre><code>monkey_brains_2 = 45\n</code></pre> result<pre><code>monkey_brains_2 =\n\n    45\n</code></pre> <p>In the workspace, there is now a variable called <code>monkey_brains_2</code> with an assigned value of <code>45</code>. By using a combination of letters, numbers, and underscores, it is fairly easy to come up with a diverse range of variable names.</p> How long can your variable name be? <p>The function namelengthmax returns the maximum length a variable name can be:</p> <pre><code>namelengthmax\n</code></pre> <p>result<pre><code>ans = \n    63\n</code></pre> The result 63 indicates the longest number of characters that your variable name can have\u2014not that you will ever want a variable name that long, but it's possible. This value varies depending on the operating system.</p>"},{"location":"matlabBasics/ArrayAssignmentOverview/#avoiding-naming-conflicts","title":"Avoiding Naming Conflicts","text":"<p>When coming up with variable names, you should try to avoid names that are already reserved by MATLAB.</p> <p>Function: exist </p> <p>The MATLAB function exist tells you if a variable name is already being used. The basic syntax is to type <code>exist</code> followed by a space and then the name in which you are interested in testing</p> <pre><code>exist function % is the word function already being used?\n</code></pre> <p>result<pre><code>ans =\n 5\n</code></pre> Any result greater than zero means that the name is reserved. So, a result of 5 here means that the word <code>function</code> is a reserved name used by MATLAB. In contrast, when you type:</p> <pre><code>exist monkey_brains_4\n</code></pre> <p>result<pre><code>ans = \n0\n</code></pre> The output from <code>exist</code> here is 0 (or false) means that the name <code>monkey_brains_4</code> is not currently being used by MATLAB and is free for the taking.</p>"},{"location":"matlabBasics/ArrayAssignmentOverview/#challenge-function-exist","title":"Challenge: Function exist","text":"QuestionAnswer <p>What will be the result if you type <code>exist monkey_brain_2</code> in the command window?</p> <pre><code>exist monkey_brain_2\n</code></pre> result<pre><code>ans = \n\n    1\n</code></pre> <p>The result <code>1</code> indicates that the variable 'monkey_brain_2' already exists (we created it in a previous step).</p>"},{"location":"matlabBasics/BinaryNumbers/","title":"Binary Numbers and Computer Memory","text":"<p>a world of ones and zeros</p>"},{"location":"matlabBasics/BinaryNumbers/#overview","title":"Overview","text":"<p>We've learned that variables have different classes. And that you need different syntaxes to create different classes. This seems unreasonably complicated. You are using a computer after all. Why can't the computer figure out whether you want to enter the number <code>1</code> or the character <code>'1'</code>? Well, to understand the reason behind the madness, it is useful to peer under the hood and learn how computers store information using just ones and zeros.</p> <p></p> <p>So, in this module, we will learn how variables are stored in Computer Memory, what binary numbers are, and what does this all have to do with data types.</p>"},{"location":"matlabBasics/BinaryNumbers/#after-this-module-you-should-be-able-to","title":"After this module, you should be able to","text":"<ul> <li> <p>Count in binary and how to convert binary numbers to decimal (and vice versa)</p> </li> <li> <p>Describe how computers store information (hint: it's in binary)</p> </li> <li> <p>Discuss the advantages and disadvantages of using these following MATLAB numeric classes: double, single, uint8, uint16.</p> </li> <li> <p>Define the term integer saturation and explain why care must be taken when performing integer math</p> </li> <li> <p>Define ASCII code</p> </li> <li> <p>Explain the concept of typecasting and be able to typecast from one variable class to another</p> </li> </ul>"},{"location":"matlabBasics/BinaryNumbers/#you-should-probably-know-these-matlab-functions","title":"You should probably know these MATLAB Functions","text":"<ul> <li> <p>dec2bin - Convert decimal to binary number in character array</p> </li> <li> <p>bin2dec - Convert binary number to decimal number</p> </li> <li> <p>double - convert to double precision</p> </li> <li> <p>single - convert to single precision</p> </li> <li> <p>uint8 - convert the array into unsigned 8-bit (1-byte) integers</p> </li> <li> <p>uint16 -  convert the array into unsigned 16-bit (2-byte) integers</p> </li> <li> <p>logical - convert the array to a logical class</p> </li> <li> <p>char - convert the array to a character class</p> </li> <li> <p>num2str - Convert numeric arrays to character arrays</p> </li> </ul>"},{"location":"matlabBasics/BinaryNumbers/#and-these-terms","title":"And these terms","text":"<ul> <li>base 10 numeral system - aka decimal</li> <li>base 2 numeral system - aka binary</li> <li>bit - an elemental unit of information in computing</li> <li>byte - 8 bits. The smallest addressable memory element in most computers.</li> <li>ASCII - a character encoding standard</li> <li>Variable Class - a class  identifies the properties of the variable such as the number of bytes required to store that variable and the possible range of values.</li> <li>Dynamic Range - the ratio between the largest and smallest values possible</li> <li>Bit depth - the number of bits reserved for each element of a variable</li> <li>Type casting - the process of converting the contents of a variable from one class to another class</li> <li>Dynamic Range</li> </ul>"},{"location":"matlabBasics/BinaryNumbers/#binary-numbers","title":"Binary Numbers","text":"<p>In the beginning, there was darkness. Then there was light. This can be described as a change in a binary state: First no light. Then Light. First off, then on.</p> <p>Binary numbers describe such changes in binary state using just two values: all or nothing. Or, more simply, one or zero. This is known as the base-2 numeral system. In base-2, numeric values are represented using 2 different symbols (typically 0 and 1). By comparison, in a base-10 system\u2014the one we all learned in kindergarten\u2014there are 10 symbols (that we call digits): 0, 1, 2,...9.</p> <p>In a binary system (like a computer), you use only two digits, 0 and 1, to represent all numeric values (and, by extension, letters, words and all other information). For example, <code>01101001</code> is binary for the numeric value of 105.</p> <p>Binary numbers are often clustered in groups of 8 digits (see next section). From right to left, each position in this cluster has an equivalent bit-number, starting from 0, that indicates increasing powers of 2:</p> <p></p> <p>The bit on the farthest right corresponds to \\(2^0\\), while the bit on the farthest left (in this example) corresponds to \\(2^7\\). To create any numeric value, you need to create an equation that contains these powers of 2. Consider the following:</p> <pre><code>3 = 2 + 1\n3 = 2^1 +  2^0\n</code></pre> <p>In this equation we have a <code>2</code> to the power of <code>1</code> and a <code>2</code> to the power of <code>0</code>, which correspond to the first two bit positions. In binary, this would be written as <code>11</code>. Although, often binary is written in chunks of eight digits, so:  <code>0000 0011</code>.</p> <p>The following table shows the binary representation of a series of decimal numbers, in 8-digit chunks:</p> <p></p>"},{"location":"matlabBasics/BinaryNumbers/#challenge-0","title":"Challenge 0","text":"Write the power of 2 equation for the numeric value 4 and display the value <code>4</code> in binary. <p>Power of 2 Equation</p> <pre><code>4 = 2^2 + 0 + 0 \n</code></pre> <p>Display 4 in binary</p> <p>`0000 0100'</p> <p>\u2026binary is often prefaced with zeros </p> What does the MATLAB function dec2bin do? QuestionAnswer <p>Try the following function call:</p> <pre><code>dec2bin(4,8)\n\nans =\n    '00000100'\n</code></pre> <ul> <li>what is returned?</li> <li>what is the first input?</li> <li>what is the second input?</li> </ul> <ul> <li>what is returned? <code>The value 4 in binary</code></li> <li>what is the first input? <code>The decimal to convert</code></li> <li>what is the second input? <code>numbers of bits (8) to return</code></li> </ul>"},{"location":"matlabBasics/BinaryNumbers/#computer-memory","title":"Computer Memory","text":"<p>Most computer memory, at their core, store their information as a state of energy: either on or off. So, for all intents and purposes, ALL information in a computer is stored as a sequence of ones and zeros, or binary.</p> <p></p> <ul> <li> <p>A bit is an elemental unit of information in computing (typically treated as a 1/0 or true/false). It is a single 0 or 1 that can represent basic information such as on/off, plus/minus, or as component in the base-2 numeral system.</p> </li> <li> <p>A byte contains 8 bits and is the smallest addressable memory element in most computers. This means that a computer cannot store anything smaller than a byte (even if all you need to store is just 1 bit of information).</p> </li> </ul> <p>This is the reason why you will often see binary numbers preceded by a series of zeros. For example, when indicating the value one in a byte, you precede the one with 7 zeros as such:</p> <p><code>0000 0001</code></p> <p>It takes one byte of computer memory just to save the number one.</p>"},{"location":"matlabBasics/BinaryNumbers/#bit-depth","title":"Bit Depth","text":"<p>One byte is the smallest addressable memory element, but you can allocate more than one byte to a memory element.</p> <p>Bit depth is a term to indicate how many bits of memory are allocated to a memory element. For example:</p> <ul> <li> <p>8-bit:  contains 1 byte per element</p> </li> <li> <p>16-bit: contains 2 bytes per element</p> </li> </ul> <p>Confusingly, some acquisition devices, such as some cameras on microscopes, can acquire information that is not easily divisible into bytes. For example, there are cameras that acquire 12-bit images. In this case, those images are stored in computer memory as 16-bit, even though there are only 12-bits of information.</p> <p>As we will see later in the course, this disconnect between the way the memory is acquired and the way the memory is stored can cause display issues, which are easily corrected if you understand bit depth.</p>"},{"location":"matlabBasics/BinaryNumbers/#variable-class-and-memory","title":"Variable Class and Memory","text":"<p>As we have previously discussed, variables represent storage locations in the computer's memory. When dealing with very large numbers or very large arrays, it is critical to understand how MATLAB allocates memory when assigning values to a variable.</p>"},{"location":"matlabBasics/BinaryNumbers/#numeric-class","title":"Numeric Class","text":"<p>Numeric class variables store numbers. There are many different numeric classes which can be broadly broken down into floating vs integer classes. Floating classes can have significant digits (i.e. numbers after the decimal point), whereas the integer classes solely handle whole numbers.</p> <p>MATLAB Numeric Classes include signed and unsigned integers, and single- and double precision floating-point numbers. Each class has a different consequence on memory. You can find a list of the  numeric types available in MATLAB here. We will focus on a subset of these classes, including the following:</p> <ul> <li>Floating Classes</li> <li>single</li> <li>double</li> <li>Integer Classes</li> <li>uint8</li> <li>uint16</li> </ul>"},{"location":"matlabBasics/BinaryNumbers/#double-precision","title":"Double Precision","text":"<p>The default MATLAB numeric class is double. Double-precision variables, use 64 bits (8 bytes) of memory per element in an array. Due to this amount of memory allocation, they can accurately represent very large numbers. This is also known as having a very large dynamic range, or a large ratio between the largest and smallest values possible.</p> <p>The following is an illustration of how a double precision number is stored in memory:</p> <p></p> <p>As you can see, there are 64 different positions. In each position, you can store a 1 or a zero. The first position is the sign position. The rest of the positions handle storing the value of the number.</p> <p>Double variables can represent numerical values with approximately 15-17 significant decimal digits. However, due to the amount of memory allocated per element in an array, double-precision variables  can consume a lot of more memory.</p> <p>In MATLAB, you can see how much memory a double precision variable consumes with the following examples:</p> <pre><code>a = 1\nb = 1e24\nc = 1:10\n</code></pre> <p></p> <p>Notice that the variables <code>a</code> and <code>b</code>, which respectively have the values of one and one septillion, use only 8 bytes of memory, while the variable <code>c</code>, which is an array of 10 numbers, takes 80 bytes to store in memory.</p>"},{"location":"matlabBasics/BinaryNumbers/#single-precision","title":"Single Precision","text":"<p>The single data type requires 32 bits per element to store in memory \u2014 half as much as a double \u2014 and is ideal for storing and processing real number values when you don\u2019t require the same level of accuracy as that provided by double precision.</p> <p>The default numeric class for MATLAB is double. To convert from the double class to another class you must use a type-casting function, such as <code>single</code>.</p> <p>For example:</p> Typecast to Single<pre><code>var_single = single(c)\n</code></pre> <p>result<pre><code>var_single =\n\n  1\u00d710 single row vector\n\n     1     2     3     4     5     6     7     8     9    10\n</code></pre> The variable <code>var_single</code> contains the output from the conversion of the variable <code>c</code> into a single class.</p> variable class<pre><code>whos('var_single')\n  Name          Size      Bytes  Class     Attributes\n  var_single    1x10        40  single     \n</code></pre> <p>Note that <code>var_single</code> requires only half of the Bytes (40) that <code>c</code> requires, even though it contains the exact same values (<code>1:10</code>). (1)</p> <ol> <li>The  function whos displays the properties of the inputted variable name (similar to the workspace)</li> </ol>"},{"location":"matlabBasics/BinaryNumbers/#integers","title":"Integers","text":"<p>Integer Class. Integer class variables can store only whole numbers in each element. Integer classes typically require far less memory per element than floating class. However, they can only handle a small range of values, such as 0-255.</p> <p>Digital Images are often stored in an unsigned integer class. The most common ones that we will be using for digital images are uint8 and uint16.</p> <p></p> <p>There are other integer classes (int8, int16){target=\"_blank\"}, which are signed (i.e. can have negative values), but we will not use these classes in this tutorial.</p>"},{"location":"matlabBasics/BinaryNumbers/#memory-considerations","title":"Memory Considerations","text":"<p>The main reason to use an integer class is to save memory.</p> <p>For example, let's convert <code>c</code> into an unsigned 8-bit integer:</p> Typecast to unsigned 8-bit<pre><code>var8 = uint8(c)\n</code></pre> <p><code>var8</code> is now an integer class</p> result<pre><code>var8 =\n\n   1\u00d710 uint8 row vector\n\n    1    2    3    4    5    6    7    8    9   10\n</code></pre> whos output<pre><code>whos('var8')\n\n  Name      Size            Bytes  Class    Attributes\n  var8         1x10               10  uint8              \n</code></pre> <p>Compared to the  double <code>c</code>, or the  single <code>var_single</code>, the  uint8 <code>var8</code> requires only 10 bytes of memory. This is because uint8 arrays require only 1 byte of memory per element.</p>"},{"location":"matlabBasics/BinaryNumbers/#integer-saturation","title":"Integer Saturation","text":"<p>Integers have much lower possible maximum values than their floating-point counterparts (lower dynamic ranges). Watch what happens when you type cast a very large number (<code>1e24</code>) to an 8-bit unsigned integer:</p> Typecase to integer<pre><code>f = uint8(1e24)\n</code></pre> Variable saturated to 255<pre><code>f =\n\n  255\n</code></pre> whos output<pre><code>whos('f')\n\n  Name      Size            Bytes  Class    Attributes\n  f         1x1                 1  uint8    \n</code></pre> <p>Notice that when I converted 1 septillion to an 8-bit unsigned integer, the value was clipped to <code>255</code> and the variable (<code>f</code>) was allocated 1 byte of memory.</p> <p>Remember, for an 8-bit unsigned integer, the maximum value you can have is <code>255</code>. In computer memory, an 8-bit integer has only 8 positions to store each bit. So, in binary, <code>255</code> would be represented as follows:</p> <pre><code>1111 1111\n</code></pre>"},{"location":"matlabBasics/BinaryNumbers/#challenge-1","title":"Challenge 1","text":"How much memory is allocated for a 16-bit unsigned number? <p>2 bytes (16 bits)</p>"},{"location":"matlabBasics/BinaryNumbers/#math-with-integer-classes","title":"Math With Integer Classes","text":"<p>Although useful for conserving memory, care must be taken when performing math with integer classes.</p> <p>For example, consider the following:</p> <pre><code>a = uint8([2 4 16 32 64 128 255])\nb = a + 10\n</code></pre> <pre><code>b =\n\n   12   14   26   42   74  138  255\n</code></pre> <p>Notice that every value, except for <code>255</code>, increases by 10. This is called integer saturation or 'clamping' the value to the class maximum (<code>255</code>).</p> <p>For a more detail discussion of Integer and Single-Precision Math, please refer to this article.</p>"},{"location":"matlabBasics/BinaryNumbers/#challenge-2","title":"Challenge 2","text":"What do you think will happen if you add a 200 more to <code>b</code>? i.e <code>b</code> + 200? <p>The last three elements will be saturated (clamped to 255)</p> <pre><code>b = b+200\n\nb =\n\n  222  224  236  252  255  255  255\n</code></pre> What do you think will happen if you subtract <code>10</code> from <code>a</code>? i.e. <code>a-10</code>? <p>The first two elements of the array will be clamped to the class minimum (0)</p> <pre><code>a = a-10\n\na =\n\n    0    0    6   22   54  118  245\n</code></pre>"},{"location":"matlabBasics/BinaryNumbers/#character-class","title":"Character Class","text":"<p>The character class handles characters (letters, numbers, spaces, etc.). So, how are characters stored in computer memory using binary?</p> <p>The answer is ASCII. ASCII stands for the \"American Standard Code for Information Interchange\". That's right. America. ASCII is a \"character encoding scheme\" (basically a look-up table) where each character of text has a numeric equivalent. So, any text that you see on a computer screen (or on your phone) has a numeric equivalent, even the commas, periods and emojis. And even the characters for numeric digits, like <code>'1'</code>.</p> <p>For example, the character <code>'1'</code> is stored in memory as follows:</p> <p></p> <p>What about the character array <code>'hello'</code>?</p> <pre><code>ch = 'hello'\n</code></pre> <p>Same deal, but as a vector:</p> <p></p> <p>In each case, it is the numeric ASCII code that is stored in memory, instead of the actual character.</p>"},{"location":"matlabBasics/BinaryNumbers/#type-casting-character-class","title":"Type casting - character class","text":"<p>This encoding scheme for character arrays can have important implications. Consider the following:</p> <pre><code>  n = '1'\n  m = n+1\n</code></pre> result<pre><code>m =\n\n    50\n</code></pre> <p>So, <code>'1' + 1 = 50</code> ???</p> <p>What's going on here?</p> <p>To understand this result, simply review the ASCII code. Remember, the character <code>'1'</code> is actually stored in memory as the numeric value of <code>49</code>. When you use the syntax to perform a mathematical operation on a character array, MATLAB automatically type casts the character array, so that it can do the math, as follows:</p> <pre><code>49+1 = 50\n</code></pre> <p>Similarly, if you add <code>2</code> to the variable <code>ch</code> (which contains the character array <code>'hello'</code>), then you get the following result <pre><code>ch + 2\nans =\n\n   106   103   110   110   113\n</code></pre></p> <p>MATLAB type casts the entire character array to its ASCII numeric equivalent (see above) and then adds <code>2</code>.</p> <p>Even adding two characters returns a similar result:</p> <pre><code>'A' + 'B'\n</code></pre> result<pre><code>ans =\n\n   131\n</code></pre> Can you guess the ASCII codes for <code>'A'</code> and <code>'B'</code> from this result? <p>Well, if you divide 131 by 2 you get 65.5. Considering that ASCII codes are whole numbers, and 'A' and 'B' have sequential ASCII codes, then it follows that <code>'A'</code> must be 65 and <code>'B'</code> 66.</p>"},{"location":"matlabBasics/BinaryNumbers/#getting-the-ascii-code-of-a-character","title":"Getting the ASCII code of a character","text":"<p>If we want the ASCII, we can simply type cast characters to their numeric ASCII equivalents by using one of the numeric type class functions (i.e double, single, uint8, etc.).</p> <p>For example, the function <code>uint16</code> will return the ASCII code equivalent for any character in a character array:</p> <pre><code>uint16('aw hell no')\n\nans =\n\n  1\u00d710 uint16 row vector\n\n    97   119    32   104   101   108   108    32   110   111\n</code></pre> <p>The result is a series of numbers that indicate the ASCII numeric code for each letter of the alphabet.</p>"},{"location":"matlabBasics/BinaryNumbers/#challenge-3","title":"Challenge 3","text":"Can you spot the ASCII code for <code>'space'</code> in the vector above? <p>Count over by letters: The third and eighth letters are spaces (ASCII code <code>32</code>).</p> Why is uint16 the best choice for type casting character arrays (and not, say, uint8)? <p>ASCII characters only require one byte (uint8), but MATLAB uses uint16 for character arrays to support Unicode/UTF-16 encoding, which allows for a much larger set of characters beyond standard ASCII.</p> <p>You can also type cast an integer array into a character array using the function char</p> <pre><code>&gt;&gt; char([111    104     32    121    101     97    104])\n\nans =\n\n    'oh yeah'\n</code></pre>"},{"location":"matlabBasics/BinaryNumbers/#getting-a-character-from-an-ascii-code","title":"Getting a character from an ASCII code","text":"<p>If you want the character equivalent of a given ASCII code, simply typecast an integer to a character class using the <code>**char**</code> function.</p> Typecast Number to character<pre><code>char(64)\n</code></pre> result<pre><code>ans =\n\n@\n</code></pre> <p>Similarly, an array of numbers...</p> Typecast a series of numbers to characters<pre><code>char(1:50)\n\nans =\n\n    '\u0001\u0004\u0005\u0006   \n     \u000b\f\n     \u000e\u000f\u0010\u0011\u0012\u0013\u0014\u0015\u0016\u0017\u0018\u0019\u001a\u001b\u001c\u001d\u001e\u001f !\"#$%&amp;'()*+,-./012'\n</code></pre> <p>\u2026returns a string of characters. By the way, that large space before the exclamation point is not empty. These are the non-printing characters such as Line return or Escape that do not show up in screen displays.</p>"},{"location":"matlabBasics/BinaryNumbers/#upper-case-vs-lower-case","title":"Upper Case vs Lower Case","text":"<p>As you may have guessed, there are different ASCII codes for lower-case letters vs upper case letters. This is the reason why some file systems like UNIX (or MATLAB variable names) are case-sensitive.</p> <p>Let's use the function upper to convert b to all caps and then typecast the variables into the integer class uint16.</p> Create variables<pre><code>b = 'a':'f' % assign b lower case letters\nc = upper(b) % convert to upper case\n</code></pre> result<pre><code>b =\n    'abcdef'\n\nc =\n\n    'ABCDEF'\n</code></pre> <p>\u2026Here we create two character arrays containing the letters <code>'a'</code> through <code>'f'</code> and <code>'A'</code> through <code>'F'</code>.</p> <p>If we typecast the variables <code>b</code> and <code>c</code> to an integer class:</p> Type cast character arrays to integer class<pre><code>uint16(b)\nuint16(c)\n</code></pre> <p>\u2026We get the following differing values:</p> result<pre><code>ans =\n\n  1\u00d76 uint16 row vector\n\n    97    98    99   100   101   102 % b ASCII values\n\n\nans =\n\n  1\u00d76 uint16 row vector\n\n   65   66   67   68   69   70 % c ASCII\n</code></pre> <p>Notice that we get a different series of numeric ASCII code for the lower vs upper case characters.</p> <p>Remember, behind the scenes, everything is numbers.</p> <p></p>"},{"location":"matlabBasics/BinaryNumbers/#functions-that-type-cast","title":"Functions that type cast","text":"<p>There are a whole series of functions that simplify converting values from one class to another. The naming convention of these functions typically employ the number 2 in the middle of the function name.</p> <p>For example, to properly convert a number to its character array equivalent, you can use the function <code>num2str</code>, as follows:</p> Convert 1 to the character '1'<pre><code>chary = num2str(1)\n</code></pre> result<pre><code>chary =\n\n    '1' % the character 1\n</code></pre> <p>Conversely, to convert a character array of numbers back their numeric equivalent you can use the  <code>str2num</code> function:</p> Convert the Character 1 to the value 1<pre><code>numary = str2num('1')\n</code></pre> result<pre><code>numary =\n\n     1 % the value 1\n</code></pre> <p>There are other functions that perform similar actions, such as <code>str2double</code> that you can review at your leisure.</p>"},{"location":"matlabBasics/BinaryNumbers/#logical-class","title":"Logical Class","text":"<p>Logical arrays have the fewest possible values for each element. They can contain either a 0 or a 1 (interpreted as <code>TRUE</code> or <code>FALSE</code>).</p> <p>So, they require only 1 byte of memory per element, but really only 1 bit (out of those 8) is being used to represent the value.</p> <p>Something like this:</p> <p></p>"},{"location":"matlabBasics/BinaryNumbers/#type-casting-to-logical-class","title":"Type casting to logical class","text":"<p>MATLAB typecasts variables to the logical class by converting all non-zero elements to <code>TRUE</code> and all zero elements to <code>FALSE</code>.</p> <p>You can use the function logical to typecast to the logical class. For example, the following syntax converts a numeric array to a logical array:</p> <pre><code>k = -2:1:2  % create numeric array\nl = logical(k) % convert to logical class\n</code></pre> <p>The resultant logical array, <code>l</code>, has the same dimensions as <code>k</code>, but has only <code>1</code>'s and <code>0</code>'s (or <code>TRUE</code> and <code>FALSE</code>, respectively).</p> result<pre><code>k =\n    -2    -1     0     1     2\n\nl =\n     1     1     0     1     1\n</code></pre> <p>Note that only the zero from k was converted to a <code>FALSE</code>. The rest of the numbers were converted to <code>TRUE</code>. You can do something similar with a character array:</p> Type cast character array to logical<pre><code>logical('hello')\n</code></pre> result is all trues<pre><code>ans =\n\n  1\u00d75 logical array\n\n   1   1   1   1   1\n</code></pre> <p>However, you will typically just get all <code>TRUE</code> since all printable characters are represented by an ASCII code that is greater than zero.</p> <p>Note</p> <p>By the way, the ASCII code 0 codes for the NULL character. A character that basically means \"don't do anything, don't print, don't display, nothing\". This is not a character you can type using your keyboard and you will not likely ever purposefully use the NULL character. However, we can force its use for this example,  using the following syntax:</p> <pre><code>logical(['hello' char(0) 'goodbye'])\n</code></pre> result<pre><code>ans =\n\n  1\u00d713 logical array\n\n  1   1   1   1   1   0   1   1   1   1   1   1   1\n</code></pre> <p>This Module is OVER.</p> <p></p> <p>Flight of the Conchords - The Humans are Dead</p> <p></p>"},{"location":"matlabBasics/Cell/","title":"Cell Array","text":"<p>For Handling Mixed Data Types (Numbers, Letters, Words)</p>"},{"location":"matlabBasics/Cell/#overview","title":"Overview","text":"<p>\ud83d\udecd The cell array is the mystery grab bag of variable types. It was designed to store disparate information, such as character and numeric information, side by side, element by element in the same array. Importantly, this disparate information doesn't even need to be the same size, making cell arrays useful for organizing character arrays or other arrays of unpredictable dimensions.</p> <p></p>"},{"location":"matlabBasics/Cell/#important-terminology","title":"Important Terminology","text":"<ul> <li>Cell Array: A cell array is a data type with indexed data containers called cells. Each cell can contain any type of data.</li> </ul>"},{"location":"matlabBasics/Cell/#matlab-documentation","title":"MATLAB documentation","text":"<ul> <li>Cell Arrays.</li> <li>Accessing Data in Cells</li> </ul>"},{"location":"matlabBasics/Cell/#important-matlab-functions","title":"Important MATLAB Functions","text":"<ul> <li>cellfun: apply the same function to each cell of a cell array</li> <li>cell2mat: convert cell arrays to numeric arrays</li> <li>cellstr: Convert to cell array of character vectors</li> </ul>"},{"location":"matlabBasics/Cell/#special-matlab-characters","title":"Special MATLAB Characters","text":"<ul> <li> <p><code>{ }</code> - curly brackets</p> </li> <li> <p><code>( )</code> - parentheses</p> </li> </ul>"},{"location":"matlabBasics/Cell/#learning-objectives","title":"Learning Objectives","text":"<ul> <li> <p>Explain why you would use a cell array.</p> </li> <li> <p>Assign values to the elements of a cell array using the <code>{}</code> or <code>()</code> special characters</p> </li> <li> <p>Correctly index a cell array to access its contents</p> </li> <li> <p>Describe the difference between indexing cell arrays and numeric arrays</p> </li> <li> <p>Correctly input cell arrays into functions</p> </li> </ul>"},{"location":"matlabBasics/Cell/#why-cell-arrays","title":"Why Cell Arrays?","text":""},{"location":"matlabBasics/Cell/#the-trouble-with-the-fundamental-classes","title":"The Trouble With the Fundamental Classes","text":"<p>All right. So we already figured out how to store numbers, characters, and booleans in arrays (review the Basic Data Class modules if you don\u2019t know what I\u2019m talking about). Recall that in these fundamental classes, each element of the array contains a single piece of information, either a number, a character, or a true/false, depending on the class type. These three variable types can hold pretty much any type of information that we need.</p> <p>So, why do we need to learn about other variable types?</p> <p>Well, while very useful, the fundamental data types have certain restrictions that at times can become onerous for use at scale. For example, when storing rows of characters in a character array (i.e. a character matrix), you need to pad the array with empty spaces so that the number of columns is the same across all rows in the character matrix. This gets complicated when you are trying to store a series of characters, like names.</p> <p>Now, the function <code>char</code> can simplify  this process.</p> <p>Example: Using char to pad character matrices</p> <p>In this example, we will store a series of Girls Names that were popular in the 90's (ok, millennial)</p> <pre><code>common_names_1995 = char('Jessica', 'Ashley', 'Emily', 'Samantha')\n</code></pre> result<pre><code>common_names_1995 =\n                    4\u00d78 char array\n                    'Jessica '\n                    'Ashley  '\n                    'Emily   '\n                    'Samantha'\n</code></pre> <p>Note the varying number of spaces added after each name, save for the longest name, 'Samantha'</p> <p>But, while <code>char</code> easily manages the padding,  we would need to run this function every time we want to add a new row to the character array, which can get computationally burdensome (a fancy way of saying slow). Not to mention the fact that adding extra spaces to each row of a character array can make things tricky if you need to know the length of each character array. Say, for example, you wanted to know the average length of popular names in 1995. You would have to come up with a method to exclude those extraneous spaces in your count. This is certainly doable but adds unnecessary steps to the procedure.</p>"},{"location":"matlabBasics/Cell/#cell-arrays-to-the-rescue","title":"Cell Arrays to the Rescue","text":"<p>Cell arrays solve these problems by eliminating the need for a single value (number, character, or boolean) in each element of the array. Instead, you can have a whole array in a single element of a cell array. To differentiate this functionality, elements in cell arrays are also known as cells.</p> <p>Each cell of a cell array is like a box into which you can stuff other arrays\u2014even other cell arrays. This can be very useful for organizing information, but can sometimes make indexing a bit of a pain.  </p>"},{"location":"matlabBasics/Cell/#cell-array-assignment","title":"Cell Array Assignment","text":"<p>You create cell arrays using the special character Curly Brackets: <code>{ }</code>.</p> <p>Example: Creating a Cell array with the curly brackets</p> <p>To create the previous array as a cell array, you use the following syntax:</p> <pre><code>  names90s = {'Jessica'; 'Ashley'; 'Emily'; 'Samantha'}\n</code></pre> result<pre><code>names90s =\n            4\u00d71 cell array\n            {'Jessica' }\n            {'Ashley'  }\n            {'Emily'   }\n            {'Samantha'}\n</code></pre> <p>Here, <code>names90s</code> is a 4x1 cell array. Each cell (or element) in <code>names90s</code> contains a character array. Notice that we did not need to add any extraneous spaces to any of the character arrays. Also notice that we used the curly brackets as a concatenating tool, similar to the way we used square brackets to concatenate numbers in numeric arrays. Much of the rest of the syntax should look familiar: Inside the curly brackets, we used the single-quotes to concatenate the character arrays that we wanted packaged into the elements of the cell array. We also used semi-colons to indicate new rows in the cell array.</p> <p>There are some subtleties when creating a cell array.</p> <p>Compare the following:</p> <p>Concatenate four separate character scalars into a cell array</p> Create 1x4 cell array<pre><code>{'a','b','c','d'}\n</code></pre> result<pre><code>ans =\n      1\u00d74 cell array\n      {'a'}    {'b'}    {'c'}    {'d'}\n</code></pre> <p>...Here we get a 1x4 cell vector with 4 elements that each contain a separate character scalar (<code>a</code>,<code>b</code>,<code>c</code>, or <code>d</code>).</p> <p>Embed a single character vector into one cell element</p> Create a 1X1 cell array<pre><code>{'abcd'}\n</code></pre> result<pre><code>ans =\n      1\u00d71 cell array\n      {'abcd'}\n</code></pre> <p>\u2026Here we get 1X1 cell scalar with a single cell that contains the character vector (<code>'abcd'</code>).</p>"},{"location":"matlabBasics/Cell/#challenge-cell-array-assignment","title":"Challenge: Cell Array Assignment","text":"QuestionAnswer <p>Consider the following</p> <pre><code>{'abcd' 'ef'}\n</code></pre> <ol> <li> <p>What size cell array would the following return?</p> </li> <li> <p>What is found inside each cell of the  cell array?</p> </li> <li> <p>What are the dimensions of each of those contents?</p> </li> </ol> result<pre><code>ans =\n      1\u00d72 cell array\n      {'abcd'}    {'ef'}\n</code></pre> <ol> <li> <p>What size cell array would the following return? <code>A 1X2 cell array: One row, two columns</code></p> </li> <li> <p>What is found inside each cell of the array <code>character arrays</code></p> </li> <li> <p>What are the dimensions of those contents? <code>1x4 character array</code> and a <code>1x2 character array</code></p> </li> </ol>"},{"location":"matlabBasics/Cell/#store-anything-in-cell-arrays","title":"Store Anything in Cell Arrays","text":"<p>One of the advantages of a cell array is that you can store anything you want in its cells. Consider the following:</p> Concatenating different data types in a cell array<pre><code>cell_ar = {1 'a' true false} \n</code></pre> result<pre><code>cell_ar =\n           1\u00d74 cell array\n           {[1]}    {'a'}    {[1]}    {[0]}\n</code></pre> <p>\u2026Here, we use the curly brackets to concatenate four separate values: into a cell array: a number, a character, and two logical values, true and false. This syntax packages the values into separate cells of a cell array. Notice that the output in the command window has the value in each cell surrounded by both a square bracket (or single quotes) and a curly bracket. This means that each value is individually packaged into a separate element of the cell array.</p>"},{"location":"matlabBasics/Cell/#concatenating-cell-arrays","title":"Concatenating Cell Arrays","text":"<p>We can use Square brackets for Cell Arrays if we want to concatenate the individual cells. Consider the following:</p> Concatenating cell arrays<pre><code>cell_ar2 = {2 'b' false} % create a new cell array\ncell_ar3 = [cell_ar cell_ar2] % concatenate the contents from two cell arrays into a new cell array\n</code></pre> result<pre><code>cell_ar2 =\n            1\u00d73 cell array\n            {[2]}    {'b'}    {[0]}\n\ncell_ar3 =\n            1\u00d77 cell array\n            {[1]}    {'a'}    {[1]}    {[0]}    {[2]}    {'b'}    {[0]}\n</code></pre> <p>\u2026Here we first create a 1X3 cell vector, <code>cell_ar2</code>. Then we use the square brackets to concatenate the two cell arrays, <code>cell_ar</code> and <code>cell_ar2</code> into one larger, 1x7 cell array,  <code>cell_ar3</code>.</p> <p>Square vs Curly Bracket Concatenation</p> <p>General Use-cases for Square and Curly Bracket Concatenation.</p> <p>Square brackets <code>[ ]</code> are used to concatenate variables of the same type and row dimension. Using square brackets will return the same variable type that you started with.</p> <p>Curly brackets <code>{ }</code>, on the other hand, are used to create cell arrays. Any array found inside the curly brackets will be added to a new cell of the cell array. By using curly brackets, you can concatenate disparate variables and variable types into a single cell array.</p>"},{"location":"matlabBasics/Cell/#concatenating-variables-with-dimensional-disparities","title":"Concatenating Variables With Dimensional Disparities","text":"<p>Another powerful use for cell arrays is to concatenate variables that have different dimensions. This is especially useful when you can't easily predict the dimensions of the data that you are trying to concatenate. We already saw an example of this when we concatenated character arrays of different lengths into the elements of a cell array (Recall the cell array, <code>names90s</code>, with the girl names).</p> <p>We can do the same with numeric or logical arrays.</p> <p>Concatenating Numeric Arrays with different dimensions in a cell array</p> <p>We can package arrays of varying dimension into a cell array, using the following syntax:</p> <pre><code>ca = {'Ab'; [1]; [2 3]; [true false]; [false true; true false]; []}\n</code></pre> <p>Let's break the syntax down in detail:</p> <ol> <li>The variable name to be assigned is <code>ca</code></li> <li> <p>On the right side of the equal sign, the outer most brackets are the curly brackets, which generates a cell array.</p> </li> <li> <p>Inside these curly brackets, there are six pairs of Concatenating Special Characters: 1 pair of Single Quotes and five pairs of Square Brackets. These concatenating characters are used to generate a different sized arrays of different classes, which is then packaged into one of cells of the cell array. Notice that the last cell in this cell array contains an empty numeric array, which is a thing you can do in cell arrays. You can leave a cell in a cell array empty. </p> </li> <li> <p>The square brackets are separated by semi-colons to indicate a new row in the cell array.</p> </li> <li>Executing the above statement results in the following</li> </ol> result<pre><code>ca =\n    6\u00d71 cell array\n    {'Ab'    } % 1x2 char array\n    {[        1]} % 1x1 numeric array\n    {[      2 3]} % 1X2 numeric array\n    {[      1 0]} % 1x2 logical array\n    {2\u00d72 logical} % 2x2 logical array\n    {0\u00d70 double } % empty array\n</code></pre> <p>As you can see, what we get is a cell array with six different rows and one column. In each row, there is different array of varying dimensions  including one empty array</p>"},{"location":"matlabBasics/Cell/#cell-indexing","title":"Cell Indexing","text":"<p>Ok, so we can now get stuff into cell arrays. How do we get them out? Well, that depends on what you need.</p>"},{"location":"matlabBasics/Cell/#parenthetical-indexing","title":"Parenthetical Indexing","text":"<p>If you simply want a smaller cell array, then you would use the parentheses <code>( )</code> as follows:</p> Parentheses return smaller cell arrays<pre><code>ca(1:2)\n</code></pre> result<pre><code>ans =\n        2\u00d71 cell array\n        {'Ab'}\n        {[    1]}    \n</code></pre> <p>\u2026 This syntax returns the first two cells from the cell array as a new, smaller, 2x1 cell array. This type of syntax should feel familiar. This is how we index fundamental data types, which also returns smaller versions of the original arrays.  </p>"},{"location":"matlabBasics/Cell/#curly-bracket-indexing","title":"Curly Bracket Indexing","text":"<p>If you want to extract the contents from inside the elements of a cell array, then you use the curly brackets. This is easy and intuitive for one cell:</p> <p>Curly brackets extract contents from each cell<pre><code>ca{1} % extract contents from cell 1\n</code></pre> result<pre><code>ans =\n      'Ab'\n</code></pre></p> <p>\u2026Notice that this syntax returns not a smaller cell array but the contents from inside the indicated cell, replete with data type. In this case, we get a character array containing the characters <code>'Ab'</code>.</p>"},{"location":"matlabBasics/Cell/#extracting-the-content-from-multiple-cells-in-a-cell-array","title":"Extracting the content from multiple cells in a cell array","text":"<p>What happens when we use the curly brackets to extract content from multiple cells?</p> <p>Let's have a look. The following syntax extracts the contents from cells 2 through 4 in <code>ca</code>:</p> Curly Bracket of multiple cells returns a Comma-Separated List<pre><code>ca{1:3}\n</code></pre> <pre><code>ans =\n        'Ab'\n\nans =\n        2     3\n\nans =\n        1\u00d72 logical array\n        1   0\n</code></pre> <p>\u2026When we index multiple cells using the curly brackets, we get the contents of each cell, spit out, one after the other, into the workspace, overwriting <code>ans</code> each time. Here we get the contents of the first cell, <code>'Ab'</code>, followed by the contents of the second cell, <code>[2 3]</code>, followed by the contents of the third cell, <code>[1 0]</code>. Notice that <code>ans</code> ends up assigned only the 1x2 logical array , <code>[1 0]</code>.</p> <p>comma-separated lists</p> <p>Using the curly brackets to index out multiple cells returns what is known as a \"comma-separated list\" (even though there are no commas). This simply means that the contents from each cell are spit out, one after the other, into the workspace.  Such an output makes sense from a general point of view, as there is no guarantee that the contents from a given cell in a cell array can be concatenated with the contents from any other elements of the same cell array.</p>"},{"location":"matlabBasics/Cell/#the-trouble-with-curly-bracket-indexing","title":"The trouble with Curly Bracket indexing","text":"<p>So we can extract the contents from  multiple cells using the curly brackets. How do we concatenate that data into a new variable? Turns out, its a little tricky.</p> <p>If the contents of the cell arrays are the same type, we can use the Square Brackets to concatenate the contents. For example, in <code>ca</code>, cells 2 and 3  contain numeric arrays. We can extract that data using the curly brackets and then concatenate the data using square brackets, as follows:</p> Concatenate contents from multiple cells using square brackets<pre><code>[ca{2:3}]\n</code></pre> result<pre><code>ans =\n      1     2     3  \n</code></pre> <p>This syntax just jams all of the numeric values into one numeric array. Which may be what you want. But not always.</p> <p>Consider the names90 cell array that we created at the top of this module</p> <pre><code>names90s = {'Jessica'; 'Ashley'; 'Emily'; 'Samantha'}\n</code></pre> <p>We can extract contents from all cells as a comma-separated list using the following syntax</p> Extract All Content as comma-separated list<pre><code>names90{:} % extract all elements\n</code></pre> <pre><code>ans =\n      'Jessica'\n\nans =\n      'Ashley'\n\nans =\n      'Emily'\n\nans =\n      'Samantha'\n</code></pre> <p>But if we try to concatenate this content using the square brackets\u2026</p> Extract and Concatenate<pre><code>[names90{:}] % note the square brackets \n</code></pre> result<pre><code>ans =\n      'JessicaAshleyEmilySamantha'\n</code></pre> <p>\u2026We get all of the content crammed into one character array, which may not be what we want, especially since there is no separation between the names.</p> <p>Similarly, notice that there is no easy way to concatenate cells 4 and 5 since those contents have different dimensions.</p> Extracting and Concatenating Disparate content returns error<pre><code>[ca{4:5}]\n</code></pre> <p>Error using horzcat</p> <p>Dimensions of arrays being concatenated are not consistent.</p> <p>Since you can put anything in each cell of the array, you can't easily extract and concatenate the content from multiple cells\u2014the syntax can get convoluted to get what you want.</p> <p>Cell Indexing Takeaways</p> <p>The Main Takeaway: that indexing with <code>( )</code> returns smaller cell arrays while indexing with <code>{ }</code> returns the contents from the elements inside the cell arrays, sometimes in unexpected ways. Always keep these two different types of syntaxes in mind when indexing cell arrays.</p> <p>But, really, the main takeaway is that cell array indexing can be a major source of syntax errors and hair-pulling frustration and should be avoided if at all possible! That is, use other variable class types whenever possible or only put similar items in the elements of a cell array.</p>"},{"location":"matlabBasics/Cell/#challenge-cell-indexing","title":"Challenge: Cell Indexing","text":"Question 1Answer 1Question 2Answer 2 <p>Show the syntax to index the last three elements in <code>ca</code> to get back a smaller cell array. What do you get?</p> <pre><code>ca(4:end)\n</code></pre> <p>result<pre><code>ans =\n\n3\u00d71 cell array\n\n  {[      1 0]}\n  {2\u00d72 logical}\n  {0\u00d70 double }\n</code></pre> You get a 3X1 cell array with the last three cells. </p> <p>Show the syntax to index out the contents from cell 3. What do you get?</p> <pre><code>ca{3}\n</code></pre> <p>result<pre><code>ans =\n\n 2     3\n</code></pre> You get a 2X1 numeric vector . </p>"},{"location":"matlabBasics/Cell/#cell-arrays-and-functions","title":"Cell Arrays and Functions","text":"<p>Since the actually data in a cell array is packaged into cells, you need to take care when inputting cell arrays into functions. This is a major potential source of syntax errors. Many functions expect the contents from cells in the cell array, not the cell array itself.</p>"},{"location":"matlabBasics/Cell/#improper-inputting-of-cells-into-functions","title":"Improper Inputting of Cells into Functions","text":"<p>Consider our cell array, <code>ca</code>:</p> ca<pre><code>6\u00d71 cell array\n\n    {'Ab'       }\n    {[        1]}\n    {[      2 3]}\n    {[      1 0]}\n    {2\u00d72 logical}\n    {0\u00d70 double }\n</code></pre> <p>Say, we want to add up the contents from the second and third cells using the function <code>sum</code>. If we don't index correctly, we will get an error:</p> Indexing with Parentheses Returns error<pre><code>sum(ca(2:3))\n</code></pre> <p>Error using sum</p> <p>Invalid data type. First argument must be numeric or logical.</p> <p>This error means that the function sum does not accept cell arrays as inputs. Remember, since we indexed with parentheses, we got a smaller cell array back.</p> <p>If we instead use the curly brackets to access the contents\u2026</p> Indexing with Curly Brackets may not work properly in functions<pre><code>sum(ca{2:3})\n</code></pre> <p>\u2026We get a result\u2026</p> <pre><code>ans =\n      1\n</code></pre> <p>\u2026But not the correct result. We just get the sum of the first cell, which contains the value 1. This is because using curly brackets on multiple cells of a cell array returns a comma-separate list. When that happens, the function sum just uses the first output.</p> <p>The correct syntax to correctly sum cells 2 and 3 is as follows:</p> Correct Input into sum<pre><code>sum([ca{2:3}])\n</code></pre> result<pre><code>ans =\n      6\n</code></pre> <p>Notice that we needed to first index using the curly brackets and then concatenate the output using the square brackets. Finally, we get the right result.</p> <p>So, as you can see, there are some issues with indexing cell arrays. As we'll see in later modules, there are different complex variable types to help tackle these issues.</p>"},{"location":"matlabBasics/Cell/#cellfun-putting-the-fun-back-in-cell-arrays","title":"cellfun - Putting the Fun Back in Cell Arrays","text":"<p>The function <code>cellfun</code> was built to methodically extract the contents from each element in a cell array, perform an operation on those contents (like a function), and then return the output from that operation.</p> <p>Take for example, the function numel, which returns the number of elements in an array. If we plug our cell array into numel\u2026</p> <pre><code>numel(ca)\n</code></pre> <pre><code>ans =\n      6\n</code></pre> <p>\u2026 we get <code>6</code>, which is the number of cells in <code>ca</code>. But what if we wanted to know how many elements are in each array contained in the cells of <code>ca</code>? This is where the function cellfun comes in handy.</p> <p>Using cellfun to count the number of elements in each cell of a cell array.</p> <p>To get the number of elements in each array found in <code>ca</code>, we use the following syntax</p> <pre><code>counts = cellfun(@numel, ca)\n</code></pre> result<pre><code>ans =\n        2\n        1\n        2\n        2\n        4\n        0\n</code></pre> <p>\u2026Perfect, now we get the element count for each cell in <code>ca</code>. Recall that the last cell in <code>ca</code> was empty.    </p> <p>Let's unpack the syntax a little further:</p> <ol> <li>The first input into <code>cellfun</code> is the handle to the function <code>numel</code>. A handle is simply the function name preceded by the <code>@</code> symbol. This directs <code>cellfun</code> to use the function <code>numel</code> as an input (instead of first trying to execute that function and using the output from that function as an input).</li> <li>The second input into <code>cellfun</code> is the cell array</li> <li>The output from <code>cellfun</code> returns the action of numel on each cell of <code>ca</code>. This output is similar to repeated calls to numel as follows:</li> </ol> <pre><code>numel(ca{1}) % number of elements in cell 1\nnumel(ca{2}) % number of elements in cell 2\nnumel(ca{3}) % number of elements in cell 3\n</code></pre> <p>The function cellfun greatly simplifies performing operations on cells in a cell array. Sometimes, though, the function that we want to use doesn't return a tidy output, like a single number, which can then be packaged into a numeric array. What if we wanted to know the class of each array contained in the cells of the cell array? Class names, like 'Char' and 'Double', vary by length, so they must be stored in\u2014you guessed it\u2014another cell array. To tell cellfun to output a cell array, we  add a couple of inputs, as follows:</p> cellfun with UniformOutput set to false<pre><code>cellfun(@class,ca,'UniformOutput',false)\n</code></pre> result<pre><code>ans =\n      6\u00d71 cell array\n\n        {'char'   }\n        {'double' }\n        {'double' }\n        {'logical'}\n        {'logical'}\n        {'double' }\n</code></pre> <p>\u2026and we get the output nicely packaged in a cell array</p>"},{"location":"matlabBasics/Cell/#post-mortem","title":"Post-mortem","text":"<ol> <li> <p>Cell arrays are great for organizing disparate information of different dimensions</p> </li> <li> <p>Cell arrays are less great for getting that disparate information back out again.</p> </li> <li> <p>Watch what you input into functions when cell arrays are involved. If you get an error, you probably messed up the indexing.</p> </li> </ol> <p>Back to top \ud83d\udecd</p>"},{"location":"matlabBasics/Character/","title":"Character Arrays","text":"<p>for letters and stuff</p>"},{"location":"matlabBasics/Character/#overview","title":"Overview","text":"<p>They say words are little more than horizontal vectors of characters. Well, I don't know if they say that, but I say that, and you should probably know that because, from the perspective of a computer, that is basically what they are.</p> <p>In this module, we will learn about character arrays, which are useful for storing information such as names or other such unique identifiers.</p> <p></p>"},{"location":"matlabBasics/Character/#syntax-overview","title":"Syntax Overview","text":"Syntax Special Character Meaning x='a' ' ' assign the character a to the variable x x='cat' ' ' assign the characters 'c', 'a', and 't' to x"},{"location":"matlabBasics/Character/#learning-objectives","title":"Learning Objectives","text":"<ul> <li>Define a Character Array.</li> <li>Be able to assign values to character arrays using paired single quotes</li> <li>Be able to use the function sprintf to format character arrays</li> <li>Be able to use functions discussed in this module like [sort] and [unique] to parse characters in a character array</li> <li>Be able to use regular expressions to find and replace characters in character arrays</li> </ul>"},{"location":"matlabBasics/Character/#special-matlab-characters","title":"Special MATLAB Characters","text":"<ul> <li> <p><code>' '</code> - paired single quotes (the straight kind) are used to concatenate characters into a character array</p> </li> <li> <p><code>[ ]</code>- square brackets are used to concatenate character arrays</p> </li> </ul>"},{"location":"matlabBasics/Character/#important-terminology","title":"Important Terminology","text":"<ul> <li> <p>Character Arrays: An array of characters (letters, spaces, punctuation, etc). Sometimes called a string.</p> </li> <li> <p>ASCII: the American Standard Code for Information Interchange. A numeric code to indicate different characters.</p> </li> </ul>"},{"location":"matlabBasics/Character/#useful-mathworks-documentation","title":"Useful Mathworks Documentation","text":"<ul> <li>Character Strings</li> <li>Text in String and Character Arrays</li> </ul>"},{"location":"matlabBasics/Character/#important-matlab-functions-you-should-know","title":"Important MATLAB Functions You should know","text":"<ul> <li>char - Convert to a character array</li> <li>ischar: is the array a character array?</li> <li>upper and lower - Change case of letters</li> <li>isletter and isspace - returns a logical array that masks letters or spaces in a character array</li> <li>sprintf - Format data into character array</li> <li>regexp - Regular expression (super find function)</li> <li>regexprep - Replace text using regular expression</li> </ul>"},{"location":"matlabBasics/Character/#assignment-and-syntax","title":"Assignment and syntax","text":"<p>Each element in a character array contains a single letter or other such character (as opposed to a numeric or logical value). When creating a character array, MATLAB assumes that you probably don't want to separate each character by a space, so the syntax for creating a character array is different from creating a numeric array. Instead of using the paired square brackets, you use a pair of single quotes (<code>' '</code>) and you do not include any spaces in between the characters. In fact, the <code>space</code> character is a type of character known as a whitespace character. For example, the following is a very simple character array:</p> <pre><code>ch = 'hello'\n</code></pre> <p>Syntax Coloring</p> <p>In the  MATLAB editor, characters in character arrays are colored purple.</p> <p>Anything you can type on a computer keyboard can be stored as a character array. Spaces are characters. Punctuation Marks are characters. Even numbers can be character arrays:</p> <pre><code>n = '1'\n</code></pre> result<pre><code>n =\n\n    '1'\n</code></pre> <p>This can cause problems if you are not careful and accidentally try to do math with character arrays. MATLAB will display character array outputs in single quotes, as shown above <code>'1'</code> and color the character purple.  However, it is always a good idea to check the class using <code>whos</code> or check the workspace. Make sure you know the class of your array or you may get an unexpected result.</p> <pre><code>whos n\n</code></pre> result<pre><code>Name      Size            Bytes  Class    Attributes\n  n         1x1                 2  char               \n</code></pre>"},{"location":"matlabBasics/Character/#inspecting-character-arrays-in-the-variable-editor","title":"Inspecting character arrays in the Variable Editor","text":"<p>If you double-click on the variable name of a character array in the workspace to bring up the  \"Variable Editor\",  all letters of the array appear to be contained in a single element, as shown in the following image:</p> <p></p> <p>\u2026But, this is not the case. Just as in a numeric variable, each element in a character array contains a single character. This is even indicated right above the box: \"1X5 char\"</p> <p>The <code>whos</code> function, which is a text version of the workspace, can further clarify the properties of <code>ch</code>:</p> whos Function<pre><code>  whos('ch')\n</code></pre> whos output<pre><code>   Name      Size            Bytes  Class    Attributes\n     ch         1x5                10  char               \n</code></pre> <p>\u2026As you can see, <code>ch</code> is a vector array with one row and 5 columns that contains the letters <code>h</code>,<code>e</code>,<code>l</code>,<code>l</code>, and <code>o</code> in the first five elements of the array. Also note that it has a 'char' class (character array class), and it requires 10 Bytes of memory. This means that a character array requires 2 Bytes of memory allocation (or is 16-bit) per element.</p>"},{"location":"matlabBasics/Character/#indexing","title":"Indexing","text":"<p>Character Arrays can be indexed using parentheses, just like numeric arrays.</p> First ElementLast Element <p><pre><code>ch(1)\nans = \n      'h'\n</code></pre> This syntax returns the first element in a character array, which contains the letter <code>h</code>:</p> <pre><code>ch(end)\n\nans = \n      'o'\n</code></pre>"},{"location":"matlabBasics/Character/#concatenation","title":"Concatenation","text":"<p>You can use the paired square brackets to concatenate char arrays, just as you would concatenate numeric arrays. We can easily concatenate two character arrays using the following syntax:</p> concatenate two character arrays<pre><code>c1 = 'together';\nc2 = 'again';\nct = [c1 c2] % square brackets concatenate the contents of c1 and c2\n</code></pre> result<pre><code>ct =\n\n    'togetheragain'\n</code></pre> <p>Note</p> <p>The concatenation of character arrays takes no regard to grammar or spacing. The result is literally the two character arrays, smashed together.</p> <p>To include a space between concatenated char arrays, you need to specify the space, as follows:</p> add space character and concatenate<pre><code>sp = ' ' % create space character\nct2 = [c1 sp c2] % concatenate all three character arrays\n</code></pre> result<pre><code>ct2 =\n      'together again' % Now there is a space between the two words\n</code></pre>"},{"location":"matlabBasics/Character/#character-matrices","title":"Character Matrices","text":"<p>What happens if you try to place two different words in separate rows of a character array using semicolon syntax?</p> <pre><code>['hello'; 'goodbye']\n</code></pre> <p>Error</p> <p>Dimensions of arrays being concatenated are not consistent</p> <p>The syntax fails because 'hello' has 5 characters, while 'goodbye' has 7. And as we remember from the Numeric Array section, we have to have an equal number of filled columns for each row in a column. You can't have any empty elements </p> <p>So, how do you create character arrays with more than one row of characters? Just like in a numeric matrix, you need an equal number of columns for every character in a character array. If there are not enough characters in a given word, you can pad that word with spaces.  </p> <p>To properly concatenate the two words 'hello' and 'goodbye' into one matrix, you need to pad 'hello' with 2 trailing spaces, as follows:</p> Space Padded character arrays<pre><code>['hello  '; 'goodbye']\n</code></pre> result<pre><code>ans =\n\n      2\u00d77 char array\n      'hello  '\n      'goodbye' % Now we have a proper character matrix\n</code></pre> <p>Note</p> <p>Even though the spaces are not visible, they are occupying elements in the matrix.</p> <p>You don't have to pad with spaces\u2014you can use any character:</p> Asterisks-Padded Character Array<pre><code>['hello**'; 'goodbye']\n</code></pre> result<pre><code>ans =\n      2\u00d77 char array\n      'hello**'\n      'goodbye' % this matrix is padded with asterisks\n</code></pre>"},{"location":"matlabBasics/Character/#the-char-function","title":"The char Function","text":"<p>If you don't want to worry about padding your character arrays, you can use the function <code>char</code> to automatically add the proper number of trailing spaces for you. Just plug in the character arrays that you want concatenated, and the function will do the rest</p> char function<pre><code>p = char('hello', 'goodbye','farewell')\n</code></pre> result<pre><code>p =\n    3\u00d78 char array\n\n    'hello   '\n    'goodbye '\n    'farewell'\n</code></pre> <p>Note</p> <p>Here, the function <code>char</code> automatically creates a <code>3x8</code> character array, padding both 'hello' and 'goodbye' with spaces at the end to match the length of 'farewell'.</p>"},{"location":"matlabBasics/Character/#indexing-character-matrices","title":"Indexing Character Matrices","text":"<p>Remember, in character arrays, each element contains one character.</p> <p></p> <p>So, when indexing elements out of a character matrix, you get one character back. Consider the following examples of indexing <code>p</code>.</p> Index 2nd row, 2nd column in p<pre><code>p(2,2) \n</code></pre> result<pre><code>ans =\n      'o' % you get the second 'o' in 'goodbye'\n</code></pre> Index 1st row, 3rd column in p<pre><code>p(1,3)\n</code></pre> result<pre><code>ans =\n      'l' % you get the first 'l' in 'hello'\n</code></pre> ChallengeAnswerChallenge 2Answer 2 <p>How would you index out the 'w' in 'farewell' from <code>p</code>?</p> <pre><code> p(3,5)\n\n ans =\n        'w'\n</code></pre> <p>You need to index the third row, fifth column.</p> <p>What does the following syntax return?</p> <pre><code> p(1,end)\n</code></pre> <pre><code>p(1,end)\n\nans =\n          ' '\n</code></pre> <p>This syntax returns a space.</p>"},{"location":"matlabBasics/Character/#character-array-generation","title":"Character Array Generation","text":"<p>You can generate a sequential series of characters as you would a series of incremental numbers by using the colon operator. The following syntax generates a character array that contains all of the lowercase letters from 'a' to 'z', in alphabetical order.</p> <pre><code>lower_letters = 'a' : 'z'\n</code></pre> result<pre><code>lower_letters =\n\n'abcdefghijklmnopqrstuvwxyz'\n</code></pre> <p>If you want every other letter, you could use the following syntax (just like with numeric arrays):</p> <pre><code>letter_subset = 'a':2:'z'\n</code></pre> result<pre><code>letter_subset =\n                 'acegikmoqsuwy'\n</code></pre>"},{"location":"matlabBasics/Character/#character-array-functions","title":"Character Array Functions","text":"<p>The following functions are very useful for character arrays.</p>"},{"location":"matlabBasics/Character/#case-functions","title":"Case functions","text":"<p>The functions upper and lower change the case of a letter:</p> Change Case<pre><code>ch = 'a':'f'\nCH = upper(ch) % change to uppercase\nch2 = lower(CH) % change to lowercase\n</code></pre> result<pre><code>ch =\n      'abcdef'\n\nCH =\n      'ABCDEF'\n\nch2 =\n      'abcdef'\n</code></pre>"},{"location":"matlabBasics/Character/#is-functions","title":"is* functions","text":"<p>is* functions return logical arrays that mask specific types of characters in an array</p> <ul> <li>isletter: which elements contain letters (a-z, A-Z)</li> <li>isspace: which elements contain spaces?</li> </ul> <p>Consider the following character array</p> <pre><code>ch = ['a':'c' ' ' '1':'c' ' !@#']\n</code></pre> <pre><code>ch =\n     'abc 123 !@#'\n</code></pre> <p>The function isletter returns a logical array masks the letters</p> Mask Letters<pre><code>laL = isletter(ch)\n</code></pre> result<pre><code>laL =\n      1\u00d711 logical array\n      1   1   1   0   0   0   0   0   0   0   0\n</code></pre> <p>\u2026Just the first three characters are letters</p> <p>The function isspace masks the spaces</p> Mask Spaces<pre><code>laS = isspace(ch)\n</code></pre> <pre><code>laS =\n      1\u00d711 logical array\n      0   0   0   1   0   0   0   1   0   0   0\n</code></pre> <p>\u2026The spaces are after the letter c and after the number 3.</p>"},{"location":"matlabBasics/Character/#sprintf","title":"sprintf","text":"<p>The sprintf function allows you to add data to a character array, sort of like creating a template for form letter where you add the data when you create the letter.</p> <p>To use <code>sprintf</code>, you first create a character array that has placeholders in them. These placeholders are prefaced by the <code>%</code> symbol. Some common placeholders include:</p> Placeholder Data %s character array %d number %f floating point number <p>The basic syntax for <code>sprintf</code> is as follows:</p> <pre><code>formatted_char_array = sprintf(char_2_format,data)\n</code></pre> <p>Consider the following example.</p> sprintf function<pre><code>input_array = 'The value of pi is %d' % a character array with placeholders\noutput_array = sprintf(input_array,pi) % second input is a function that returns the value for pi\n</code></pre> <p>For <code>sprintf</code>, the first input is the character array, and the second (and subsequent inputs) are the data that you want to add to the character array. </p> result<pre><code>output_array = \n'The value of pi is 3.141593e+00'\n</code></pre> <p>In this example, <code>input_array</code> is the character array to be formatted. It has one placeholder: <code>%d</code>. This placeholder is replaced by the data found in the second input of <code>sprintf</code>, which in this case is the value of <code>\u03c0</code>. The value of <code>\u03c0</code> is returned by the MATLAB function pi. The use of the placeholder <code>%d</code> here returns the value of pi in the default format of MATLAB.</p> <p>If you would like to change the way <code>\u03c0</code> is displayed, such as the number of significant digits displayed or the field width, you can use the <code>%f</code> placeholder preceded by some formatting operators, as shown in this image:</p> <p></p> sprintf function formatting a number to 10 significant digits<pre><code>input_array = 'pi to the 10th significant digit is: %1.10f' % here the .10 indicates the precision\noutput_array = sprintf(input_array,pi) % again, the second input the value for pi\n</code></pre> result<pre><code>output_array =\n'pi to the 10th significant digit is: 3.1415926536'\n</code></pre>"},{"location":"matlabBasics/Character/#escape-characters","title":"Escape Characters","text":"<p>Sometimes you want to include a line return or a tab in your formatted string. There are special character combinations that allow you to do this. They are often preceded by the backslash. Here are a few:</p> Escape Character Indicates \\n new line \\t tab '' single quotation <p>The one I use the most is \\n, which allows me to create a string with multiple lines.</p>"},{"location":"matlabBasics/Character/#more-placeholders-more-data","title":"More Placeholders, More data","text":"<p>In <code>sprintf</code>, the number of inputs depends on the number of placeholders that you have added to the input character array. </p> <p>For example, The following character array has four placeholders (3 <code>%d</code>'s and 1 <code>%s</code>'s); therefore, you need four inputs  after the input character array, as shown here:</p> <pre><code>input_array = 'The product of %d %s %d equals %d'; % four placeholders\nx = 2;\ny = 3;\nresult = sprintf(input_array, x, 'times', y, x*y) % (1)\n</code></pre> <ol> <li>Four inputs after the char array: <code>x, 'times', y, x*y</code></li> </ol> result<pre><code>result =\nThe product of 2 times 3 equals 6\n</code></pre> <p>Note</p> <p>Note: The last input into <code>sprintf</code> in this example is the product of <code>x</code> and <code>y</code>, which matches the final <code>%d</code> placeholder.</p>"},{"location":"matlabBasics/Character/#fprintf","title":"fprintf","text":"<p>Similar to the sprintf function, fprintf can format data into strings.  In addition, fprintf can then output those strings to the command window (or even to files).</p> ChallengeAnswer <p>What would you change in the previous example to get the following output?</p> result<pre><code>    result =\n      The sum of 2 plus 3 equals 5\n</code></pre> <pre><code>input_array = 'The sum of %d %s %d equals %d'\nx = 2\ny = 3\nresult = sprintf(input_array, x, 'plus', y, x+y)\n</code></pre>"},{"location":"matlabBasics/Character/#regular-expressions","title":"Regular Expressions","text":"<p>Now we're getting into the really complicated stuff. Don't sweat it if you don't understand this section.</p> <p>Regular Expressions are like a super-charged search function. They are used widely\u2014not just in MATLAB. A regular expression is nothing but a sequence of characters that match a pattern. Besides using literal characters (like 'abc'), there are some meta characters (*,+,? and so on) which have special purposes. Using regular expressions (sometimes called GREP), you can find patterns in strings, like all words in a paragraph that are capitalized but are not preceded by a period. Or, suppose you have a list of people\u2019s names that you want to alphabetize. If the list is arranged first name first, but you want to alphabetize by last names, a simple grep pattern can be used to put the names in the proper order for sorting.</p> <ul> <li>A Practical Guide to Regular Expressions</li> <li>MATLAB Functions</li> <li>regexp - Regular expression (super find function)</li> <li>regexprep - Replace text using regular expression</li> </ul>"},{"location":"matlabBasics/Character/#regexp","title":"regexp","text":"<p>The function <code>regexp</code> is MATLAB's version of this an incredibly powerful search function.  <code>regexp</code> uses regular expressions to find these snippets of strings and performs some sort of operation on those characters / snippets.</p> <p>For example, consider the following character array:</p> <pre><code>s = 'together at last';\n</code></pre> <p>We can use <code>regexp</code> to find the first letter in each word. To do this, we need to create a Regular Expression, or special code to search the character array. The easiest way to do that is to use MATLAB CoPilot or other AI. For example, you might ask</p> <p>What is the regular expression to find the first letter in each word of a sentence?</p> <p>In this case, the regular expression we need is <code>'\\&lt;(\\w)'</code> (1). We enter that as the second input into <code>regexp</code>, as follows:</p> <ol> <li>The regular expression '\\&lt;(\\w)' matches the first letter of each word. Here, \\&lt; asserts the position at the start of a word, and (\\w) captures the first word character.</li> </ol> Find the First letter in each word<pre><code>idc = regexp(s,'\\&lt;(\\w)')\n</code></pre> <p>The default output are the indices of the letters</p> The indices of the First letter in each word in s<pre><code>idc =\n      1   10    13\n</code></pre> <p>We can use these indices to modify our character array, as follows</p> Capitalize the first letter in each word<pre><code>s(idc) = upper(s(idc))\n</code></pre> result<pre><code>s = \n    'Together At Last'\n</code></pre> <p>\u2026This syntax replace the lower case letters in <code>s</code> with the upper case version at only the <code>idc</code> locations in the character array</p>"},{"location":"matlabBasics/Character/#regexprep","title":"regexprep","text":"<p>We can use a variant of <code>regexp</code>, the function <code>regexprep</code>, to replace characters in a character array with other characters or with nothing at all. </p> <p>For example, to replace the spaces in <code>s</code> with underscores, we would use the following syntax:</p> replace spaces with underscores<pre><code>t = regexprep(s,' ','_')\n</code></pre> result<pre><code>T = \n    'Together_At_Last'\n</code></pre> <p>Notice that <code>regexprep</code> accepts three inputs. The second input (<code>' '</code>) is the regular expression to match (<code>space</code> in this case). The third input is the character (<code>'_'</code>) used to replace the regular expression. In effect, we have replaced all of the spaces with the underscore character.</p> <p>We can eliminate the underscores entirely using an empty pair of single quotes as the third input, as follows:</p> replace underscores with nothing<pre><code>u = regexprep(s,'_', '')\n</code></pre> result<pre><code>u =\n    'TogetherAtLast'\n</code></pre> <p>As you can see regular expressions are an incredibly powerful way to manipulate strings. However, sometimes they can be difficult to use because the search strings are not intuitive. Use MATLAB Copilot to help.</p> <p>MODULE Complete. Congrats, you made it to the end. High Five. </p>"},{"location":"matlabBasics/ControlFlow/","title":"Control Flow","text":"<p>for Making Decisions or Repeating Stuff</p> <p></p>"},{"location":"matlabBasics/ControlFlow/#overview","title":"Overview","text":"<p>If, then, else, when?</p> <p>Control flow is the flow chart of computer programming. Control Flow allow you to create scripts or functions that execute or repeat upon meeting certain conditions. Think of a music player. When you click \"Play\", the Music plays. That is a type of control flow known as a \"conditional statement.\" Similarly, when you select the \"Repeat\" function, the same song will play over and over. That is another type of control flow called a loop. We'll talk about that too.</p>"},{"location":"matlabBasics/ControlFlow/#somewhat-useful-matlab-documentation","title":"Somewhat Useful MATLAB Documentation","text":"<ul> <li> <p>Loops and Conditional Statements</p> </li> <li> <p>if, elseif, else</p> </li> <li> <p>for loops</p> </li> <li> <p>while loops</p> </li> <li> <p>switch, case, otherwise</p> </li> </ul>"},{"location":"matlabBasics/ControlFlow/#keywords-you-should-know","title":"Keywords you should know","text":"<ul> <li>for</li> <li>while</li> <li>if</li> <li>else</li> <li>case</li> <li>otherwise</li> <li>end</li> <li>return</li> <li>continue</li> <li>break</li> </ul>"},{"location":"matlabBasics/ControlFlow/#terminology-you-should-know","title":"Terminology you should know","text":"<ul> <li> <p>Control Flow: the process of creating conditional statements or looping statements.</p> </li> <li> <p>Conditional Statement: A statement used determine which block of code to execute at run time</p> </li> <li> <p>Looping Statement: A statement designed to repeatedly execute a block of code</p> </li> </ul>"},{"location":"matlabBasics/ControlFlow/#conditional-statements","title":"Conditional Statements","text":"<p>xkcd 518</p> <p>When programming, you often want the computer to respond differently depending on the input. Conditional statements are like programmatic flow charts that analyze values of specified variables to determine which block of code should be executed. This is useful for handling unknown situations.</p> <p>A conditional statement typically contains a series of expressions that resolve to either <code>true</code> or <code>false</code>. Each expression is followed by the block of code to be executed if the expression resolves to TRUE. So, for conditional statements to properly work, only ONE expression should resolve to TRUE on a given run of the statement.  </p>"},{"location":"matlabBasics/ControlFlow/#if-else-statements","title":"IF ELSE statements","text":"<p>IF, ELSE statements are the simplest and most straight forward of the conditional statements. They are used to create  programmatic flow charts.</p> <p>Anatomy of an IF ELSE STATEMENT</p> <p>This is what an IF ELSE statement looks like:</p> <p>if expression 1</p> <p>CODE BLOCK 1</p> <p>elseif expression 2</p> <p>CODE BLOCK 2</p> <p>else</p> <p>CODE BLOCK 3</p> <p>end</p> <ul> <li>Required keywords: <code>if</code> and <code>end</code>. </li> <li>Optional keywords: <code>else</code> and <code>elseif</code>. <code>else</code> must be the last keyword before <code>end</code>/</li> <li>Expression: a statement that can resolve to a <code>0</code> or non-zero (e.g. a logical operation). Expressions immediately follow the keywords <code>if</code> and <code>elseif</code>. <code>else</code> and <code>end</code> do not have expressions.</li> <li>Code block: the line(s) of code that follow a key word line (except <code>end</code>). The code that is run if the immediately preceding expression resolves to a non-zero value. If none of the expressions resolve to a non-zero value, then the code block after the <code>else</code> line is run.</li> <li>Evaluation order: each expression is evaluated sequentially starting from the <code>if</code> line. Once an expression resolves to a non-zero value, the subsequent code block is executed and the IF ELSE statement is exited (no other expression is even checked)</li> </ul> <p>Consider the following example:</p> <p></p> <ul> <li>NOTE: the variable <code>age</code> should be set before the IF ELSE statement</li> <li>Code Block 1 will only execute if the value of <code>age</code> is less than 21</li> <li>Code Block 2 will execute if <code>age</code> is greater than 50</li> <li>Otherwise, Code Block 3 will execute (for any age between 21 and 50)</li> </ul> Challenge 1: The case of the missing else QuestionAnswer <p>IF ELSE statements don't actually require an else statement</p> <p>Here, we have a statement that checks whether the variable <code>RESPONSE</code> contains the string <code>\"Here\"</code>. (like a simplistic Taking Attendance Algorithm).(1)</p> <ol> <li>Not shown here is the assignment of a value to <code>RESPONSE</code>, which typically occurs before the IF ELSE statement.</li> </ol> Simple Attendance Algorithm<pre><code>if RESPONSE == \"Here\"\n    student = \"present\"\nend\n</code></pre> <p>If <code>RESPONSE</code> does contain <code>\"Here\"</code>, then variable <code>student</code> gets assigned the value <code>\"present\"</code>. If not, nothing happens. </p> <p>CHALLENGE: add an <code>else</code> statement so that if <code>RESPONSE</code> contains anything other than <code>\"Here\"</code>, <code>student</code> is set to <code>\"absent\"</code>.</p> The Attendance Code<pre><code>if RESPONSE == \"Here\"\n    student = \"present\"\nelse\n    student = \"absent\"\nend\n</code></pre> <p>In this IF ELSE statement, if <code>RESPONSE</code> is anything other than \"Here\", <code>student</code> is set to <code>\"absent\"</code>. </p> Challenge 2: When Present is not Here QuestionAnswer <p>In the previous challenge, we only test if <code>RESPONSE</code> is equal to <code>\"Here\"</code>. This works great, if the response from the student is exactly \"Here\". But what if the student is not an automaton and responds with an alternate response, like \"Yup\", \"Yo\", or even \"present\"? The conditional statement would return a <code>FALSE</code> and the student would be marked absent. </p> <p>Perhaps it would be more accurate to only mark the student \"absent\" if there is no response (Bueller? Bueller? Bueller?) and \"present\" if there is any response at all.</p> <p>How would you modify the above IF ELSE statement so that when <code>RESULT</code> is set to <code>\"\"</code>, <code>student</code> is set to <code>\"absent\"</code>, and when <code>RESULT</code> has any other value,  <code>student</code> is set to \"present\"?</p> <p>Updated IF ELSE statement<pre><code>IF RESPONSE == \"\"\n    student = \"absent\"\nELSE\n    student = \"present\"\nEND\n</code></pre> Here, when <code>RESPONSE</code> is empty, <code>student</code> is set to \"absent\". If  <code>RESPONSE</code> contains anything,  <code>student</code> is set to \"present\". </p>"},{"location":"matlabBasics/ControlFlow/#organizing-multiple-else-ifs","title":"Organizing Multiple ELSE IFs","text":"<p>It is important to remember that in an IF ELSE statement, each expression is evaluated sequentially. Once an expression evaluates to TRUE (or a non-zero number), all subsequent expressions are ignored. So, when you are creating an IF ELSE statement, it is critical to think about the order of the expressions to make sure each expression gets it's fair shake.</p> <p>The following example contains multiple expressions to test the property of a number stored in <code>x</code>. Here we make extensive use the <code>mod</code> function, which returns the remainder after division (modulo operation). This is a very useful function to help identify even or odd numbers , or even perfect squares and powers of two (1).</p> <ol> <li>For example, <code>mod(x,2)</code> returns the remainder after dividing by 2. So, this expression returns a <code>1</code> if <code>x</code> is odd, and a <code>0</code> if <code>x</code> is even. Similarly, <code>mod(x,1)</code> is useful for identifying whole numbers. In this case, it returns a 0 if <code>x</code> is a whole number, and a fractional number otherwise. Remember, expressions in IF ELSE must resolve to zero or a non-zero number.</li> </ol> <p>Here is some terminology and facts to recall as you review the following code:</p> <ul> <li>Prime Number: a number divisible only by itself and 1. <code>1</code> is not a prime number, but <code>2</code> is. The rest of the prime numbers are odd numbers.</li> <li>Perfect square: a number that when you take the square root, you get a whole number. e.g.\u00a0\\(\\sqrt 4 = 2\\), so <code>4</code> is a perfect square.</li> <li>Power of 2: a number in the form \\(2^n\\). e.g. \\(2^3=8\\) so\u00a0<code>8</code> is a power of 2.</li> </ul> IF ELSE with Multiple expressions<pre><code>x = 19\nif isprime(x) % tests whether a number is prime (1)\n    str = 'a prime number';\nelseif ~mod(sqrt(x),1) % tests for a perfect square (2)\n    str = 'a perfect square'\nelseif ~mod(log2(x),1) % tests for a power of 2 (3)\n    str = 'a power of 2'\nelse\n    str =  'none of the above';\nend\n\nfprintf('%d is %s\\n', x, str) % fprintf outputs directly to the command window\n</code></pre> <ol> <li>The function isprime tests whether the number is prime.</li> <li><code>~mod(sqrt(x),1)</code> - A perfect square should be a whole number after taking the square root. So, in this syntax, we take the square root of the inputted number, x, and then ask if there is any remainder after dividing by 1. If the square root is not a whole number (like <code>1.4142</code>), then we would get a remainder (like <code>0.4142</code>). Whole numbers will return a zero after division by 1 (no remainder). So,  we apply a logical NOT (<code>~</code>) to the output to make this expression resolve to true when we do get a whole number.</li> <li><code>~mod(log2(x),1)</code> - A number that is a power of 2 should return a whole number when plugged into <code>log2</code>. <code>mod(x,1)</code> returns 0 for whole numbers, so we apply a logical NOT to the output.</li> </ol> <p>So, for the value <code>19</code>, the <code>isprime(x)</code> expression would resolve to true, and <code>str</code> would be set to 'a prime number' because 19 is a prime number. No other expressions would be tested.</p> <p>For the value <code>9</code>, the first expression would resolve to FALSE (<code>9</code> is not prime), but the second expression would resolve to TRUE, and <code>str</code> would be set to 'a perfect square` (1). The third expression would be ignored.</p> <ol> <li><code>9</code> is of course a perfect square: <code>3 x 3</code></li> </ol> Challenge: The trouble with 16 QuestionAnswer <p>Is 16 a perfect square? (1)</p> <ol> <li>Yes. \\(4 * 4=16\\)</li> </ol> <p>Is 16 a power of 2? (1)</p> <ol> <li>Yes. \\(2^4=16\\)</li> </ol> <p>So, what is <code>str</code> set to after running the above IF ELSE statement?</p> <p>Even though 16 is both a Perfect Square and a Power of 2, <code>str</code> will be set to <code>'a perfect square'</code> since that is the first expression encountered that resolves to true. The third expression testing for Powers of 2 will be ignored in this case.</p> Challenge: Odds or Evens QuestionAnswer <p>Review the IF ELSE Statement above and add the following functionality:</p> <ol> <li>Reports if the Number is 'odd, but not prime or a perfect square'</li> <li>Reports if the number is even</li> </ol> <p>Remember that <code>mod(x,2)</code> returns a <code>1</code> if the number is odd.</p> <pre><code>if isprime(x) % tests whether a number is prime\n    str = 'a prime number';\nelseif ~mod(sqrt(x),1) % tests for perfect squares\n    str = 'a perfect square';\nelseif ~mod(log2(x),1) % tests for powers of2\n    str = 'a power of 2!';\nelseif mod(x,2) % tests for odd numbers \n    str = 'odd';\nelse % assumes number is even\n    str =  'even';\nend\nfprintf('%d is %s\\n', x, str) % fprintf outputs directly to the command window\n</code></pre> <ol> <li>Notice the expression to test for 'odd' is after the other expressions. So this will only be reported once testing for the other properties have been exhausted. Remember, <code>1</code> is a power of 2 \u2014 \\(2^0=1\\).</li> <li>Note that we don't have to test whether the number is even. We just assume once all of the other expressions resolve to false, that the number is even, so we place that after the <code>else</code> keyword.</li> </ol>"},{"location":"matlabBasics/ControlFlow/#switch-case","title":"SWITCH CASE","text":"<p>You use SWITCH, CASE statmements when you just want to match the variable contents to a specific value, like 'red'. In fact,  SWITCH, CASE statements are best used when you have an exact value you want matched, such as a word or a number.</p> <p>Anatomy of a SWITCH CASE statement</p> <p>SWITCH CASE statements use the <code>switch</code> and <code>case</code> key words. These Conditional Statements execute depending on the value of the indicated  variable. If the value in variable matches the value in one of the CASE lines, then corresponding block of code is executed. If there are multiple matches, only the first match is executed. If there is no match, the code block following the otherwise keyword is executed. The otherwise keyword is optional, and if not included, and there is not match, the SWITCH CASE statement simply exits and runs no code blocks.</p> <p>switch variable</p> <p>case value 1</p> <p>CODE BLOCK 1</p> <p>case value 2</p> <p>CODE BLOCK 2</p> <p>case value 3</p> <p>CODE BLOCK 3</p> <p>otherwise</p> <p>CODE BLOCK 4</p> <p>end</p> <ul> <li> <p>The variable is indicated immediately after the <code>switch</code> keyword. This tells the statement to inspect the contents of variable. </p> </li> <li> <p>The potential values are listed after each <code>case</code> keyword.</p> </li> <li>If the value matches the content of the variable, the block of code immediately following the value  is executed.</li> <li>Only one CODE BLOCK is executed per run.   </li> </ul> <p>Consider the following example</p> Example: Switch, Case<pre><code>x = 'red' % set x to the char array 'red'\n\nswitch x\n    case 'red'\n        str = 'Roses are red';\n    case 'green'\n        str = 'Stems are green';\n    case 'blue' \n        str = 'Violets are blue';\n    case 7\n        str = 'Seven is a number'\n    otherwise\n        str = 'try again'\nend\n\nfprintf('%s', str) % output string to command window\n</code></pre> <p>Since the variable  <code>x</code> was assigned the character array 'red', before the SWITCH CASE statement, only the code on line 5 will run: <code>Roses are red')</code>. If you change <code>x</code> to 'green', 'blue', or 7, then that corresponding line of code will run (lines 7 and 11, respectively). If you change <code>x</code> to anything else, like 'moon' or 4, then the otherwise code block <code>display('try again')</code> will run (line 13). IMMPORTANT: SWITCH CASE statements are case-sensitive. So, you if you change <code>x</code> to 'Red', the otherwise code block will execute.</p> Challenge: You're on the case ChallengeAnswer <p>Add two additional cases to the SWITCH CASE statement that do the following</p> <ol> <li>For 'magenta', set the variable <code>str</code> to 'Magenta is Magnificent'</li> <li>For either 'orange' or 'yellow' (case statements can be cell arrays to indicate multiple options), set <code>str</code> to 'Orange you glad you chose yellow (or orange)'</li> </ol> <p>Additional Changes:</p> <ul> <li>Remove the case for 7</li> <li>Use the function <code>inputdlg</code> to request a string from the user. Assign the output from the function to <code>x</code></li> <li>Use the function <code>lower</code> on <code>x</code> so all characters in the string are lowercase.</li> </ul> Example: Switch, Case<pre><code>x = inputdlg('Enter a color') % get input from User, returns a cell array\n\nswitch lower(x{:}) % notice the indexing of x\n    case 'red'\n        str = 'Roses are red';\n    case 'green'\n        str = 'Stems are green';\n    case 'blue' \n        str = 'Violets are blue';\n    case 'magenta'\n        str = 'Magenta is Magnificent'\n    case {'orange' 'yellow'} % notice the cell array - allows for multiple options\n        str = 'Orange you glad you chose yellow (or orange)'\n    otherwise\n        str = 'try again'\nend\n\nfprintf('%s', str) % output string to command window\n</code></pre> <p>Here we use <code>inputdlg</code> to request a string from the user. Notice that we enter a prompt string to tel the user what to enter: <code>Enter a color</code>. </p> <p><code>inputdlg</code> returns a cell array, so we need to extract the contents of the cell using the curly brackets: <code>x{:}</code>. The contents from the x are then run through <code>lower</code> to change all characters to lowercase. Since <code>inputdlg</code> captures string arrays by default, we needed to remove the case for 7. If we wanted to have cases for numbers, we would need more complicated syntax, and we don't want that.  </p> <p>For Orange or Yellow, we use a cell array for the case value: <code>{'orange' 'yellow'}</code>. This case will run for either 'orange' or 'yellow'.</p> <p>Finally the function <code>fprintf</code> displays the string in the command window. We could have just as easily used <code>display</code>: <code>disp(str</code>)</p>"},{"location":"matlabBasics/ControlFlow/#loops","title":"Loops","text":"<p>Looping Statements are used to repeatedly execute the same code block over and over while modifying the values of certain variables. Computers are really good at repeating tasks over and over, sometimes to a fault.</p>"},{"location":"matlabBasics/ControlFlow/#for-loops","title":"FOR LOOPS","text":"<p>FOR LOOPS are used to repeatedly execute a CODE BLOCK for a predetermined number of times.</p> <p>Anatomy of a FOR LOOP</p> <p>A FOR LOOP statement is bracketed by the <code>for</code> and <code>end</code> keywords. In between is the block of code that is run repeatedly.</p> <p>for index = values</p> <p>CODE BLOCK</p> <p>end</p> <ol> <li>Notice immediately following the the <code>for</code> keyword is an initializing statement that resembles a variable assignment</li> <li>This initializing statement determines how many times the LOOP will run</li> <li>The number of times that the loop will run equals the number of columns in values.</li> <li>On each iteration of the loop, the index will pull a value from a subsequent column in values. So, index will have a different value on each iteration. </li> </ol> <p>For example, consider the following:</p> FOR LOOP<pre><code>for i = 1:10\n    fprintf('The value of i is %d\\n',i)\nend\n</code></pre> <p>These 3 lines set up the entire for loop statement.</p> <ul> <li>Line 1 contains the the initializing statement (right after the <code>for</code> keyword). This initializing statement creates a horizontal vector <code>i</code> containing the integers 1 through 10. Since there are 10 horizontal elements, the FOR LOOP will run 10 times.</li> <li>Line 2 contains the executed line of code: <p><code>fprintf('The value of i is %d',n)</code></p> </li> <li>In Line 2, the variable <code>i</code> refers to current element in the vector set-up in in the initializing statement. So, on the first loop, <code>i</code> equals 1. On the second loop, <code>i</code> equals 2, etc.</li> </ul> <p>After the above FOR LOOP is complete, you should see the following output in the command window:</p> Output after FOR LOOP<pre><code>The value of i is 1\nThe value of i is 2\nThe value of i is 3\nThe value of i is 4\nThe value of i is 5\nThe value of i is 6\nThe value of i is 7\nThe value of i is 8\nThe value of i is 9\nThe value of i is 10\n</code></pre> <p>...This output is the result of executing the <code>fprintf</code> function over and over again while only changing the value of <code>i</code> on each iteration.</p> <p>Important Notes About For Loops</p> <ul> <li> <p>FOR LOOPS will loop the number of times equal to the number of columns in the array of the initializing statement (not the maximum value in the array)</p> </li> <li> <p>You can use any variable name in the initializing statement (n and i are popular variable names for FOR LOOPS), or you could even use a vector array that has already been created</p> </li> <li> <p>The FOR LOOP initializing array does not have to start with the value 1</p> </li> </ul>"},{"location":"matlabBasics/ControlFlow/#challenge-for-loop","title":"Challenge - For Loop","text":"QUESTIONAnswer <p>How many times will the following FOR LOOP loop?</p> <pre><code>for m = 2:2:10\n    fprintf('The value of m is %d\\n',m)\nend\n</code></pre> <ul> <li>Also, what will be displayed in the command window after execution of the FOR LOOP is complete?</li> </ul> <ul> <li>This FOR LOOP loop will loop 5 times</li> <li>The following will be displayed:</li> </ul> result<pre><code>The value of m is 2\nThe value of m is 4\nThe value of m is 6\nThe value of m is 8\nThe value of m is 10\n</code></pre>"},{"location":"matlabBasics/ControlFlow/#preallocation","title":"Preallocation","text":"<p>FOR LOOPS are often used to fill arrays in some sequential fashion, such as element-by-element or row-by-row. When doing this, you should always preallocate the array, meaning that you should create an empty array that already contains the number of elements that you want to end up with. Then, during the execution of the loop, you simply fill each element of the array with the data that you want. If you know how big your final array is going to be, preallocation is easily accomplished using the function zeros, which creates an array filled with zeros.  If you don't preallocate, MATLAB has to create a copy of the variable on each iteration of the loop which takes more time and uses more memory.</p> <p>For  example, the following creates an array i with 10 zeros</p> <pre><code>i = zeros(1,10)\n</code></pre> result<pre><code>i =\n    0     0     0     0     0     0     0     0     0     0\n</code></pre> <p>You can fill the elements of i using a FOR LOOP as follows:</p> <pre><code>for n = 1:10\n i(n) = n*10\nend\n</code></pre> <p>On each iteration of the loop, you fill one element and get an output that looks like the following</p> Filling an array using a FOR LOOP<pre><code>i =\n    10     0     0     0     0     0     0     0     0     0 % iteration 1\ni =\n    10    20     0     0     0     0     0     0     0     0 % iteration 2\ni =\n    10    20    30     0     0     0     0     0     0     0 % iteration 3\ni =\n    10    20    30    40     0     0     0     0     0     0 % iteration 4\ni =\n    10    20    30    40    50     0     0     0     0     0 % iteration 5\ni =\n    10    20    30    40    50    60     0     0     0     0 % iteration 6\ni =\n    10    20    30    40    50    60    70     0     0     0 % iteration 7\ni =\n    10    20    30    40    50    60    70    80     0     0 % iteration 8\ni =\n    10    20    30    40    50    60    70    80    90     0 % iteration 9\ni =\n    10    20    30    40    50    60    70    80    90   100 % iteration 10\n</code></pre> <p>\u2026As you can see in the Command Window output, each run of the FOR LOOP adds a multiple of <code>n</code> into the nth element of <code>i</code>. Notice how the zeros are being replaced with the data.</p>"},{"location":"matlabBasics/ControlFlow/#vectorization","title":"Vectorization","text":"<p>The term vectorization refers to the creation an array simply by using the MATLAB syntax of array creation (without the use of a FOR LOOP). Indeed, it is often possible to create an array without needing a FOR LOOP in MATLAB. This is known as vectorizing a FOR LOOP. You should always try to vectorize your code whenever possible as the vectorized form of the code can run faster than the FOR LOOP form.</p> <p>For example,</p> <pre><code>j = [1:10] * 10\n\nj =\n    10    20    30    40    50    60    70    80    90   100\n</code></pre> <p>\u2026accomplishes the same thing as the previous loop, but uses only one line of code and no looping.</p>"},{"location":"matlabBasics/ControlFlow/#combining-conditional-statements-and-for-loops","title":"Combining Conditional Statements and FOR LOOPS","text":"<p>Control Flow statements are often used in combination. Consider the following:</p> a FOR LOOP containing an IF ELSE statement<pre><code>for x = 1:10\n    if mod(x,2) % test for odd numbers\n        eo = 'odd';\n    else % if not odd, its even\n        eo = 'even';\n    end\n\n    fprintf('\\nThe number %d is %s\\n',x,eo)\nend\n</code></pre> <p>\u2026This FOR LOOP runs 10 times. On each iteration, the IF, ELSE conditional statement checks whether the current value of <code>x</code> is odd or even and sets the value of <code>eo</code> accordingly. The function <code>fprint</code> prints the result to the command window as follows</p> result<pre><code>The number 1 is odd\nThe number 2 is even\nThe number 3 is odd\nThe number 4 is even\nThe number 5 is odd\nThe number 6 is even\nThe number 7 is odd\nThe number 8 is even\nThe number 9 is odd\nThe number 10 is even\n</code></pre>"},{"location":"matlabBasics/ControlFlow/#while-loops","title":"WHILE LOOPS","text":"<p>WHILE LOOPS are used to repeatedly execute a block of code until a condition is met.</p> <p>Anatomy of a WHILE LOOP</p> <p>WHILE LOOPS are bracketed by the while and end keywords. The while keyword is followed by an expression that resolves to <code>true</code> or <code>false</code></p> <p>while expression</p> <p>CODE BLOCK</p> <p>end</p> <p>WHILE LOOPs loop indefinitely until the expression resolves to <code>false</code>. On each iteration of the WHILE LOOP, the expression is evaluated. If the expression evaluates to <code>true</code>, then the looping continues.  So, the variable being evaluated in the expression must change in the block of code for the looping to ever stop. This also means that if you are not careful with your code and the expression never resolves to <code>false</code>, the WHILE LOOP will NEVER STOP LOOPING!</p> <p>Breaking out of Stuck WHILE LOOPS</p> <p>Sometimes while loops can be trapped in an unbreakable loop (usually due to shoddy programming). To force a break out from a while loop, enter  <code>Ctrl-C</code>.</p> <p>Consider the following:</p> Example: WHILE LOOP<pre><code>n = 1\nwhile n&lt;10\n    disp(n)\n    n = n+1;\nend\n</code></pre> <p>This loop simply displays the value of n each time the loop iterates. And then increments the value of <code>n</code> by 1. Notice that the code inside the loop does not execute once the value of n reaches 10. Once n=10, the expression <code>n&lt;10</code> resolves to FALSE and the loop stops executing (and doesn't execute the code after the WHILE line).</p>"},{"location":"matlabBasics/ControlFlow/#challenge-while-loop-1","title":"Challenge - While LOOP 1","text":"QuestionAnswer <p>How would you change the above example to make the WHILE LOOP stop iterating after the value of <code>n</code> reaches 20?</p> <p>You change the expression to <code>n&lt;20</code></p> <pre><code>n = 1\nwhile n&lt;20\n    disp(n)\n    n = n+1;\nend\n</code></pre> <p>So, why bother with WHILE loops? The code above could easily be accomplished using a FOR LOOP. The main reason that you use a WHILE is for situations when you don't know beforehand when the repeating code should stop executing.</p> <p>Consider the following code which the simulates the sequential rolling of a die until a 5 is rolled</p> Example: WHILE LOOP<pre><code>die = 1; % initial value of die is set to 1\nwhile die ~=7\n    fprintf('You rolled a %d. Try again.\\n',die) % report the die value\n    die = randi(6,1,1); % randomnly assign a new value to the die (1-6)\nend\nfprintf('You rolled a %d. Nice Job!',die);\n</code></pre> <p>When you are rolling an actual die, there is no way to guess when you are going to roll a 5. You just have to roll until you get a 5.</p> <p>In this example, we use the function randi to randomly return an integer between 1 and 6. Each time the WHILE LOOP iterates, randi returns a different integer. The WHILE LOOP will continue to iterate until die is randomly set to the value <code>5</code>.</p> <p>Here is the output I got the last time that I ran the code:</p> WHILE LOOP output<pre><code>You rolled a 1. Try again.\nYou rolled a 1. Try again.\nYou rolled a 2. Try again.\nYou rolled a 1. Try again.\nYou rolled a 1. Try again.\nYou rolled a 5. Nice Job!\n</code></pre> <p>Notice that I needed two calls for <code>fprint</code>: one for inside the LOOP to report the current value of die, prior to changing its value, and one outside of the LOOP to report the final value of the die.</p> <p>If you run this code in MATLAB, you will very likely get a different output. Try it now!</p>"},{"location":"matlabBasics/ControlFlow/#challenge-while-loop-2","title":"Challenge - While LOOP 2","text":"QuestionAnswer <p>What would you change in the code above so that the WHILE LOOP stops iterating after \"rolling\" a 3 instead of a 5?</p> <p>You would Change the conditional expression to:</p> <p><code>while die ~=3</code></p> <p>as follows</p> <pre><code>die = 1; % assign die value of 1\nwhile die ~=3 % &lt;== Change the 5 to a 3 here\n    fprintf('You rolled a %d. Try again.\\n',die) % report the die value\n    die = randi(6,1,1); % randomly assign a new value to the die (1-6)\nend\nfprintf('You rolled a %d. Nice Job!',die);\n</code></pre>"},{"location":"matlabBasics/ControlFlow/#a-more-advanced-while-loop-example","title":"A More Advanced WHILE LOOP Example","text":"<p>Warning. This example involves math.</p> <p>To further explore WHILE LOOPS, let's consider the following the illuminating example:</p> <p>You receive an allowance of <code>$20</code> per week, <code>$6</code> of which you immediately spend on candy and soda. This is a non-negotiable expense. Recently, all your friends got hoverboards, and you want one too. But hoverboards currently cost <code>$100</code>, and you only have <code>$20</code> in your bank account. Worse, due to the surge in popularity, hoverboard prices have been steadily increasing in price by roughly <code>3%</code> each week. You want to know how many weeks it will take to save up for a hoverboard, assuming your allowance and candy and soda expenses remain constant.</p> <p>Manually, you could solve this problem by calculating your weekly net income ($14), adding that amount to your bank account, and then comparing the amount in your bank account to the current price of the hoverboard. Remember, the hoverboard price increases each week, so you will have to recalculate the current price of the hoverboard. If your bank account is less than the amount of the hoverboard, then you recalculate the bank  balance and hoverboard price until you have more money in your bank account than the updated price of the hoverboard. To determine how long this will take, you count the number of times you had to repeat the recalculation process (saved), which is equivalent to the number of weeks until you're cruising on your sweet, sweet hoverboard.</p> <p>A WHILE LOOP can automate the recalculation process as follows:</p> <pre><code>week = 0; % starting at week zero\nbank_account = 20; % current bank balance \ncandy_soda_expense = 6; % non-negotiable weekly expenses\nallowance = 20; % weekly income\nhoverboard = 100; % starting price of the hoverboard\n\nwhile bank_account &lt; hoverboard % iterate while bank account is less than hoverboard price\n    bank_account = bank_account - candy_soda_expense + allowance; % recalculate weekly bank balance\n    hoverboard = hoverboard + hoverboard * 0.03; % price increases by 3% each week\n    week = week + 1; % iterates the week count\nend\n\nfprintf('The number of weeks to save up for a hoverboard is %d.\\nThe price of the hoverboard will be %1.2f.\\nYou will have %1.2f in your bank account\\n', week, hoverboard, bank_account)\n</code></pre> <p>\u2026Prior to the start of the loop, we preallocate several variables that will be used inside the loop.</p> <ul> <li><code>bank_account</code>: keeps track of your current bank balance, starts at $20</li> <li><code>hoverboard</code>: keeps track of the increasing price of hoverboards, starts at $100</li> <li><code>candy_soda_expense</code>: your weekly expense, $6 on candy and soda</li> <li><code>allowance</code>: your weekly income, $20/week</li> <li><code>week</code>: a variable used to track the number of weeks.</li> </ul> <p>At the start of the loop, the WHILE relative expresssion <code>bank_account &lt; hoverboard</code> is evaluated. If bank_account is below hoverboard, the relative operation returns a <code>TRUE</code>, and the LOOP starts. Inside of the loop are the steps need to recalculate the balance in your bank account and the price of hoverboard. On each iteration of the loop, the value of <code>bank_account</code> and <code>hoverboard</code> are recalculated and <code>week</code> increases by 1. If, <code>bank_account &lt; hoverboard</code>, then the WHILE loop continues to iterate. When <code>bank_account &lt; hoverboard</code> is NOT TRUE, the WHILE LOOP code block is skipped and then the line after the WHILE LOOP executes (the line with the function <code>fprint</code>), which prints the results to the command window.  </p> <p>And as we can see below, the result is:</p> Final Result<pre><code>The number of weeks to save up for a hoverboard is 8.\nAt this time, the price of the hoverboard will be 126.68\nand you will have 132.00 in your bank account.\n</code></pre>"},{"location":"matlabBasics/ControlFlow/#challenge-while-loops-3","title":"Challenge - WHILE LOOPS 3","text":"QUESTIONAnswer <p>How many weeks would it take if:</p> <ul> <li>you eliminate your Candy and Soda expense? (and everything else was at the original setting)?</li> <li>You allowance was only $15?</li> <li>The starting price of a Hoverboard was $150?</li> <li>You already had $100 in your bank account?</li> </ul> <p>\u2026When answering the above questions, assume that all other variables are reverted back to their original defaults</p> <p>How many weeks would it take if: (Remember, answer each question assuming all other variables are reverted back to their original defaults).</p> <p>To answer these questions, you simply change the starting values of the variables prior to the start of the WHILE LOOP. Don't change anything inside the loop. Be sure to change all the variables back to the default values, before adjusting the value of any 1 variable. </p> <ul> <li>...your Candy and Soda expense was $0 (and everything else was at the original setting)? <p>5 weeks</p> </li> <li>...your allowance was $15? <p>16 weeks</p> </li> <li>...hoverboards cost $150? <p>16 weeks</p> </li> <li>...your starting bank_account amount was $100 <p>0 weeks. The WHILE LOOP doesn't even start because 100 is NOT less than 100.</p> </li> </ul>"},{"location":"matlabBasics/DataOverview/","title":"Basic Data","text":"<p>A good deal of what we will be doing as we muddle through MATLAB is entering or loading data.</p> <p>But what data?</p> <p>Well, we'll start with the data that you can enter using your keyboard. This type of data can be broken down into three categories:</p> <ol> <li>Numbers</li> <li>Characters</li> <li>Booleans (true or false)</li> </ol> <p>That's it. All the data that we are going to store in variables as we muddle through programming can be whittled down to these three data types.</p> <p>Notice that this page is filled with these data types. There are characters everywhere, including letters, spaces, and punctuation. There are numbers in the numbered list above. And, there is even a boolean at the top of the page. That little switch (  ), next to the Search Bar, is a little on/off switch that be changed to indicate True/False. When it's true, it shows the light mode, when it's false, it shows the dark mode.</p>"},{"location":"matlabBasics/FilesFolders/","title":"Files and Folders","text":"<p>how to find stuff on your computer</p> <p></p>"},{"location":"matlabBasics/FilesFolders/#overview","title":"Overview","text":"<p>Often, you will need to import data into MATLAB and that data will often be stored in the form of a file somewhere on your computer. The good news is that MATLAB knows how to find and handle the files on your computer.</p> <p>In this module, we will learn how to access files from MATLAB using path strings and built-in MATLAB dialog windows. Fortunately, path strings are little more than gussied up character arrays, so this should be relatively straightforward.</p>"},{"location":"matlabBasics/FilesFolders/#terminology-you-should-know","title":"Terminology you should know","text":"<ul> <li>Directory: a folder on your computer</li> <li>Path: a character array that contains the unique location of a file or folder on a computer</li> <li>File Separator: a character (usually a <code>\\</code> or <code>/</code>) that indicates a new folder in a path string</li> <li>Wildcard character: a character that substitutes for any other character or character range in a path string. In MATLAB, this character is an asterisk (*).</li> </ul>"},{"location":"matlabBasics/FilesFolders/#stuff-you-should-know","title":"Stuff you should know","text":"<p>After this module, you should be able to:</p> <ul> <li> <p>Discriminate between path strings from different operating systems based on the file separator used</p> </li> <li> <p>Tell whether the path string points to a folder or to a file</p> </li> <li> <p>Explain the difference between an \"absolute\" and a \"relative\" path</p> </li> <li> <p>Create your own path strings, including paths to files and folders</p> </li> <li> <p>Use all of the Functions listed in this module</p> </li> </ul>"},{"location":"matlabBasics/FilesFolders/#important-functions","title":"Important Functions","text":"<ul> <li>cd - change current folder</li> <li>dir - List folder contents</li> <li>fileparts - Parts of file name and path</li> <li>filesep - File separator for current platform</li> <li>fullfile - Builds a full path from path parts</li> <li>numel - number of array elements</li> <li>pwd - returns a path to the current folder</li> <li>uigetfile - Open File selection dialog box</li> <li>uigetdir - Open Folder selection dialog box</li> <li>userpath - returns the user path</li> <li>readtable - reads in data from a spreadsheet file</li> </ul>"},{"location":"matlabBasics/FilesFolders/#the-matlab-current-folder","title":"The MATLAB Current Folder","text":"<p>When you launch MATLAB, it automatically opens a folder on your hard drive. This folder is known as the \"Current Folder\" and there is a window in MATLAB (titled \"Current Folder\") that shows the contents of this folder.</p> <p></p> <p>Current Folder Path</p> <p>You can find a representation of the location of the \"Current Folder\" on your hard drive just below the Ribbon Tool Strip in the Address field of MATLAB:</p> <p></p> <p>\u2026Here, the address shows the location of the MATLAB folder on my computer, which is the default folder that MATLAB opens.</p> <p>You can change the \"Current Folder\" by clicking on the \"Browse for Folder\" icon   that is to the left of the address bar.</p> <p>Directory vs Folder</p> <p>In this module, we will be using the term \"folder,\" when referring to folders on your computer. But the term \"directory\" is equivalent and often used interchangeably. So, if you start seeing a discussion of directories, that means folders\u2026</p>"},{"location":"matlabBasics/FilesFolders/#now-you-try-review-current-folder","title":"Now You try: Review Current Folder","text":"<ol> <li>Click on the Browse for Folder icon   </li> <li>Select your Documents folder</li> <li>Review the address bar. You should see something like this: </li> <li>Review the contents of the \"Current Folder\". You should documents that look specific to your computer.</li> <li>Navigate back to the MATLAB folder (it should be in your documents folder).</li> </ol>"},{"location":"matlabBasics/FilesFolders/#the-path-string","title":"The Path String","text":"<p>A path string is a character array that contains the unique location of a file or folder. This array represents a flattened directory tree hierarchy in which the outermost folder or drive is found on the far left of the array and the innermost folder or file is found on the far right of the array.</p> <p>The function <code>pwd</code> returns the current folder path. This is the path that is displayed in the address bar.</p> pwd returns the current path<pre><code>pwd\n</code></pre> result<pre><code>ans =\n\n'/Users/ernesto/Documents/MATLAB' % current folder path\n</code></pre> <p>\u2026As you can see, the output path from <code>pwd</code> is a character array which represents the location of the current folder.</p> <p>The function <code>userpath</code> returns the path of the default folder that MATLAB opens (a.k.a the user folder)</p> Get default Current Folder<pre><code>userpath\n</code></pre> result<pre><code>ans =\n\n    '/Users/ernesto/Documents/MATLAB'\n</code></pre> <p>\u2026this just happens to be the same path that is returned by <code>pwd</code>, because you haven't changed the current folder yet.</p> <p>NOTE: Folder vs File paths</p> <p>A path to a folder vs a path to a file look nearly identical. Both start with a series a folder names. The only way to differentiate between the two is to look at the last name in the string. If the name contains an extension (a period, followed by a series of characters, like .txt), then it is likely a file. If there is no extension, then it is likely a folder.</p>"},{"location":"matlabBasics/FilesFolders/#the-file-separator","title":"The File Separator","text":"<p>The file separator is the character that separates individual folder and file names in a path string. This character differs between MAC and PC.</p> <p>You can use the function <code>filesep</code> to return the correct slash for your operating system:</p> <pre><code>filesep\n</code></pre> result<pre><code>ans =\n\n/ % forward slash on macOS systems\n</code></pre>"},{"location":"matlabBasics/FilesFolders/#mac-vs-pc-file-separators","title":"Mac vs PC File separators","text":"<p>On a Mac (and unix), folders and files are separated  by a forward slash (<code>/'). On PCs, they are separated by a backward slash (\"\\\\\") and drives are indicated by a colon (</code>:<code>) or a double backward slash (</code>\\`).</p> <p>Consider the following representation of a folder hierarchy:</p> Folder tree hierarchy representation<pre><code>Users\n |-- ernesto\n |   |-- Documents\n |   |   |-- MATLAB\n</code></pre> <p>In the above representation, the top name is the top folder and each folder below that is a folder inside the folder above it. So, in this example, the \"MATLAB\" folder is in the \"Documents\" folder, which is in the \"ernesto\" folder, which is in the \"Users\" folder.</p> <p>To represent this hierarchy on a Mac you use a one-line character array (vector) and separate the folders using forward slashes:</p> macOS path<pre><code>'/Users/ernesto/Documents/MATLAB'\n</code></pre> <p>This character array points to the MATLAB folder in the above tree hierarch which is found in the <code>Documents</code> folder, which is in the <code>ernesto</code> folder in the <code>Users</code> folder</p> <p>On a PC, you use back slashes (<code>\\</code>) as file separators, so a similar folder hierarchy on a PC might be saved as the following path string:</p> PC path<pre><code>'C:\\Users\\Ernesto\\Documents\\MATLAB'\n</code></pre> <p>This above path points to the MATLAB folder in the Documents folder in the Ernesto folder in the Users folder on the C Drive.</p> <p>Absolute vs Relative Paths</p> <ul> <li>An absolute path contains the full path information from the hard drive on down to the folder of interest. For example, the path <code>'/Users/ernesto/Documents/MATLAB'</code> points to the folder \"MATLAB\", which is in the \"Documents\" folder, which is in the \"ernesto\" folder, which is in the \"Users\" folder, which is on the main hard drive or root folder (which is represented by the first file separator, '/'). You can use an absolute file path to find a file from anywhere on your computer.</li> <li>A relative path is relative to the \"Current Folder\" in MATLAB. For example, in my MATLAB folder, there is a folder called \"Wild Mice\" (see above). A relative path to this folder would simply be <code>'Wild Mice'</code>. In this case, MATLAB assumes the top folder to be the MATLAB folder. In side the \"Wild Mice\" folder is a folder called \"wmdb\". The relative path to this folder is <code>'Wild Mice/wmdb</code>.</li> </ul> <p>It is usually best to use absolute paths, but sometimes relative paths are useful or even unavoidable.</p>"},{"location":"matlabBasics/FilesFolders/#copying-file-paths","title":"Copying File Paths","text":"<p>One of the easiest ways to create a file path is to simply copy the path.</p> <p>You can find the path to the \"Current Folder\" by clicking on the blue folder in the address bar:</p> <p></p> <p>This will convert the display to a string that is already conveniently highlighted and can be copied using standard PC operations (e.g. control-c)</p>"},{"location":"matlabBasics/FilesFolders/#try-it-now-assign-current-folder-path-to-a-variable","title":"Try It Now: Assign current folder path to a variable","text":"<p>Assign the Current the folder path to a new variable mycurrentfolder using the following steps:</p> <ol> <li>Copy the address from the address bar</li> <li>In the command window, create a variable called <code>mycurrentfolder</code></li> <li>Assign to this variable the string you just copied. Don't forget the single quotes</li> </ol> <p>You should enter something like this:</p> <pre><code>mycurrentfolder = '/Users/ernesto/Documents/MATLAB'\n</code></pre> <p>and get something like this:</p> <p>result<pre><code>mycurrentfolder =\n\n    '/Users/ernesto/Documents/MATLAB'\n</code></pre> \u2026 This is a path string, plain and simple. Notice that it is identical to the output from <code>pwd</code>.</p>"},{"location":"matlabBasics/FilesFolders/#copying-paths-from-your-computer","title":"Copying Paths from your computer","text":"<p>Both Mac and PC allow you to copy file paths to files using their system file browsers. You then simply paste the path as a character array in MATLAB and then assign to a variable, as we did above.</p> <p>To do this:</p> <ul> <li> <p>In the Mac Finder, option-right-click on a file and select the menu item to capture item as a \"pathname.\"</p> </li> <li> <p>In the Windows File Explorer, shift-right-click on a file and select the \"copy as path\" menu-item</p> </li> </ul> <p>When creating file paths in MATLAB, don't forget that paths need to be character arrays, so they need be bracketed by single quotes:</p> <pre><code>file_path = '/Users/ernesto/Documents/MATLAB/my_cool_file.txt'\n</code></pre>"},{"location":"matlabBasics/FilesFolders/#prompting-users-to-select-files-or-folders","title":"Prompting Users to Select Files or Folders","text":"<p>When running code, you often need your file paths to be generated programmatically (not copied and pasted manually). This is especially important as different computers will have different folder names and hierarchies, and different operating systems use different file separators (forward vs backward slashes).</p> <p>Luckily there are many different functions that you can use to generate these paths for you. One way to do this is to use the System File Browser to select and open a file on a computer.</p> <p>In MATLAB, we use two main functions to bring up the file browser:</p> <ol> <li><code>uigetdir</code>: For selecting folders</li> <li><code>uigetfile</code>: For selecting files</li> </ol> <p>Both functions work fairly similar in that they bring up the system file browser dialog, which allows the user to select a file or a folder. Once the User selects \"OK\", the function saves the name of the file or the folder and the path to separate variables.</p>"},{"location":"matlabBasics/FilesFolders/#generating-folder-paths-using-the-file-browser","title":"Generating Folder paths using the File Browser","text":"<p>To get the path to a folder using the system file browser, we use the function <code>uigetdir</code>, as follows:</p> Get Folder Path<pre><code>weather_folder = uigetdir(pwd,'Find the Weather Folder')\n</code></pre> <p>After a call to uigetdir, you will get a file browser, like so:</p> <p></p> <p>\u2026Notice that you are unable to select any files (here, all of the files are grayed-out). </p> <p>If you choose a folder with the system browser and select \"Open\", then the function will assign the folder path to the indicated variable.</p> <p>In this example, we selected the \"weather_data\" folder (it's highlighted in blue) and then we  clicked on the \"Open\" button. After doing so, we get a result like this:</p> result<pre><code>weather_folder =\n    '/Users/ernesto/Documents/Unit 1/weather_data'\n</code></pre> <p>\u2026The variable <code>weather_folder</code> contains the path to the folder that was selected. Notice that the appropriate file separators (forward slashes in this case) are incorporated into the path</p>"},{"location":"matlabBasics/FilesFolders/#generating-file-paths-using-the-file-browser","title":"Generating File paths using the File browser","text":"<p>If we want to generate a path to a file using the file browser, then we use the function  <code>uigetfile</code>.</p> <p>Consider our \"weather_data\" folder again:</p> Folder containing 10 files <p>There are 10 <code>*.csv</code> files (1) in this 'weather_data' folder. We can use the function <code>uigetfile</code> to bring up the system file browser and prompt the user to navigate to this Weather Data folder and select one of the files.</p> <ol> <li> A <code>*.csv</code> file is a spreadsheet format (comma separated values).</li> </ol> Use uigetfile to Prompt user to select a file<pre><code>[Filename, Pathname] = uigetfile('*.csv')\n</code></pre> <p>This code will brings up the system specific file browser and allow the user to select a file. The input <code>'*.csv'</code> indicates that the dialog window should only display or highlight <code>*.csv</code> files. The asterisk in this string is a wildcard character that means \"any file name\". The output variables  <code>Filename</code> and <code>Pathname</code> are assigned only after the user selects a file and clicks on open.  </p> <p>After we execute the <code>uigetfile</code> function, we get the system file browser dialog window:</p> uigetfile system file browser (on a Mac) <p>If we select the \"w2013.csv\" file and then click on the \"Open\" button, the <code>uigetfile</code> function assigns the file name and path to the variables <code>Filename</code> and <code>Pathname</code>.</p> Variable Assignment after uigetfile function execution<pre><code>Filename =\n\n    'w2013.csv'\n\nPathname =\n\n    '/Users/ernesto/Documents/Unit 1/weather_data/'\n</code></pre> <p>\u2026Notice that the function actually returns the path as two parts: the filename (replete with extension) and the folder path.</p> <p>Warning: File not opened after uigetfile</p> <p>After running <code>uigetfile</code>, the file itself is NOT opened. We are just collecting the filename and the path of the file as character arrays.  To actually load the data from a file, you would need to run a function specific to the file type. For example, the function <code>readtable</code> reads spreadsheet files, while the function <code>imread</code> reads image files. Both of these functions take a file path as their input.</p> <p>Note: The output from uigetfile is set to ZERO if you select Cancel. If you cancel the dialog box, the output variables (<code>Filename</code> and <code>Pathname</code>) will be set to ZERO. This is useful for control flow statements, as zeros resolve to a <code>FALSE</code>. For example, you could follow a uigetfile call with an IF ELSE statement, as follows:</p> Using uigetfile outputs in in a control flow<pre><code>if Filename % if any text in filename, execute\n    load(Filename)\nelse\n    display('load canceled')\nend\n</code></pre>"},{"location":"matlabBasics/FilesFolders/#functions-that-merge-or-breakup-paths","title":"Functions that Merge or Breakup Paths","text":""},{"location":"matlabBasics/FilesFolders/#generating-a-full-file-path-using-fullfile","title":"Generating a Full File Path using fullfile","text":"<p>After we use <code>uigetfile</code>, we get the file path in two parts: the filename and the path to the file. How do we merge the data into a full path? One way might be to use our concatenating skills to concatenate the different strings. But you will have make sure to use the right file separators at the right locations.</p> <p>An easier way to do to merge two pieces of information into a file path is to use the function <code>fullfile</code>. For example, we can take the outputs from <code>uigetfile</code>, <code>Filename</code> and <code>Pathname</code>, and stitch them into a proper full path, as follows</p> Build-a-Path using fullfile<pre><code>full_file_path = fullfile(Pathname, Filename)\n</code></pre> result<pre><code>full_file_path =\n\n    '/Users/ernesto/Documents/Unit 1/weather_data/w2013.csv'\n</code></pre> <p>\u2026Voila! <code>full_file_path</code> contains the full path  to the 'w2013.csv' file with the proper file separators</p>"},{"location":"matlabBasics/FilesFolders/#breaking-down-a-path-for-its-parts","title":"Breaking down a Path for its parts","text":"<p>Sometimes you want to take a full path and break it down into the folder path and the file name.</p> <p>The function  <code>fileparts</code> does exactly this: it breaks down the path of a file into its \"parts\", such as the full folder path and the file name. This function accepts a path string as an input and returns the full path of the folder and the name of the file, as follows:</p> Breaking down a full path<pre><code>file_path = '/Users/ernesto/Documents/MATLAB/my_cool_file.txt'; % create a full path\n[path, folder_name] = fileparts(file_path) % break down that path into its constituent parts\n</code></pre> result<pre><code>path =\n\n/Users/ernesto/Documents/MATLAB\n\n\nfolder =\n\nmy_cool_file\n</code></pre> <p>\u2026The variable <code>path</code> contains the full path string to the folder while <code>folder</code> contains the name of the current folder.</p>"},{"location":"matlabBasics/FilesFolders/#getting-the-extension-part","title":"Getting the extension part","text":"<p>Notice in the above example, that filename does not contain the extension. If you would like the extension, then you simply need to add another output to <code>fileparts</code>, as follows:</p> Get the extension too<pre><code>[path, folder_name, ext] = fileparts(file_path)\n</code></pre> result<pre><code>path =\n\n    '/Users/ernesto/Documents/MATLAB'\n\nfolder_name =\n\n    'my_cool_file'\n\next =\n\n    '.txt'\n</code></pre>"},{"location":"matlabBasics/FilesFolders/#getting-just-the-folder-name-part","title":"Getting just the folder name part","text":"<p>Remember, not all paths point to a file. A folder path just points to a folder. If you want the name of that folder, you can use <code>fileparts</code> as follows:</p> Get Folder Name<pre><code>[folder_path, folder_name] = fileparts(pwd)\n</code></pre> result<pre><code>folder_path =\n\n    '/Users/ernesto/Documents'\n\nfolder_name =\n\n    'MATLAB'\n</code></pre> <p>\u2026In this code, we input the function <code>pwd</code>, which returns the folder path to the current folder. In this example, this path is '/Users/ernesto/Documents/MATLAB'. So, <code>fileparts</code> returns the path to the folder containing the MATLAB folder (<code>'folder_path'</code>) and the name of the current folder (<code>'MATLAB'</code>)</p> <p>Example: Using a Folder Name in a Control Flow Sequence</p> <p>Getting just parts of a path string is useful for programmatic situations where you just need the folder or file name. Consider the following control flow statement, which tests whether the current directory is the MATLAB folder using the <code>strcmp</code> function</p> <p><pre><code>if strcmp(folder_name, 'MATLAB')\n    display('Great! You are in the right folder.')\nelse\n    display('Whoops, you are not in the MATLAB folder. Please Navigate to the MATLAB folder')\nend\n</code></pre> \u2026In this example, since folder_name contains 'MATLAB', then the first code block will be executed.</p>"},{"location":"matlabBasics/FilesFolders/#functions-that-do-folder-stuff","title":"Functions that do Folder Stuff","text":"<p>Once you have identified a folder, and have its path, there are several functions that you can use to explore the contents of the folder.</p>"},{"location":"matlabBasics/FilesFolders/#change-the-current-folder-cd","title":"Change the Current Folder (cd)","text":"<p>The function <code>cd</code> programmatically changes the current directory. The input is a folder path. In this example,  we will use <code>weather_folder</code>, which we previous set to be '/Users/ernesto/Documents/Unit 1/weather_data'.</p> Change Directory<pre><code>cd(weather_folder)\n</code></pre> <p>\u2026After executing this function, the current folder will now be 'weather_data'. You can check this result by inspecting the MATLAB address bar:</p> <p></p>"},{"location":"matlabBasics/FilesFolders/#getting-information-on-a-file","title":"Getting information on a File","text":"<p>The function <code>dir</code> returns information on a file or on the contents of a folder. </p> <p>To get information on a file, you input a file path, as follows</p> Getting info on a file<pre><code>contents = dir('/Users/ernesto/Documents/Unit 1/weather_data/w2013.csv')\n</code></pre> result<pre><code>contents = \n\n       name: 'w2013.csv'\n       date: '20-Jun-2015 15:18:28'\n      bytes: 3256\n      isdir: 0\n    datenum: 7.3614e+05\n</code></pre> <p>\u2026Here the function <code>dir</code> returns a structure,<code>contents</code>, which contains information on the file 'w2013.csv'.</p> <p>The structure array <code>contents</code> has 5 fields:</p> <ul> <li> <p>name - the name of the file</p> </li> <li> <p>date - the modification date of the file</p> </li> <li> <p>bytes - the size of the file</p> </li> <li> <p>isdir - logical array that contains TRUE if the item is a folder</p> </li> <li> <p>datenum - A Modification date as serial date number</p> </li> </ul> <p>dir knows the current folder</p> <p>If the MATLAB current folder contains the file you want information about, then you can simply enter the name of the file. Since we already set the 'weather_data' folder as the current folder using the function cd, we can just input file name into dir, as follows::</p> <p><pre><code>contents = dir('w2013.csv')\n</code></pre> result<pre><code>contents = \n\n    name: 'w2013.csv'\n    date: '20-Jun-2015 15:18:28'\n    bytes: 3256\n    isdir: 0\n    datenum: 7.3614e+05\n</code></pre></p> <p>To access the data in contents, you use dot notation as you normally would with a structure:</p> <pre><code>contents.name\nans =\n\nw2013.csv\n</code></pre> <p>\u2026Here we get the file name as a character array.</p>"},{"location":"matlabBasics/FilesFolders/#getting-info-on-all-folder-content","title":"Getting Info on All Folder Content","text":"<p>Sometimes, you want information about all of the contents inside a folder. The function <code>dir</code> can do that too. Just input a folder path:  </p> Get Info on Folder content<pre><code>contents = dir('/Users/ernesto/Documents/Unit 1/weather_data')\n</code></pre> <p>Or, since we are already in the 'weather_data' folder, we can just enter the function name without an input:</p> <pre><code>contents = dir\n</code></pre> <p>Either way we get the following result:</p> result<pre><code>contents = \n\n  14\u00d71 struct array with fields:\n\n    name\n    folder\n    date\n    bytes\n    isdir\n    datenum\n</code></pre> <p>\u2026Notice that we get a 14X1 structure array. This means that the function <code>dir</code> found 14 items in the 'weather_data' folder. However, not everything it finds is an actual file.</p>"},{"location":"matlabBasics/FilesFolders/#extracting-data-about-a-file-or-folder-from-the-contents-structure-array","title":"Extracting data about a file or folder from the <code>contents</code> structure array","text":"<p>Since, the variable <code>contents</code> is simply a structure array, we can index it like we would any structure array.</p> <p>For example, to return the fifth element in the structure array, you index as normal:</p> Index the 5th element in the structure<pre><code>contents(5)\n</code></pre> result<pre><code>ans = \n\n       name: 'w2009.csv'\n       date: '20-Jun-2015 15:18:30'\n      bytes: 3163\n      isdir: 0\n    datenum: 7.3614e+05\n</code></pre> <p>\u2026The result is a 1X1 structure array with details about the fifth file.</p> <p>Similarly, to extract the name of the 6th file, you combine indexing and dot notation as follows:</p> Index name of 6th file<pre><code>contents(6).name\n</code></pre> result<pre><code>ans =\n\nw2010.csv\n</code></pre> <p>\u2026The result here is a character array (the content inside the name field in the 6th element of the structure array).</p>"},{"location":"matlabBasics/FilesFolders/#extracting-data-across-multiple-elements-in-the-contents-structure","title":"Extracting data across multiple elements in the <code>contents</code> structure","text":"<p>Sometimes, you need to get information across multiple elements in the structure array---like the names of the contents in the folder.</p> <p>You're instinct might be to simply use dot notation, as follows</p> Dot Notation of a Structure<pre><code>contents.name\n</code></pre> result<pre><code>ans =\n\n    '.'\n\n\nans =\n\n    '..'\n\n\nans =\n\n    '.MATLABDriveTag'\n\n\nans =\n\n    'w2005.csv'\n... % and so on\n</code></pre> <p>\u2026The problem with this approach is that you just get a comma-separated list, with the individual spit out one after the other.</p> <p>Instead, it's usually better to concatenate this data into a cell array, using the following syntax:</p> Concatenate content names in a cell array<pre><code>{contents.name}'\n</code></pre> <p>This syntax concatenates the output into a cell array, transposes it, and then displays it in the command window, as follows:</p> Names of the content in the folder<pre><code>ans =\n\n    {'.'              }\n    {'..'             }\n    {'.DS_Store'      }\n    {'.MATLABDriveTag'}\n    {'w2005.csv'      }\n    {'w2006.csv'      }\n    {'w2007.csv'      }\n    {'w2008.csv'      }\n    {'w2009.csv'      }\n    {'w2010.csv'      }\n    {'w2011.csv'      }\n    {'w2012.csv'      }\n    {'w2013.csv'      }\n    {'w2014.csv'      }\n</code></pre> <p>Now that we can see all of the names of the content, notice that only the last 10 elements refer to an actual file (a .csv file). The rest of the elements are information on hidden files (files whose file names start with a period) and two navigation names: '.' and '..', which refer to the current directory and the directory above it, respectively (1).</p> <ol> <li>Don't worry about these navigation names too much. They are a confusing to use.</li> </ol>"},{"location":"matlabBasics/FilesFolders/#using-the-wildcard-character-in-dir","title":"Using the Wildcard character in dir","text":"<p>Since we typically don't want to deal with directory navigation tools or hidden files, it is usually better practice to specify what information you want <code>dir</code> to return.</p> <p>The simplest way to do this is to indicate the file extension for the files that you want <code>dir</code> to find. However, if you just entered '.csv' then <code>dir</code> would look for a file called '.csv', which would actually be a hidden file and you probably wouldn't get any results.</p> <p>What you really want <code>dir</code> to search for is any file name then ends with a '.csv'. To do this, you use the asterisk in the file name.The function <code>dir</code> interprets the asterisk in a file name as a wildcard character. Whenever you include an asterisk, that means 'any character or characters'.</p> <p>For example, to find all the files in the current folder that end with a <code>.csv</code>, use the following syntax.</p> Get info on files with the .csv extenstion<pre><code>contents = dir('*.csv')\n</code></pre> result<pre><code>contents = \n\n10x1 struct array with fields:\n\n    name\n    date\n    bytes\n    isdir\n    datenum\n</code></pre> <p>Now we get a 10X1 structure array. This means that there are 10 files with the <code>.csv</code> extension in the \"Current Folder\". The function <code>dir</code> ignores all of the hidden files and directories</p>"},{"location":"matlabBasics/FilesFolders/#loading-files","title":"Loading Files","text":"<p>Up to this point, we have been just creating file paths, which are just character arrays that contain the location, or address, of a file on your comptuer. We have not actually loaded any of the data from that file into MATLAB.</p> <p>To load the data, we need specialized functions that can handle the data. There are many different functions to load different types of data. But the two functions that we will use the most are:</p> <ul> <li><code>readtable</code>: For spreadsheet files \u2014 loads spreadsheet data</li> <li><code>imread</code>: For images \u2014 loads the image data</li> </ul> <p>These functions typically take a file path as an input.</p>"},{"location":"matlabBasics/FilesFolders/#example-load-a-spreadsheet-file","title":"Example: Load a Spreadsheet File","text":"<p>In this example, we will load one of the '.csv' spreadsheet files from the weather folder that we have been exploring in this module. The function <code>readtable</code> reads in spreadsheet data and outputs a table variable. For an input, the function requires a file path to a spreadsheet file.  To construct a full file path to one of the spreadsheet files, we will use <code>fullfile</code> to properly stitch together the path and file name.  With the <code>contents</code> structure and the <code>weather_data</code> variable, we have all the information we need. We just need to pick one of the files, which we can do through indexing:</p> Loading spreadsheet data into MATLAB<pre><code>full_file_path = fullfile(weather_folder, contents(3).name);\nT = readtable(full_file_path)\n</code></pre> <p>\u2026Here, since we indexed the 3rd element of <code>contents</code>, we will read the 3rd file, which happens to be 'w2007.csv'.</p>"},{"location":"matlabBasics/FilesFolders/#load-multiple-files","title":"Load Multiple files","text":"<p>Recall that the number of elements in the structure <code>contents</code> indicates the number of files found in the indicated folder.</p> <p>If we want to read all of the spreadsheet files from the weather folder, we can greatly simplify the process using our old friend, the FOR LOOP:</p> <pre><code>T  = table; % create an empty table\nfile_count = numel(contents); % number of elements in contents\nwarning('off','MATLAB:table:ModifiedAndSavedVarnames') % suppress annoying warnings from readtable\n\nfor n = 1:file_count\n   file_path =  fullfile(weather_folder, contents(n).name) % the file name changes on each iteration\n   t = readtable(file_path);\n   T = [T; t]; % stack the new data below the old data\nend\nwarning('on','MATLAB:table:ModifiedAndSavedVarnames') % turn annoying warning from readtable back on\n</code></pre> <p>\u2026Let's unpack this syntax a little further</p> <ol> <li>In the first line, we create an empty table variable <code>T</code>. We need to create this variable outside of the loop since we will be adding to it inside of the loop</li> <li>We use <code>numel</code> to count the number of elements in the structure array <code>content</code>, which is equal to the number of .csv files in <code>weather_folder</code>.</li> <li>In the initializing statement of the FOR LOOP, we create an array <code>n</code> that has same number of elements as there are files in the folder</li> <li>On each iteration of the loop, we:</li> </ol> <p>a) create a new file path to one of the spreadsheet files b) read in that spreadsheet file and then c) concatenate the results with the table <code>T</code></p> <p>And we're done: a quick and easy way to read in all of the files from a selected folder. Note, this only works because the data in the spreadsheet files all have the same number of columns with the same column headers.</p> <p>So, it is always a good idea when capturing data to organize it in a very consistent and precise fashion. Also notice that the table variable, <code>T</code>, incrementally grows in size with each call of the for loop. While this works satisfactorily for a small dataset, you run the risk of running into memory problems for  very large datasets if you do not preallocate the table. Better coding practice would be to first preallocate the table variable with empty rows. For that, you would need to know how much data is in each file and plan accordingly.</p> <p>END</p>"},{"location":"matlabBasics/Functions/","title":"Functions","text":"<p>For doing stuff</p>"},{"location":"matlabBasics/Functions/#stuff-you-should-know","title":"Stuff You Should Know","text":"<ul> <li>That a function does stuff with variables</li> <li>That there are a lot of functions</li> <li>How to find built-in MATLAB functions</li> <li>How to call functions using the proper syntax.</li> </ul>"},{"location":"matlabBasics/Functions/#useful-ish-matlab-documentation","title":"Useful-ish MATLAB Documentation","text":"<ul> <li>Calling Functions</li> </ul>"},{"location":"matlabBasics/Functions/#so-what-is-a-function","title":"So, What is a Function?","text":"<p>A function takes the data from a variable and does stuff. Think of a function as a list of instructions typically designed to manipulate the inputted data in some fashion. If you want to get fancy, you can call it a sub-routine or an algorithm. Often, these programming instructions are hidden from the user, so you can often think of a function a little like a black box.</p> <p></p> <p>The MATLAB syntax used to call a function looks like this:</p> <pre><code>output = name_of_function(input_variable)\n</code></pre> <p>You typically find the function on the right side of the equal sign. This is because a function typically (but not always) returns data that you can then stash into a variable. </p>"},{"location":"matlabBasics/Functions/#getting-help-on-functions","title":"Getting Help on Functions","text":"<p>MATLAB has thousands of built-in functions to perform almost any basic task you can think of. So, sometimes the hardest part is:</p> <ol> <li>Finding the right function to do exactly what you are looking for</li> <li>Writing the proper syntax to call that function.</li> </ol> <p>The MATLAB built-in documentation is a great place to start. You can find the available MATLAB functions and the proper syntax for calling those functions using the built-in documentation.</p> <p>If you can't find it in the MATLAB documentation, then you can search the internet for MATLAB functions. There are a lot out there on MATLAB. When in doubt, Google. I typically preface my Google searches as follows:</p> <pre><code>google matlab \"thing I want to do\"\n</code></pre> <p>\u2026but not necessarily with those double quotes.</p> <p>Of course, now that we are living in the future, MATLAB comes with an AI called  MATLAB Copilot. This is included with the Site License and should automatically be added to your MATLAB installation. Use this AI to help create code and troubleshoot errors. Your student CU Anschutz credentials also give you access to the latest version of ChatGPT through  Microsoft Copilot.</p>"},{"location":"matlabBasics/Functions/#anatomy-of-a-matlab-function","title":"Anatomy of a MATLAB Function","text":"<p>Peering into the box.</p> <p>A function is just a packaged series of commands. Often functions are stored as individual files. Sometimes they are included in the Live Scripts.</p> <p>The first line in a function sets the name, the inputs, and the outputs of the function. Notice how this first line also models how to call the function \u2014 all the text following the keyword function can be used as the syntax to call the function.</p> <p></p> <ol> <li>Keyword: the first word in the first line must be function - this keyword indicates that you are creating a function</li> <li>Name of Function: Following the names of the outputs, is the equal sign, and then the name of the function. In this case, the name is <code>mean</code>.</li> <li>Arguments The collective inputs and outputs of a function</li> <li>Input names are found inside the parentheses, following the name of the function. Each input should be separated by a comma. In this case, there are two inputs, <code>(x,dim)</code></li> <li>Output names follow the keyword function. In this case, there is just one output, <code>y</code>. If there were more outputs, they would be packaged in square brackets. e.g. <code>[y,z]</code></li> <li>CODE: After the first line, you have the all the code of the function including comments</li> <li>Last Line The final line of the function should be the keyword end.</li> </ol>"},{"location":"matlabBasics/Functions/#opening-functions","title":"Opening Functions","text":"<p>Perhaps the easiest way to understand functions is to review some of them for yourself. You can open any MATLAB function using the <code>open</code> command.  MATLAB function files typically have the same name as the function, but with the <code>*.m</code> extension. For example, you can open the <code>mean</code> function as follows:</p> Open the Mean Function file<pre><code>open mean.m\n</code></pre> <p>\u2026This will open the file in the editor. If you do so, you will see the function has quite a bit of code and may be difficult to understand. Notice that the first few lines in function is basically a series of comments to help explain how to use the function. This is good coding practice</p> <p>An easier function to review may be one of the functions included with the MtM documentation, such as the <code>mmGetChannelMap</code> function</p> <pre><code>open mmGetChannelMap.m\n</code></pre> <p>This simple function returns a color map for red, blue, or green. It has a single input, <code>ch</code>, and a single output, <code>cm</code>. Since I have posted these on github, you can also review the code here.</p>"},{"location":"matlabBasics/Functions/#function-workspace","title":"Function workspace","text":"<p>Functions have their own workspace. So, any variables created in a function, stay in that function \u2014 they don't appear in the general workspace.</p> <p>For example, if you call <code>mmGetChannelMap</code> in the command window:</p> <pre><code>cm = mmGetChannelMap('red')\n</code></pre> <p>\u2026 you create only one variable, <code>cm</code>, a 256X3 numeric array.</p> <p>The other variables you find in the function, <code>ch</code> and <code>la</code>, do not appear in your workspace. They only exist in the function and once the function is completed, they are gone.</p>"},{"location":"matlabBasics/Logical/","title":"Logical Arrays","text":"<p>For comparing stuff, finding stuff, and making decisions</p>"},{"location":"matlabBasics/Logical/#an-introduction-to-logical-arrays","title":"An Introduction to Logical Arrays","text":"<p>Heads or Tails? True or False? Logical Arrays are the Deciders of the variable classes. Logical Arrays are used to control program flow (e.g. IF ELSE statements). They are also useful as binary masks for digital images, so you can identify or process just a small part of the image.</p> <p>A logical (or BOOLEAN (1)) data type is a data type that can have ONLY one of two possible values: <code>true</code> or <code>false</code>.</p> <ol> <li>Why is a logical array also called a boolean? George Boole basically invented Logical Algebra, upon which all information science is based.</li> </ol> <p>In MATLAB, a logical array has all of the properties of a normal array (it can be indexed and manipulated in exactly the same fashion),  but each element can only have one of two values: <code>0</code> or <code>1</code>, where <code>0</code> means <code>false</code> and <code>1</code> means <code>true</code>.</p> <p>Fun Fact</p> <p></p> <p>The power symbol is simply a one intersecting a zero. In this case, one means \"on\" and zero means \"off\". Read more exciting information about the power symbol here.</p>"},{"location":"matlabBasics/Logical/#module-overview","title":"Module Overview","text":"<p>This module is broken down into the following major sections:</p> <ol> <li>Creating Logical Arrays</li> <li>Creating Logical Arrays Using Relational Operations</li> <li>Combining Logical Arrays using Logical Operations</li> <li>Indexing with Logical Arrays</li> <li>Functions That Return Logical Arrays</li> </ol>"},{"location":"matlabBasics/Logical/#syntax-examples","title":"Syntax Examples","text":"Syntax Meaning true returns a logical 1 false returns a logical 0 logical typecasts a variable to a logical class x &gt; 3 x is greater than 3 y &lt;= 12 y is less than or equal to 12 z ~= 12 z does not equal 12 LA1 &amp; LA2 combine LA1 and LA2 (two logical arrays) using a LOGICAL AND LA1 | LA2 combine LA1 and LA2 (two logical arrays) using a LOGICAL OR xor(LA1,LA2) combine LA1 and LA2 using logical XOR"},{"location":"matlabBasics/Logical/#special-characters","title":"Special Characters","text":""},{"location":"matlabBasics/Logical/#relational-functions","title":"Relational Functions","text":"<p>Used to create logical arrays based on relational operators</p> Special Character Meaning &gt; is greater than &gt;= is greater than or equal to &lt; is less than &lt;= is less than or equal to == is equal to ~= is not equal to"},{"location":"matlabBasics/Logical/#logical-operations","title":"Logical Operations","text":"<p>Used to combine logical functions based on logical operations such as</p> Special Character Meaning &amp; logical AND | logical OR ~ logical NOT"},{"location":"matlabBasics/Logical/#important-terminology","title":"Important Terminology","text":"<ul> <li>BOOLEAN: a data type that can have only two possible values</li> <li>Relational Operations: operations that compare the numeric values in arrays and return logical arrays</li> <li>Logical Operations: operations that work on logical arrays to return logical arrays (kind of like logical arithmetic)</li> <li>Logical Indexing: using a logical array as an index</li> <li>Logic Gates: A function that compares one or more logical inputs and produces a single logical output.</li> </ul>"},{"location":"matlabBasics/Logical/#relevant-matlab-documentation","title":"Relevant MATLAB Documentation","text":"<ul> <li>Array Comparison with Relations Operations</li> <li>Relational Operations</li> <li>Logical Operations</li> </ul>"},{"location":"matlabBasics/Logical/#important-matlab-functions","title":"Important MATLAB Functions","text":"<ul> <li>true: returns a Logical <code>1</code>.</li> <li>false: returns a Logical <code>0</code>.</li> <li>logical: converts numerical values to a logical array. All non-zero values in the array are converted to logical <code>1</code>'s</li> <li>strcmp: compare strings and returns a logical <code>1</code> if the strings are EXACTLY the same</li> <li>is* functions: a series of functions that detect states (e.g. is it a letter, a space?, a number?). Each function returns a logical array based on the outcome.</li> <li>all: function that determines if all array elements are nonzero or true</li> <li>any: function that determines if any array elements are nonzero</li> </ul>"},{"location":"matlabBasics/Logical/#learning-objectives","title":"Learning Objectives","text":"<ul> <li> <p>Define Boolean</p> </li> <li> <p>Use the functions <code>true</code>, <code>false</code>, and <code>logical</code> to create logical arrays</p> </li> <li> <p>Use Relational Operations to generate logical arrays</p> </li> <li> <p>Use Logical Operators to combine logical arrays</p> </li> <li> <p>Use logical arrays to index arrays</p> </li> <li> <p>use <code>is*</code> functions to detect states and create logical arrays to parse arrays</p> </li> <li> <p>Use <code>strcmp</code> on character arrays</p> </li> </ul>"},{"location":"matlabBasics/Logical/#creating-logical-arrays","title":"Creating Logical Arrays","text":""},{"location":"matlabBasics/Logical/#explicit-generation","title":"Explicit Generation","text":"<p>You can explicitly create a logical array using the functions <code>true</code> or <code>false</code>. And just like numeric arrays, you can concatenate these values using the square brackets</p> <pre><code>L = true\nM = false\nN = [true false]\n</code></pre> result<pre><code>L =\n    logical\n    1\n\nM =\n    logical\n    0\n\nN =\n    1\u00d72 logical array\n    1   0\n</code></pre> <p>Note the Convention</p> <p>In MATLAB, <code>trues</code> and <code>falses</code> are indicated by a logical <code>1</code> or <code>0</code>, respectively</p> <p>We can further inspect our new logical arrays by examining their properties in the workspace.</p> <p>inspect property of the new logical variable</p> <p>Recall that the function <code>whos</code> returns the properties of the variables that are in the workspace</p> <pre><code>whos\n</code></pre> output<pre><code>    Name      Size            Bytes  Class      Attributes\n     L         1x1                 1  logical              \n     M         1x1                 1  logical              \n     N         1x2                 2  logical              \n</code></pre> <p>The output from <code>who</code> shows that both <code>L</code> and <code>M</code> are 1X1 logical arrays that each take up 1 byte of memory, while N is a <code>1x2</code> logical array that consumes 2 bytes of memory. </p>"},{"location":"matlabBasics/Logical/#the-functions-true-and-false-accept-inputs","title":"The functions true and false accept inputs","text":"<p><code>true</code> and <code>false</code> are MATLAB functions that accept inputs. The first input indicates the number of rows and the second input indicates the number of columns that you want. If you enter just one input, the function assumes you want a square matrix (i.e. the same number of rows and columns). This is easy to forget and sometimes you'll create huge matrices by accident, so keep that in mind.</p> <p>Use logical functions to create a logical matrix</p> Create Square Matrix of trues<pre><code>t = true(3)\n</code></pre> Create a 3x4 matrix of falses<pre><code>f = false(3,4)\n</code></pre> result<pre><code>t =\n     3\u00d73 logical array\n     1   1   1\n     1   1   1\n     1   1   1\n\nf =\n     3\u00d74 logical array\n     0     0     0     0\n     0     0     0     0\n     0     0     0     0\n</code></pre> ChallengeAnswer <p>What syntax do you need to create a <code>2x1</code> logical array of trues?</p> Create a 2x1 logical array<pre><code>t = true(2,1)\n</code></pre> result<pre><code>t =\n     2\u00d71 logical array\n     1\n     1\n</code></pre>"},{"location":"matlabBasics/Logical/#conversion-to-logical-array","title":"Conversion to Logical Array","text":"<p>You can also create logical arrays by converting perfectly good numeric arrays into logical ones using the function <code>logical</code>. This is known as type casting. (1)</p> <ol> <li>because your changing (or casting) the variable type from one type to another.</li> </ol> <p>Convert a Numeric Array into a Logical array</p> <pre><code>N = [0 1 2 3] % create a 1x4 numeric vector\nL = logical(n) % convert to a 1x4 logical vector\n</code></pre> result<pre><code>N =\n     0   1   2   3\n\nL =\n     1\u00d74 logical array\n     0   1   1   1\n</code></pre> <p>Notice that <code>logical</code> converts any non-zero number to <code>true</code> and any zeros to <code>false</code>.  </p> <p>In the above example, we actually created a new logical array, <code>L</code> that is the same size and shape as the numeric array <code>N</code>. This allows us to compare the elements across the two arrays. In this example, wherever there is a number that is not <code>0</code> in <code>N</code>, we find a logical <code>1</code> in <code>L</code>. We can use that for stuff. We'll get to that later.</p>"},{"location":"matlabBasics/Logical/#challenge-creating-logical-arrays","title":"Challenge: Creating Logical Arrays","text":"Question 1Answer 1Question 2Answer 2Question 3Answer 3 <p>Show the syntax to explicitly create the logical array <code>1 1 0 1</code> and assign to the variable m.</p> <p>Explicitly create the logical array <code>1 1 0 1</code> and assign to the variable m.</p> <pre><code>m = [true true false true]\n</code></pre> result<pre><code>m =\n    1\u00d74 logical array\n    1   1   0   1\n</code></pre> <p>Use the function <code>true</code> to create a 2x1 array of logical ones and assign to <code>L</code>.</p> <p>Create a 2x1 array of logical ones and assign to <code>L</code></p> <pre><code>L = true(2,1)\n</code></pre> result<pre><code>L =\n     2\u00d71 logical array\n     1\n     1\n</code></pre> <p>How many logical ones will you get from the following syntax?</p> <pre><code> logical([-1 0 1 2 3 0 5])\n</code></pre> <pre><code>logical([-1 0 1 2 3 0 5])\n</code></pre> result<pre><code> ans =\n       1\u00d77 logical array\n       1   0   1   1   1   0   1\n</code></pre> <p>Five logical ones and two logical zeros</p>"},{"location":"matlabBasics/Logical/#creating-logical-arrays-using-relational-operations","title":"Creating Logical Arrays Using Relational Operations","text":"<p>Life is full of comparisons. Does that guy have more money than me? Is she taller than me? I think these are the same. Relational operations help make these comparisons but with numbers. Relational operations are typically performed on numeric arrays, using the relational operators that we all learned back in grade school.</p> Special Character Meaning &gt; is greater than &gt;= is greater than or equal to &lt; is less than &lt;= is less than or equal to == is equal to ~= is not equal to <p>Relational operations return logical arrays.</p> <p>Notice that the syntax is both familiar and somewhat confusing. For example, the following statement assigns the value <code>12</code> to a variable named <code>a</code>:</p> Numeric Assignment<pre><code>a = 12\n</code></pre> <p>Whereas this statement uses the Relation Operation of 'is equal to' <code>==</code> to compare the contents of the variable <code>a</code> with the value <code>12</code>:</p> Relational Operation<pre><code>a == 12 \n</code></pre> <p>If the contents of <code>a</code> equals <code>12</code>, then the relation operation will return a logical <code>1</code>, otherwise the operation returns a logical `0.</p> <p>Since we already assigned the value <code>12</code> to <code>a</code>, we get a <code>1</code>:</p> result of a==12<pre><code>ans =\n      logical\n      1\n</code></pre> <p>And, since there is no explicit assignment in the second statement, the logical <code>1</code> is assigned to the variable <code>ans</code>.</p> <p>Workspace</p> <p>Review the properties of <code>ans</code> in the workspace (1)</p> whos<pre><code>     Name      Size            Bytes  Class      Attributes\n     a         1x1                 8  double               \n     ans       1x1                 1  logical              \n</code></pre> <p>Notice that the logical class requires only 1 byte per element of storage (see the Memory and Numeric Classes for more information on bits and bytes).</p> <ol> <li>Reminder - the function <code>whos</code> returns the content of the workspace</li> </ol>"},{"location":"matlabBasics/Logical/#relational-operation-assignment","title":"Relational Operation Assignment","text":"<p>We can assign the result of a relational operation to a variable using the following somewhat convoluted syntax:</p> <p>Relational Operation Assignment</p> <pre><code>b = a == 25 % b equals 'a is equal to 25'\n</code></pre> result<pre><code>b =\n     logical\n     0\n</code></pre> <p>In this case, we are assigning the result of the Relational Operation (is <code>a</code> is equal 25?) to a new variable <code>b</code>.  Notice in the workspace that <code>b</code> is now a logical data type and that it has the value of <code>0</code> (or <code>false</code>).</p> <p>We can similarly compare an array of values.</p> <p>Example: Relational operation on arrays</p> <p>Here we create a numeric array of 10 values(<code>a</code>). Then we create a logical array using the relational operation 'is greater than' (<code>b</code>).</p> <pre><code>a = 1:10\nb = a&gt;5 % a is greater than 5\n</code></pre> result<pre><code>b =\n    1\u00d710 logical array\n    0   0   0   0   0   1   1   1   1   1\n</code></pre> <p>Notice that <code>a</code> is a numeric vector, while <code>b</code> is a logical array with the same dimensions as <code>a</code> but with <code>1</code>'s wherever <code>a</code> is greater than 5 and <code>0</code> 's everywhere else.</p> <p>Or consider this relational operation of a matrix:</p> <p>Example: Relational Operations on a Matrix</p> <pre><code>c = [1 2 3; 4 5 6]\nd = c &gt; 3\n</code></pre> result<pre><code>c =\n     1  2  3\n     4  5  6\n\nd = \n     0  0  0\n     1  1  1\n</code></pre> <p>Here we create a numeric array <code>c</code> and a logical array, <code>d</code>, which has the same dimensions as <code>c</code>, but has <code>1</code>'s wherever <code>c</code> has a value greater than <code>3</code>. As you can see, using logical arrays allows us to quickly identify which values in <code>c</code> are greater than <code>3</code>.</p> <p>The term 'masking'</p> <p>In the above examples, we create logical arrays that are the same size as a reference numeric array. In the logical array, there are logical <code>1</code>s for elements that return true  when the relational operation was satisfied (e.g. when the values in <code>c</code> were greater than 5). These logical <code>1</code>s are said to mask the elements in the numeric array that satisfy the relational operation. So, I will often say something like \"create a logical array that masks the values greater than 5 in the numeric array <code>c</code>.\" What I mean is \"create a logical array which has logical <code>1</code>s where the elements in <code>c</code> are greater than <code>5</code>.\" It's just a little shorter to use the term mask.</p>"},{"location":"matlabBasics/Logical/#challenge-relational-operations","title":"Challenge: Relational Operations","text":"Question 1Answer 1Question 2Answer 2 <p>Recall that the variable <code>a</code> contains the value <code>12</code>.</p> <p>What happens when you enter the following command in the command window?</p> <pre><code>a == 13\n</code></pre> <p>Does the value of <code>a</code> change?</p> <p>You get a logical <code>0</code> because 13 does not equal 12. </p> result<pre><code>ans = \n    '0'\n</code></pre> <p><code>a</code> does not change, because you did not assign anything new to <code>a</code>.</p> <p>Assign to the variable <code>b</code> the relation operation: <code>a</code> is less than 20. </p> <p>What does <code>b</code> contain after the operation?</p> <p>Assign to <code>b</code> <code>a</code> is less than 20:</p> assignment<pre><code>b = a &lt; 20\n</code></pre> <p>result<pre><code>b =\n    logical\n    1     \n</code></pre> <code>b</code> contains a logical <code>1</code> (meaning true) because 12 is less than 20. </p>"},{"location":"matlabBasics/Logical/#combining-logical-arrays-using-logical-operations","title":"Combining Logical Arrays using Logical Operations","text":"<p>As in life, sometimes you need more than one input to make a decision. Maybe you want a unanimous decision (all trues). Or maybe you want something a little more ambiguous: if just one of these is true, then we'll go with it.</p> <p>Logical operations allow you to combine two logical arrays into a single logical array. These operations are like boolean math: you take two booleans, and get one boolean back. What you get back depends on the logical operation you use.</p> <p>Consider the following two arrays (array 1 and array 2):</p> <p>Logical Operations</p> <p> </p> <p>Use:</p> <ul> <li> <p>AND for unanimous decisions: the elements in the output array contain a <code>true</code> only where a <code>1</code> is found in BOTH of the corresponding elements in the input arrays</p> </li> <li> <p>OR to split the difference: the elements in the output array contain a <code>1</code> if a <code>1</code> can be found in either (or both) of the corresponding elements in the input arrays</p> </li> <li> <p>XOR when you want one and only one true: the output contains a <code>1</code> only when the corresponding elements contain one <code>1</code> and one false</p> </li> </ul>"},{"location":"matlabBasics/Logical/#logical-operators","title":"Logical Operators","text":"<p>Use the following operators to perform logical operations</p> Symbol Logical operation &amp; logical AND | logical OR xor Logical exclusive OR ~ logical NOT"},{"location":"matlabBasics/Logical/#logical-operations-examples","title":"Logical Operations Examples","text":""},{"location":"matlabBasics/Logical/#first-create-the-arrays","title":"First, Create the Arrays","text":"<p>To understand how logical operations work, let's create the following three matrices: <code>N</code>, <code>L</code>, and <code>M</code>:</p> <p>Matrix <code>N</code> is a numeric vector containing the numeric values from 1 to 9.</p> N<pre><code>N = 1:9\n</code></pre> result<pre><code>N =\n     1     2     3     4     5     6     7     8     9\n</code></pre> <p>Matrix <code>L</code> is a logical array that has  <code>1</code> (or <code>1</code>'s) at the indices in matrix <code>N</code> where the value is greater than 4:</p> L<pre><code>L = N&gt;4\n</code></pre> result<pre><code>L =\n    1\u00d79 logical array\n    0   0   0   0   1   1   1   1   1\n</code></pre> <p>Compare the corresponding elements in <code>N</code> and <code>L</code>. Notice there there are logical <code>1</code>s in <code>L</code> wherever the numeric values in <code>N</code> are greater than  4. And logical <code>0</code>s everywhere else</p> <p>Matrix <code>M</code> is a logical array that masks the elements in <code>N</code> which contain an odd number.</p> M<pre><code>M =\n    1\u00d79 logical array\n    1   0   1   0   1   0   1   0   1\n</code></pre> How to find Odd numbers using the function mod <p>We can create the matrix <code>M</code> using the function <code>mod</code>, which calculates the remainder after dividing each element in <code>N</code> by factor. The syntax looks like the following:</p> <pre><code>M = mod(N,2) % return remainder after division by 2\n</code></pre> <p>With this syntax, we divide each element in <code>N</code> by 2. As we all learned in elementary school, dividing odd integers by 2 returns a remainder of 1, which is what we get:</p> result<pre><code>M =\n     1     0     1     0     1     0     1     0     1\n</code></pre> <p>Notice that this returns a numeric array. Those <code>1</code>s are the remainders after dividing by 2.</p> <p>To create a logical array, we need to go one further step, which is to convert (or typecast) the numeric array into a logical array, as follows:</p> <pre><code>M = logical(M)\n</code></pre> <pre><code>M =\n     1\u00d79 logical array\n     1   0   1   0   1   0   1   0   1\n</code></pre> <p>And now we have a logical array with logical <code>1</code>s wherever an odd number is found in <code>N</code>.</p>"},{"location":"matlabBasics/Logical/#example-1-logical-and","title":"Example 1: Logical AND","text":"<p>The logical AND operation returns <code>1</code> for coinciding trues and returns <code>0</code> for anything else.</p> <p>Logical AND</p> <p>The following <code>AND</code> relational operation creates a new logical array with <code>1</code> at indices corresponding to the elements in <code>N</code> which are both greater than 4 AND are odd:</p> L AND M<pre><code>L&amp;M\n</code></pre> result<pre><code>ans =\n      1\u00d79 logical array\n      0   0   0   0   1   0   1   0   1\n</code></pre> <p>Notice that the result has a <code>1</code> only where there is <code>1</code> in both <code>L</code> and <code>M</code>. These <code>1</code>'s correspond to the values 5, 7, and 9 in <code>N</code>: the only values that meet the criteria of being both greater than 4 and odd. The logical array is said to mask those values in <code>N</code></p>"},{"location":"matlabBasics/Logical/#example-2-logical-or","title":"Example 2: Logical OR","text":"<p>The logical OR operation is less discerning than AND: Any <code>1</code> returns a <code>1</code>.</p> <p>Logical OR</p> <p>The following syntax creates a new logical array with <code>1</code> at indices corresponding to the elements in <code>N</code> that are either greater than 4 or odd:</p> L OR M<pre><code>L|M\n</code></pre> result<pre><code>ans =\n      1\u00d79 logical array\n      1   0   1   0   1   1   1   1   1\n</code></pre> <p>Here, the result has a logical <code>1</code> wherever there was a <code>1</code> found in either <code>L</code> or <code>M</code>. It has a <code>false</code> in the elements corresponding to 2 and 4 in <code>N</code>.  So, 2 and 4 are neither greater than 4 or odd\u2026 The rest of the numbers are at least one or the other or both.</p>"},{"location":"matlabBasics/Logical/#example-3-logical-not","title":"Example 3: Logical NOT","text":"<p>This operation is simple to understand: just invert the logic.</p> <p>Logical NOT</p> NOT M<pre><code>~M\n</code></pre> result<pre><code>ans =\n      1\u00d79 logical array\n      0   1   0   1   0   1   0   1   0\n</code></pre> <p>Notice the use of the <code>tilde</code> special character. The resulting array has the inverse logical of <code>M</code>. <code>1</code> is <code>false</code> and <code>false</code> is <code>1</code>. UP is DOWN. CATS are DOGS. etc. Also notice that the <code>1</code>s now correspond to the even numbers in <code>N</code>.</p>"},{"location":"matlabBasics/Logical/#example-4-logical-xor","title":"Example 4: Logical XOR","text":"<p>The operation exclusive or is a little more confusing to understand. But the concept is relatively straightforward: You only get a logical <code>1</code> if you have exactly one logical <code>1</code> and one logical <code>0</code>. Anything else returns a logical <code>0</code>.</p> <p>XOR</p> <p>There is no special character for <code>xor</code>. You have to use the function.</p> <pre><code>xor(L,M)\n</code></pre> result<pre><code>ans =\n      1\u00d79 logical array\n      1   0   1   0   0   1   0   1   0\n</code></pre> <p>The resulting logical array masks the odd numbers below 4 and the even numbers above 4: <code>1, 3, 6, 8</code></p>"},{"location":"matlabBasics/Logical/#challenge-logical-operations","title":"Challenge: Logical Operations","text":"QuestionAnswer <ol> <li>What syntax would you use to create a logical array that masks the even numbers in <code>N</code> that are less than 8? Assign the result to <code>O</code></li> </ol> Contents of N<pre><code>N =\n    1     2     3     4     5     6     7     8     9\n</code></pre> <p>Use the following logical operation</p> <p><pre><code>O = N &lt; 8 &amp; ~M;\n</code></pre>  Here we have two logical arrays that we combine using logical AND: N less than 8 AND NOT <code>M</code>.</p> result<pre><code>O =\n     1\u00d79 logical array\n     0   1   0   1   0   1   0   0   0\n</code></pre> <p>The result masks the even numbers less than 8.</p>"},{"location":"matlabBasics/Logical/#indexing-with-logical-arrays","title":"Indexing with Logical Arrays","text":"<p>One of the superpowers of a logical array is its ability to be used as an index.</p> <p>Example: Logical Indexing</p> <p>Here we create a numeric matrix, <code>c</code> and a logical array <code>d</code> that masks the values in <code>c</code> greater than <code>3</code>.</p> <pre><code>c = [1 2 3; 4 5 6] % create numeric array\nd = c &gt; 3 % masks values greater than 3\n</code></pre> <p>If we index <code>c</code> with <code>d</code> \u2026</p> <pre><code>c(d) % use d as an index for c\n</code></pre> <p>\u2026 we get the values from <code>c</code> that are greater than <code>3</code>:</p> result<pre><code>ans = \n     4\n     5\n     6\n</code></pre> <p>As you can see, logical indexing returns the values in <code>c</code> that correspond to the locations in <code>d</code> where there are logical <code>1</code>'s. Importantly, the logical array  (<code>d</code>) has to have the same size as the array that you are trying to index  (<code>c</code>).</p> <p>Logical Indexing Illustration</p> <p> </p> <p>With this syntax, we are essentially saying \"return all values in c that share the same indices as the 1's in d.\" Notice that the result has the same class type (double) as the array is being indexed (<code>c</code>). MATLAB spits out a vertical vector because the resulting numeric array has fewer elements than the original array and MATLAB doesn't know how to organize the elements.</p>"},{"location":"matlabBasics/Logical/#examples-using-logical-indexing","title":"Examples using Logical Indexing","text":""},{"location":"matlabBasics/Logical/#1-logical-indexing-using-numeric-comparisons","title":"1: Logical indexing using Numeric Comparisons","text":"<p>Recall the variables <code>N</code>, <code>L</code>, and <code>M</code> that we generated in the previous section.</p> N 1 2 3 4 5 6 7 8 9 L 0 0 0 0 1 1 1 1 1 M 1 0 1 0 1 0 1 0 1 <p>We can use <code>L</code> and <code>M</code> to index  <code>N</code>, as follows:</p> <p>Index N with L</p> <pre><code>N(L)\n</code></pre> result<pre><code>ans =\n      5     6     7     8     9\n</code></pre> <p>you get all the values in <code>N</code> that are greater than <code>4</code>. Notice that these are the numbers in <code>M</code> that correspond to the elements in <code>L</code> that contain a <code>1</code>.</p> <p>Index <code>N</code> with <code>M</code></p> <pre><code>N(M)\n</code></pre> result<pre><code>ans =\n      1     3     5     7     9\n</code></pre> <p>Here you get all the odd numbers in <code>N</code>, which again are the numbers in <code>M</code> that correspond to the elements in <code>N</code> which contain a <code>1</code>.</p>"},{"location":"matlabBasics/Logical/#2-logical-indexing-from-combined-logical-arrays","title":"2: Logical indexing from combined Logical arrays","text":"<p>If we want to get fancy, we can combine Logical operations and indexing, as follows:</p> <p>Index <code>N</code> using <code>L</code> AND <code>M</code></p> <pre><code>N(L&amp;M)\n</code></pre> result<pre><code>ans =\n      5     7     9\n</code></pre> <p>And you get the odd numbers greater than 4.</p> <p>Index <code>N</code> using <code>L</code> OR <code>M</code></p> <pre><code>N(L|M)\n</code></pre> result<pre><code>ans =\n      1     3     5     6     7     8     9\n</code></pre> <p>Here we get all odd numbers and values over four</p> <p>Index <code>N</code> using the XOR of <code>L</code> and <code>M</code></p> <pre><code>N(xor(L,M))\n</code></pre> result<pre><code>ans =\n      1     3     6     8\n</code></pre> <p>Here we get the ODD numbers below 4 and even numbers above 4. Or put another way: you get all the values in <code>N</code> except where <code>L</code> and <code>M</code> overlap.</p>"},{"location":"matlabBasics/Logical/#challenge-logical-indexing","title":"Challenge: Logical Indexing","text":"QuestionAnswer <p>How would you logically index <code>N</code> with <code>M</code> to return all of the even numbers?</p> <p>You index with NOT <code>M</code>, as follows</p> <pre><code>N(~M)\n</code></pre> result<pre><code>ans =\n      2     4     6     8\n</code></pre> <p>All even numbers returned</p>"},{"location":"matlabBasics/Logical/#functions-that-return-logical-arrays","title":"Functions That Return Logical Arrays","text":"<p>MATLAB has many functions that you can use to compare or analyze the contents of a variable.</p> <p>The following are a few examples of such functions:</p>"},{"location":"matlabBasics/Logical/#is-functions","title":"is* Functions","text":"<p>As in: Is it a numeric array? A character array? MATLAB has many functions designed to detect the class or state of an array.  These functions return logical arrays based on the state of the array.</p> <p>Examples include:</p> <ul> <li>iscell: is the variable a cell?</li> <li>ischar: is the variable a character array?</li> <li>isnumeric: is the variable a numeric array?</li> <li>isletter: which elements in a character array are letters?</li> <li>isempty: is the array empty (devoid of data)?</li> </ul>"},{"location":"matlabBasics/Logical/#is-function-examples","title":"is* Function Examples","text":"<p>Example: ischar</p> <p>Consider <code>ch</code>:</p> <pre><code>ch = '1':'Z'\n</code></pre> result<pre><code>ch =\n'123456789:;&lt;=&gt;?@ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n</code></pre> <p>The function ischar reports whether ch is a character array or not</p> <pre><code>ischar(ch)\n</code></pre> result<pre><code>ans =\n      logical\n      1\n</code></pre> <p><code>ch</code> is a character array, so you get a logical 1 (or true)</p> <p>Now, compare the output from isletter on the same character array, ch.</p> <p>Example: isletter</p> <p>The function <code>isletter</code> returns a logical array containing <code>1</code> wherever there is a letter in the input variable (as opposed to a digit or whitespace character). </p> <pre><code>il = isletter(ch)\n</code></pre> result<pre><code>il =\n     1\u00d742 logical array\n     0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   0   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1   1\n</code></pre> <p>So, instead of getting just one true or false, we get a true or false for every element in ch. Here, <code>il</code> contains <code>1</code>'s only where letters can be found in <code>ch</code>.</p> <p>If you index <code>ch</code> with <code>il</code>...:</p> index ch with il<pre><code>ch(il)\n</code></pre> result<pre><code>ans =\n     'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n</code></pre> <p>\u2026you get the letters from <code>ch</code> and nothing else.</p> <p>Sometimes you want to know whether any data has been added to a variable. </p> <p>Example: isempty</p> <p>The function <code>isempty</code> checks the contents of the elements in an array:</p> <pre><code>a = []\nisempty(a)\n</code></pre> result<pre><code>ans =\n      logical\n      1\n</code></pre> <p>\u2026We get a true because a is an empty variable.</p> <p>Example: strcmp</p> <p>The function strcmp determines whether two character arrays are identical.</p> <p>The following example should illustrate why CANVAS can be so bad at grading open responses such as \"Fill in the Blank \"questions.</p> <p>Consider these two character arrays:</p> <pre><code>correct_answer = 'Every good boy does fine'\nstudent_answer = 'Every  good boy  does fine'\n</code></pre> <p>Are these two character arrays identical? Let's test it:</p> <pre><code>the_same = strcmp(correct_answer, student_answer)\n</code></pre> result<pre><code>the_same = \n           0\n</code></pre> <p>Why did strcmp return a zero? Because the spaces in the two character arrays did not line up, so all of the letters in the array did not precisely line up.</p> <p>How do we make <code>strcmp</code> work for the previous example? As we found out, uneven spacing can make the function return a logical <code>0</code> even though all of the letters match. If we just want to test whether the letters match, then we should remove all of the spaces. We can easily do this as follows.</p> <p>Example: strcmp without the spaces</p> <p>We can determine if the letters match in the two  previous character arrays using the following steps:</p> <ol> <li> <p>Identify all the spaces using isspace which returns a logical array with 1s where the spaces are</p> </li> <li> <p>Using the syntax <code>char_array(logic_array) = []</code>  to eliminate the spaces</p> </li> <li> <p>Compare the new character arrays using strcmp</p> </li> </ol> <pre><code>cala = isspace(correct_answer) % logical array masking the spaces in correct_answer\nsala = isspace(student_answer) % logical array masking the spaces in student_answer\n\ncorrect_answer(cala) = [] % eliminate spaces in correct_answer\nstudent_answer(sala) = [] % eliminate spaces in student_answer\n</code></pre> result<pre><code>correct_answer = \n                 'Everygoodboydoesfine'\nstudent_answer = \n                 'Everygoodboydoesfine'\n</code></pre> <p>\u2026All that remains are the letters.</p> <p>Now when we compare the character arrays\u2026</p> <pre><code>strcmp(correct_answer, student_answer) % compare the letters using strcmp\n</code></pre> result<pre><code>ans = 1\n</code></pre> <p>\u2026We ge a 1, or true, indicating that the two character arrays are the same.</p>"},{"location":"matlabBasics/Logical/#challenge-is-functions","title":"Challenge: is* functions","text":"QuestionAnswer <p>What do you think the following returns?</p> <ol> <li><code>isnumeric('apple')</code> logical <code>1</code> or <code>0</code>?</li> <li><code>isempty('Empty')</code> logical <code>1</code> or <code>0</code>?</li> <li><code>ischar('1234')</code> logical <code>1</code> or <code>0</code>?</li> </ol> <pre><code>isnumeric('apple')\n</code></pre> result<pre><code>ans =\n      logical\n      0\n</code></pre> <p>'apple' is not a numeric array.</p> <pre><code>isempty('Empty')\n</code></pre> result<pre><code>ans =\n      logical\n      0\n</code></pre> <p>'Empty' is not empty -- it is character array with five characters.</p> <pre><code>ischar('1234')\n</code></pre> result<pre><code>ans =\n      logical\n      0\n</code></pre> <p><code>'1234'</code> is a character array because of the single quotes. </p>"},{"location":"matlabBasics/Logical/#final-example-putting-it-all-together-for-pangrams","title":"Final Example: Putting it all together for Pangrams","text":"<p>Pangrams are sentences that contain all of the letters of the alphabet at least once. Let's use MATLAB to determine whether a sentence is a pangram or not. To do this, we simply need to find all of the unique letters in a sentence and count them. If they add up to 26, then we have a pangram.</p> <p>To accomplish this, we will use several MATLAB functions, including:</p> <ul> <li>isspace: logical array that masks the spaces</li> <li>unique: return all of the unique characters in a character array</li> <li>numel: returns the number of elements in an array</li> </ul> <p>Here we prototype an algorithm (or series of programming steps) to test whether a sentence is a pangram or not.</p> <p>So, consider the following sentence, which we will store in the variable <code>sentence</code>:</p> <pre><code>sentence = 'The quick brown fox jumps over the lazy dog'\n</code></pre> <p>Does the above sentence contain all of the letters of the alphabet (also known as a pangram)?</p> <p>To count the letters, we need to remove the spaces. And to remove the spaces, we first need to find them.</p> 1. Mask spaces<pre><code>space_la = isspace(sentence) % mask spaces in sentence\n</code></pre> result<pre><code>space_la =\n           1\u00d743 logical array\n           0   0   0   1   0   0   0   0   0   1   0   0   0   0   0   1   0   0   0   1   0   0   0   0   0   1   0   0   0   0   1   0   0   0   1   0   0   0   0   1   0   0   0\n</code></pre> <p>\u2026<code>space_la</code> is a logical array that masks(1) the spaces in <code>sentence</code>.</p> <ol> <li>the logical <code>1</code>s in <code>space_la</code> correspond to the elements in <code>sentence</code> that contains spaces.</li> </ol> <p>So, now we can use <code>space_la</code> as a logical index to remove spaces. Remember, the empty brackets syntax can remove elements from a variable, as follows:</p> 2. Remove spaces using logical indexing<pre><code>sentence(space_la) = []; % Remove spaces from sentence\n</code></pre> result: spaces removed<pre><code>sentence =\n           'Thequickbrownfoxjumpsoverthelazydog'\n</code></pre> <p>\u2026<code>sentence</code> now contains no spaces.</p> <p>To count the number of letters, we can use the function <code>numel</code>, which returns the number of elements in an array:</p> 3. Count letters<pre><code>letter_count = numel(sentence) % returns the number of elements in sentence\n</code></pre> result<pre><code>letter_count =\n               35\n</code></pre> <p>\u202635? We have too many letters because certain letters are repeated.</p> <p>To find just the unique letters, we can use the function <code>unique</code>, which returns the unique elements in an array, as follows:</p> 4. Get Unique letters<pre><code>uniq_letters = unique(sentence) % return unique letters from sentence\n</code></pre> result<pre><code>uniq_letters =\n               'Tabcdefghijklmnopqrstuvwxyz'\n</code></pre> <p>\u2026<code>uniq_letters</code> contains unique instances of each letter.</p> <p>Let's count the number of elements using <code>numel</code>:</p> 5. Count Unique Letters<pre><code>letter_count = numel(uniq_letters) % returns number of elements in uniq_letters\n</code></pre> result<pre><code>letter_count =\n                27\n</code></pre> <p>\u202627? How can there be more than 26 unique letters. Ah, yes. Capital T and lowercase t are considered to be different letters since MATLAB is case-sensitive. We need to find all the unique lowercase letters.</p> <p>So, we first need to convert all letters in <code>uniq_letters</code> to lowercase using the function <code>lower</code>:</p> 6. Convert to lowercase<pre><code>lower_letters = lower(uniq_letters) % coverts all letters to lowercase\n</code></pre> result<pre><code>lower_letters = \n                'tabcdefghijklmnopqrstuvwxyz'\n</code></pre> <p>Then find the unique letters in that array...</p> 7. Find Unique Lowercase Letters<pre><code>uniq_lower_letters = unique(lower_letters); % unique letters in lower_letters\n</code></pre> result<pre><code>uniq_lower_letters =\n                     'abcdefghijklmnopqrstuvwxyz'\n</code></pre> <p>And then count the number of elements in uniq_lower_letters...</p> 8. Count Unique Lowercase letters<pre><code>letter_count = numel(uniq_lower_letters) % number of elements in uniq_lower_letters\n</code></pre> result<pre><code>letter_count =\n                26\n</code></pre> <p>Finally, we can then test whether the sentence is a pangram by using the relational operation: \"Does the count equal 26\":</p> 9. Is it a Pangram?<pre><code>la_pangram = letter_count == 26\n</code></pre> result: yes, a pangram<pre><code>la_pangram =\n             logical\n             1\n</code></pre> <p>\u2026Since <code>letter_count</code> does equal 26, meaning there are 26 unique lowercase letters, the result, stored in <code>la_pangram</code>,  is true.</p>"},{"location":"matlabBasics/Logical/#packaging-the-pangram-algorithm","title":"Packaging the Pangram Algorithm","text":"<p>So that's how it goes when you are prototyping an algorithm. You need to test each step to make sure that it makes sense. Once you have all the steps that you need, then you can create a more compact set of instructions, like the following:</p> <p>Pangram Algorithm</p> <p><pre><code>sentence = 'The quick brown fox jumps over the lazy dog' % assign sentence\nspace_la = isspace(sentence) % mask the spaces in sentence\nsentence(space_la) = []; % Remove spaces from sentence\nlower_letters =lower(sentence) % covert all letters to lowercase\nuniq_lower_letters = unique(lower_letters); % unique letters in lower_letters\nletter_count = numel(uniq_lower_letters) % number of elements in uniq_lower_letters\nla_pangram = letter_count == 26 % is letter count equal to 26?\n</code></pre>  Notice for each step that we create a variable and then input that variable into the function in the next line.</p> <p>Also notice that our algorithm has fewer steps than the prototype, because we didn't call the <code>unique</code> function twice. We only need to call it once. And we didn't count the letters until the very end. </p> <p>MODULE COMPLETE Good job. You made it.</p>"},{"location":"matlabBasics/MatlabIntro/","title":"Muddling Through MATLAB","text":"<p>The No Good, Very Bad, MATLAB User Guide You Never Wanted</p> <p>So, you're being forced to learn computer programming. Don't worry. It's not that bad once you get the hang of things.</p> <p>Let me ask you a question:</p> <ul> <li>Can you read?</li> <li>Are you good at copying and pasting?</li> <li>Can you point and click on things?</li> <li>Do you know how to make a list of instructions?</li> </ul> <p>Alright, that's more than one question, but if you can do most of the above then you too can barely learn to program.</p> <p>Learning to program is a lot like learning a foreign language. You start completely lost. Then, slowly you start to understand a word here and there. And then suddenly, it clicks, and you're smoking and chatting away with your new friends in Italy.</p>"},{"location":"matlabBasics/MatlabIntro/#so-what-is-programming-anyway","title":"So, what is programming, anyway?","text":"<p>Computer programming is primarily a written language where you write a sequence of words and phrases to tell a computer what to do. And like all written languages, there are specific rules on the order of the words, the spacing, and the punctuation. These rules are called syntax. And syntax matters, critically. Turns out that your English teacher was right.</p> <p>The biggest hurdle to learning computer programming is getting the syntax just right. This is also the source of most frustration.</p> <p>Violent Syntax</p> <p>Consider the following fairly innocuous sentence:</p> <p>The Panda eats shoots &amp; leaves.</p> <p></p> <p>\u2026Here, the panda is enjoying a nice, leafy meal.</p> <p>But the meaning of the sentence changes violently with the addition of a single comma:</p> <p>The Panda eats, shoots &amp; leaves</p> <p></p> <p>\u2026Now the Panda is a wanted criminal and on the run. </p> <p>See Lynne Truss's book \"Eats, Shoots and Leaves\" for more such delightful examples in the English language.</p> <p>Bottom line: Computers are dumb and don't get nuance. If you say something just a little wrong, the programming language will fail until you state your command in the precise way that the computer was expecting. It's kind of like using OK Google, Siri, or Alexa, but instead of just shouting at an inanimate object, you are also pounding on the keyboard.</p>"},{"location":"matlabBasics/MatlabIntro/#the-matlab-programming-language","title":"The MATLAB Programming Language","text":"<p>In this guide, we will cover the fundamentals of MATLAB as we learn computer programming. MATLAB stands for MATrix-LABoratory. A matrix is a data type similar to a spreadsheet. Matrices are in fact the main data structure of digital images (We'll get into what a data structure means soon, but for now just roll with it). MATLAB is very good at handling matrices, which is one of the reasons why we are learning this language in the first place. MATLAB also has excellent documentation and a great integrated development environment that simplifies the learning process.</p> <p>Now, you may hear some people malign the choice of MATLAB. Why aren't you learning Python, Java, or some other flavor of the month? Ignore these people. They likely don't have an academic license for MATLAB like we do. And MATLAB includes some nice tools to help soothe the pain of learning programming. Plus, it really doesn't matter what language you use to learn computer programming because, in the end, it is all just syntax. Just like it is easier to learn Italian after learning how to speak Spanish, learning MATLAB makes it easier to learn other programming languages. And, beyond MATLAB, learning programming will give you the foundation to understand the digital underpinnings of other data analysis software so that when you learn new software, even if there is no programming involved, you will be primed to more quickly understand how the software works and how to get the most out of that software.</p> <p>What so bad about Excel?</p> <p>One of the reasons that we are learning a programming language like MATLAB is that spreadsheets, like those created by Excel, are infamously known to be riddled with errors, especially complex spreadsheets with lots of formulas. Such formulas are hard to track, especially when there are a lot of cells and it's easy to make mistakes. Even worse, just opening an excel file can create issues. Consider the example discussed in this article, which discusses the perils of Autocorrect in Excel spreadsheets for gene research. Apparently, just opening an excel file can activate the autocorrect \"feature\", which will dutifully go through all of the cells and change perfectly good gene names, like MARCH1 to a date. The issue was so bad that they had to rename the gene name in order to avoid this problem.</p>"},{"location":"matlabBasics/MatlabIntro/#user-guide-conventions","title":"User Guide Conventions","text":"<p>As we move forward, we will assume that you are already familiar with the MATLAB Desktop, especially the Command Window (and command line), the Workspace, and the Current folder. A lot of this information and more can be found in the freely available MATLAB Onramp tutorial, which you should definitely complete before going forward with this resource. You should also know what a live script is and how to create one.</p> <p>That's right. You're going to have to learn some of this stuff on your own.</p> <p>But you can handle it.</p> <p>Warning</p> <p>The following contains actual programming concepts. The learning starts now.</p> <p>This guide is broken up into different learning modules that cover one specific programming concept (like Variables or Functions).</p> <p>Throughout the modules, the following conventions are used:</p> <ul> <li> <p>MATLAB <code>functions</code> and <code>variables</code> are bold or italicized, respectively.</p> </li> <li> <p>Code blocks that contain MATLAB code are lightly shaded, as follows:</p> </li> </ul> <pre><code>version\n</code></pre> <p>\u2026The command <code>version</code> just reports the current version of MATLAB. Since there is just one line of code, there is just one line number: <code>1</code>.</p> <p>Many of these examples are designed to be copied directly into MATLAB, so you can try programming on your own. Notice if you hover over the lightly shaded area, a copy icon will appear. If you click on the icon, the code will be copied to your clipboard and you can then just paste into MATLAB</p> <p>For clarity, I will often include the output that is spit out after you enter a command in MATLAB. This code should not be copied or pasted\u2014you'll probably get an error if you do. So, I will differentiate the output text in two ways:</p> <ol> <li>The title of the code block will often be \"result\".</li> <li>There will be no line numbers on the left-hand side of the code block.</li> </ol> <p>For example, the following code block contains the output found in the command line after you execute the <code>version</code> command above.</p> <p>Don't copy or paste code that doesn't have line numbers.</p> <p>result<pre><code>ans =\n\n    '24.1.0.2537033 (R2024a)'\n</code></pre> Notice that the above code block is titled result and there are no line numbers on the left-hand side.</p> <p>Try it now. Copy the <code>version</code> command above and paste it into the Command Line in MATLAB. After you hit enter you should get an output similar to what I got (It may be different if you are using a different version of MATLAB).</p>"},{"location":"matlabBasics/Numeric/","title":"Numeric Arrays","text":"<p>for dealing with numbers</p> <p>Numeric arrays contain numbers (as opposed to characters or booleans).</p> <p></p>"},{"location":"matlabBasics/Numeric/#syntax-overview","title":"Syntax Overview","text":"Syntax Special Character Meaning n = 5 = assign the value 5 to the variable n n = [1 3 4 5] [ ] Concatenates numeric values into the row vector n n = [1; 3; 4 5] ; Semicolon means the new line. Concatenate into column vector n = 1:10 : Create a row vector with the values 1 through 10 n = 2:2:8 : Create a row vector of even numbers from 2 to 8 n(2) ( ) Index the second element from the variable n n(1, 3) ( ) Index first row, third column m = n' ' Transpose (swap row and column indices) n = [ ] [ ] Delete all elements from n"},{"location":"matlabBasics/Numeric/#relevant-mathworks-documentation","title":"Relevant Mathworks Documentation","text":"<ul> <li> <p>Matrices and Arrays</p> </li> <li> <p>Array Indexing</p> </li> <li>Operators and Special Characters</li> </ul>"},{"location":"matlabBasics/Numeric/#storing-numbers","title":"Storing Numbers","text":"<p>When you want to store a number in a variable, you need to create a numeric array. This is very easy to do in MATLAB.</p> <p>Assigning the value 5</p> <p>Simply type the number 5 in the command window:</p> <pre><code>5\n</code></pre> result<pre><code>ans = \n    5\n</code></pre> <p>Notice that when you type the number <code>5</code> in the command window, MATLAB automatically creates a variable called <code>ans</code> and places that variable in the workspace.</p> <p>Technical Term Alert</p> <p>A variable with just a single value (numeric or otherwise) is commonly referred to as a SCALAR. (1)</p> <ol> <li>Technical Annoyance. Technically, all MATLAB variables are matrices. So, even though our new variable can be called a scalar, it is stored in MATLAB as a 2D matrix.</li> </ol> <p>If you double-click on <code>ans</code> in the workspace, you will open up a new window called the Variable Editor.</p> <p></p> <p>In the Variable Editor, you can explore the contents of any variable in the workspace. Notice that variable <code>ans</code> looks like a spreadsheet (because its data structure is a 2D array). Also, notice that the number <code>5</code> was automatically placed in the top left corner of this matrix. This position has an index of <code>1</code> or <code>(1,1)</code>.</p> <p>Warning</p> <p><code>ans</code> is a reserved name in MATLAB. DO NOT name any of your variables <code>ans</code> or you will get an unexpected result or an error. Consider what happens when you type another number in the command window:</p> <pre><code>10\n</code></pre> result<pre><code>ans =\n     10\n</code></pre> <p>Notice how the value for <code>ans</code> has been replaced with the number <code>10</code>, simply by typing <code>10</code> in the command window. The <code>5</code> is gone.</p>"},{"location":"matlabBasics/Numeric/#assigning-arrays","title":"Assigning Arrays","text":""},{"location":"matlabBasics/Numeric/#creating-a-numeric-vector","title":"Creating a numeric vector","text":"<p>Since the basic MATLAB data structure is a matrix, it is quite easy to assign an array of numbers to a numeric variable. To do so, use the following syntax.</p> <p><code>name_of_variable = [array of numbers]</code></p> <p>In this syntax, the square brackets ( <code>[ ]</code> ) are used to concatenate a collection of numbers into an array.</p> <p>For example, type the following in the command window:</p> Concatentating numeric values<pre><code>b = [1 2]\n</code></pre> <p>You should now see a variable called <code>b</code> in the workspace. Double-click on this variable to open up the variable editor:</p> <p></p> <p>The value <code>1</code> is stored in the top left corner position, or index <code>(1,1)</code>, The value <code>2</code> is stored one element over in index <code>(1,2)</code>.</p>"},{"location":"matlabBasics/Numeric/#creating-a-numeric-matrix","title":"Creating a numeric matrix","text":"<p>To add a second row to an array, you use the semicolon <code>;</code>. The semicolon indicates a line break in a matrix. For example, type the following in the command window:</p> <p>Use the Semicolon to create a new row in a matrix</p> <pre><code>bears = [30 40; 50 60]\n</code></pre> result<pre><code>bears =\n    30    40\n    50    60\n</code></pre> <p>Inspecting the <code>bears</code> variable reveals the following matrix with two rows of data\u2026</p> <p></p> <p>\u2026with numbers in the standard index positions of <code>(1,1)</code>, <code>(1,2)</code>, <code>(2,1)</code>, and <code>(2,2)</code>.</p> <p>Fun Fact: special characters can mean more than one thing</p> <p>The semi-colon is also used to indicate the end of a programming line and suppresses output to the command window. This is called overloading a function, kind of like we are overloading you with all these fun little arcane factoids. We'll get to using semi-colons at the end of a line in a later module.</p>"},{"location":"matlabBasics/Numeric/#quickly-generating-arrays","title":"Quickly Generating Arrays","text":"<p>The colon character <code>:</code>  can be used to automatically generate an increasing or decreasing series of numbers, as follows:</p> The colon can be used to create a range of numbers<pre><code>a = 1:10\nb = 1:2:10\nc = [1:10 ; 11:20]\n</code></pre> <p>After executing the above lines in the command window, you should see the following variables in the workspace:</p> <p></p> <p>The variable <code>a</code> is filled with numbers 1 through 10. The variable <code>b</code> has only odd numbers from 1 to 9. The command <code>1:2:10</code> indicates to skip every other number. Also note that <code>c</code>  has two rows (Size: 2 X 10). To create <code>c</code>, we had to use the concatenating square brackets and a semi-colon. The semi-colon indicates \"new row\" in the array.</p> <p>Don't forget your square brackets!</p> <p>What happens if you don't use the square brackets when assigning data to a variable? Consider the following:</p> ChallengeAnswer <p>What values do you think <code>c</code> will end up after this line of code? Try it now in the command window</p> <p><pre><code>c = 1:10; 11:20\n</code></pre> Review the workspace. Does the variable <code>c</code> have the expected values? What about the variable ans?</p> <pre><code>c = 1:10; 11:20\n</code></pre> result<pre><code>ans =\n\n    11    12    13    14    15    16    17    18    19    20\n</code></pre> <p>The result is the assignment of values to two different variables. The values 1 through 10 are assigned to the variable <code>c</code> while the values 11 through 20 are assigned to the variable <code>ans</code>. Why <code>ans</code>? Because no explicit variable was indicated in the second line of code. Without the square brackets, the semi-colon means  \"new line of code\", which is the same as if you typed two separate lines of code in the command window, like this:</p> <pre><code>c = 1:10\n11:20 \n</code></pre> <p>This is why programming is hard. Notice that we didn't get an error, we just got something unexpected. You always have to be very careful with your syntax or you might get an unexpected result...</p>"},{"location":"matlabBasics/Numeric/#series-functions","title":"Series functions","text":"<p>There are many functions that can create a series of numbers.</p> <p>For example, the function <code>ones</code> accepts inputs to indicate how many ones it should create</p> Create Array of Ones<pre><code>c = ones(1,10)\n</code></pre> <p>The inputs into <code>ones</code> indicates the following: 1) The first input is the number of rows. 2) the second input is the number of columns.</p> result<pre><code>c =\n\n     1     1     1     1     1     1     1     1     1     1\n</code></pre> <p>Similarly, the function <code>zeros</code> creates a series of zeros.</p> Stack a bunch of zeros<pre><code>d = zeros(10,1)\n</code></pre> <p>\u2026Notice how the inputs into <code>zeros</code> are similar to the inputs into <code>ones</code>: The first input is the number of rows and the second input is the number of columns</p> result<pre><code>d =\n\n   0\n   0\n   0\n   0\n   0\n   0\n   0\n   0\n   0\n   0\n</code></pre> <p>The function repmat creates an array that repeats the inputted data. Here we take the array <code>1 2</code> and repeat it 10 times across the rows. The third input, <code>1</code>, indicates no repeating across columns (Just one column of data).</p> Repeat Array<pre><code>e = repmat(1:2,10, 1)\n</code></pre> result<pre><code>e =\n\n     1     2\n     1     2\n     1     2\n     1     2\n     1     2\n     1     2\n     1     2\n     1     2\n     1     2\n     1     2\n</code></pre>"},{"location":"matlabBasics/Numeric/#challenge-series-functions","title":"Challenge: Series Functions","text":"What do you the think would happen if we changed the 3rd input in repmat to 2? Repeat Array<pre><code>e = repmat(1:2,10, 2)\n</code></pre> <pre><code>e =\n\n    1     2     1     2\n    1     2     1     2\n    1     2     1     2\n    1     2     1     2\n    1     2     1     2\n    1     2     1     2\n    1     2     1     2\n    1     2     1     2\n    1     2     1     2\n    1     2     1     2\n</code></pre> <p>You would get an extra set of columns containing the repeated array <code>1 2</code></p>"},{"location":"matlabBasics/Numeric/#indexing-arrays","title":"Indexing Arrays","text":"<p>To index a numeric variable, you simply use the parentheses <code>( )</code> after the name of the variable. The following shows the equivalent indexing that you can use in MATLAB: linear or standard indexing.</p> <p></p>"},{"location":"matlabBasics/Numeric/#linear-indexing","title":"Linear indexing","text":"<p>Linear indexing in MATLAB uses the COLUMN MAJOR indexing scheme, in which elements are numbered first by row, then by column.</p> <p><code>name_of_variable(linear_index)</code></p>"},{"location":"matlabBasics/Numeric/#standard-indexing","title":"Standard indexing","text":"<p>Standard indexing requires an index for each dimension. For matrices, the first index ALWAYS refers to the row and the second ALWAYS refers to the column</p> <p><code>name_of_variable(row_index, column_index)</code></p> <p>Indices in MATLAB always start at 1</p> <p>You cannot have an index of zero. That is, zero cannot be used as an index for either method. There is no Zeroth element, zeroth row, or zeroth column. This differs from other computer programming languages, such as java or python, which start at zero.</p>"},{"location":"matlabBasics/Numeric/#comparing-linear-to-standard-indexing","title":"Comparing Linear to Standard indexing","text":""},{"location":"matlabBasics/Numeric/#vector-indexing","title":"Vector Indexing","text":"<p>To compare the two indexing methods, let's use the variable <code>b</code>, which we previously assigned the following values:</p> b<pre><code>ans =\n     1     3     5     7     9\n</code></pre> <p>Indexing Comparison</p> <p>Standard indexing</p> First Row, Second Column<pre><code>b(1,2)\n</code></pre> result<pre><code>ans = \n    3\n</code></pre> <p>Linear Indexing equivalent</p> <p>2nd Element<pre><code>b(2)\n</code></pre> \u2026notice we just use one number here.</p> <p>result<pre><code>ans = \n    3\n</code></pre> \u2026and we get the same element out</p>"},{"location":"matlabBasics/Numeric/#matrix-indexing","title":"Matrix Indexing","text":"<p>Things become a little more complicated when variables are 2D matrices. Recall that linear indexing is column-major. This means that each element in the matrix is indexed first by row and then by column. So, if you have more than one row of data in your matrix, you may get unexpected results if you are not careful.</p> <p>For example, again consider the variable <code>bears</code>, which has two rows and two columns:</p> <p></p> <p>Linearly, the third index refers to the third element counting columnwise:</p> Linear Indexing: Third Element<pre><code>bears(3)\n</code></pre> result<pre><code>ans = \n    40\n</code></pre> <p>The equivalent standard index is:</p> Standard Index Equivalent: 1st row, 2nd col<pre><code>bears(1,2)\n</code></pre> result<pre><code>ans = \n    40\n</code></pre> <p>Both methods access the same element in <code>bears</code>.</p>"},{"location":"matlabBasics/Numeric/#range-indexing","title":"Range Indexing","text":"<p>You can also use a combination of indexing and the colon special character to access a range of indices in a matrix.</p> <p>Consider the variable <code>c</code>:</p> <p></p> <p>Standard Indexing using the colon operator</p> <p>Using standard indexing, you can index elements 2 through 4  from the second row in the variable <code>c</code> using the following syntax:</p> Indexing c: Second Row, Columns 2-4<pre><code>c(2,2:4)\n</code></pre> result<pre><code>ans = \n    12    13   14\n</code></pre> <p>Remember, for standard indexing the first number in the number pair always indicates row, while the second number (or numbers) indicates columns.</p> <p>If you want all the elements from the second row of a variable, you would use the colon alone, as in this syntax:</p> Indexing c: Second row, All columns<pre><code>c(2,:)\n</code></pre> result<pre><code>ans =\n    11    12    13    14    15    16    17    18    19    20\n</code></pre> <p>Notice that we have placed a colon in the column position. <code>(2,:)</code> means 'second row, all' columns.</p> <p>Linear Indexing using the Colon Operator</p> <p>Consider the following:</p> <p>Linear Indexing: elements 4 through 8<pre><code>c(4:8)\n</code></pre> Even though there are two numbers inside the parentheses, they are separated by a colon, not a comma. So, MATLAB interprets this syntax to mean \"use Linear Indexing\" to get the elements 4 through 8.</p> result<pre><code>ans =\n    12     3    13     4    14\n</code></pre> <p>\u2026and we get the contents from elements 4-8.</p> <p>Notice that when we use linear indexing on a matrix, we get a strange collection of elements from the variable, in no particular order. To understand why we got the results that we got, we need to map the linear indices 4-8 to the standard indices. Remember, linear indexing is column-major, so, the indices in variable <code>c</code> map as follows:</p> Linear Row Column 4 2 2 5 1 3 6 2 3 7 1 4 8 2 1 <p>As we can see, we are pulling numbers from different rows, which is why they are returned out of numerical order. Also, even though values 3 and 4 were found in row 1, while values 12, 13, and 14 were  found in row 2, we still got a <code>1x5</code> vector, instead of a matrix. This is because MATLAB doesn't know how to organize the elements, since we accessed an odd number of elements\u2014matrices can only be formed with an even number of elements. So MATLAB just spits out the numbers in a vector, in the sequence that it accessed them.</p> <p>TIP: Only use Linear Indexing for Vectors</p> <p>For the most part, only use linear indices when you have a vector (a single row or column of data). That way, you can avoid any unexpected results.</p> <p>Note</p> <p>There is another major type of indexing, called logical indexing. Please refer to the content page on Logical Arrays for more information.</p>"},{"location":"matlabBasics/Numeric/#challenge-indexing","title":"Challenge: Indexing","text":"<p>As we have seen, the colon can be used to mean \"range\", as in 1 to 10, or \"all\", when used alone, as in \"all columns\".</p> <p>Challenge: Indexing with the colon</p> QuestionAnswer <p>So, what do you think the following syntax means?</p> <pre><code>c(:)\n</code></pre> <p>What result will you get? Try it now in the command window. </p> <p>You get a column vector of all the elements.</p> <pre><code>c(:)\n</code></pre> result<pre><code>c(:)\nans =\n\n    1\n    11\n    2\n    12\n    3\n    13\n    4\n    14\n    5\n    15\n    6\n    16\n    7\n    17\n    8\n    18\n    9\n    19\n    10\n    20\n</code></pre> <p>Since you are using just one colon, you are using linear indexing. So, in this context, you are requesting \"all elements\". And you get all of the elements from <code>c</code>, in linear index order, which, as we have already discussed is column-major (first count down the rows and then across columns).</p> <p>Tip</p> <p>Indexing with a single colon is very useful when you are trying to quickly reshape a matrix into a vector. We will use this syntax often, especially to simplify mathematical calculations.</p> <p>Bonus Challenge</p> QuestionAnswer <p>What do you think this syntax returns?</p> <p><pre><code>c(:,:)\n</code></pre>  Try it now. Can you think of a simpler syntax to use instead?</p> <p>c(:,:)<pre><code>ans =\n\n 1     2     3     4     5     6     7     8     9    10\n 11    12    13    14    15    16    17    18    19    20\n</code></pre> You simply get the contents of the variable, in matrix form. You could get a similar result by just entering <code>c</code> in the command window.</p>"},{"location":"matlabBasics/Numeric/#deleting-elements-from-an-array","title":"Deleting Elements from an Array","text":""},{"location":"matlabBasics/Numeric/#empty-an-entire-array","title":"Empty an Entire Array","text":"<p>You can empty an array by assigning to the array an empty pair of square brackets. Consider the following:</p> <p>Example: Delete all elements</p> <p>First, let's create a numeric array, <code>a</code>, and fill it with some numbers.</p> Assign the values 1 through 10 to a<pre><code>a = 1:10\n</code></pre> <p>result<pre><code>a =\n    1     2     3     4     5     6     7     8     9    10\n</code></pre> \u2026<code>a</code> is a perfectly nice numeric array containing the values 1 through 10.</p> <p>But if we then assign to <code>a</code> the empty brackets\u2026</p> <p>Assign the Empty Brackets to a<pre><code>a = []\n</code></pre> result<pre><code>a =\n    []\n</code></pre></p> <p><code>a</code> is left an empty husk of its former self (with no elements or value). </p> <p>We can test this by using the function size on <code>a</code></p> Get size of a<pre><code>size(a)\n</code></pre> <p>result<pre><code>ans =\n\n    0     0\n</code></pre> \u2026we get <code>0 0</code>, which means \"No Rows, \"No Cols\". Like I said, empty.</p> <p>But even though it's empty, the variable remains in the workspace, ready to be re-injected with vigor and vitality (and some data) when needed. </p> <p>If you would like to initialize an array but leave it empty, you simply assign the empty brackets on initialization:</p> <pre><code>i = []\n</code></pre> <p>After this command, MATLAB can recognize the variable <code>i</code> and fill it with content using the proper syntax.</p>"},{"location":"matlabBasics/Numeric/#elemental-deletions","title":"Elemental deletions","text":"<p>Sometimes you want a little more surgical precision in your deletions. You can delete a selection of elements from an array using a combination of indexing and the empty brackets.</p> <p>To delete one element, just index one element, as follows:</p> <p>Example: Delete One Element</p> <p>Recall that the variable <code>b</code> is a <code>1x5</code> vector containing the odd numbers from 1 to 9:</p> b<pre><code>ans =\n    1     3     5     7     9\n</code></pre> <p>If we assign the empty brackets to the third element\u2026</p> Delete Element 3<pre><code>b(3) = []\n</code></pre> result<pre><code>    b =\n    1     3     7     9\n</code></pre> <p>\u2026The third element, containing the value 5, is *poof* gone. <code>b</code> is now a <code>1x4</code> vector</p> <p>What if we tried to delete one element from a matrix? What would happen to our matrix?</p> <p>Example: Deleting an Element from a Matrix</p> <p>Consider the following matrix:</p> matrix d<pre><code>d = [1 2 3; 4 5 6; 7 8 9]\n</code></pre> <p>result<pre><code>d =\n\n 1     2     3\n 4     5     6\n 7     8     9\n</code></pre> If we delete the second element\u2026</p> Delete Element 2<pre><code>d(2) = []\n</code></pre> <p>result is a vector<pre><code>d =\n\n 1     7     2     5     8     3     6     9\n</code></pre> \u2026 <code>d</code> is now a vector because we ended up with an uneven number of elements and  MATLAB could not organize these elements into a matrix. Notice that the order of the elements were returned in column-major order from the original matrix (minus the value <code>4</code>).</p> <p>If we want to delete an entire column from a matrix, we use a combination of the square brackets and indexing, as follows:</p> <p>Example: Delete Row from variable</p> <p>Recall that the variable <code>c</code> is a <code>2x10</code> matrix containing the following:</p> c<pre><code>c =\n\n    1     2     3     4     5     6     7     8     9    10\n    11    12    13    14    15    16    17    18    19    20\n</code></pre> <p>We can delete the fourth column from <code>c</code> using the following syntax:</p> Delete all rows, 4th column<pre><code>c(:,4) = []\n</code></pre> result<pre><code>c =\n    1     2     3     5     6     7     8     9    10\n    11    12    13    15    16    17    18    19    20\n</code></pre> <p>\u2026The 4th column containing the values <code>4; 14</code> has been removed from <code>c</code> so that it is now a <code>2x9</code> matrix </p>"},{"location":"matlabBasics/Numeric/#challenge-deleting-elements","title":"Challenge: Deleting elements","text":"<p>Challenge: Delete row</p> QuestionAnswer <p>How would you delete the first row in the variable <code>c</code>?</p> <pre><code>c(1,:) = [];\n</code></pre> result<pre><code>c =\n\n11    12    13    15    16    17    18    19    20\n</code></pre> <p><code>c</code> is now a <code>1x9</code> vector</p>"},{"location":"matlabBasics/Numeric/#transposing-arrays","title":"Transposing Arrays","text":"<p>Transposing interchanges the row and column index for each element. You transpose a matrix in MATLAB using the apostrophe <code>'</code> using the following syntax:</p> <p><code>name_of_variable'</code></p> <p>Example</p> <p>Recall the contents of variable <code>a</code></p> <p>Variable a<pre><code>a =\n\n 1     2     3     4     5     6     7     8     9    10\n</code></pre> <code>a</code> is a row vector. </p> <p>If we add a single quote after the variable name, we get\u2026</p> <p>a transposed<pre><code>&gt;&gt;a'\nans =\n    1\n    2\n    3\n    4\n    5\n    6\n    7\n    8\n    9\n    10\n</code></pre> \u2026 a column vector</p> <p>Congrats! You've made it to the end.</p>"},{"location":"matlabBasics/PlottingBasics/","title":"Basic Plotting","text":"<p>Once you have a figure with an axis (see previous section), you can then add a plot to that axis. MATLAB has extensive plotting capabilities, including bar, scatter, and line plots.</p>"},{"location":"matlabBasics/PlottingBasics/#overview","title":"Overview","text":""},{"location":"matlabBasics/PlottingBasics/#functions-you-should-know","title":"Functions You Should know","text":"<ul> <li> <p><code>plot</code></p> </li> <li> <p><code>scatter</code></p> </li> <li> <p><code>bar</code></p> </li> <li> <p><code>histogram</code></p> </li> <li> <p><code>boxchart</code></p> </li> <li> <p><code>title</code></p> </li> <li> <p><code>xlim</code> and <code>ylim</code></p> </li> <li> <p><code>xlabel</code> and  <code>ylabel</code></p> </li> </ul>"},{"location":"matlabBasics/PlottingBasics/#useful-references","title":"Useful References","text":"<p>The following site is an excellent resource for comparing types of plots and determining when and how you should use them:</p> <ul> <li>Storytelling with Data</li> <li>MATLAB Blog: Making even Prettier Graphs</li> </ul> <p>Not sure whether you should use a bar chart or a box plot? Check out these articles:</p> <ul> <li>Bar charts and box plots: this article in Neuron nicely summarizes when you should use a bar plot and when you should use a box plot.</li> <li>Box Plots v Bar Plots: this author falls strongly in the box plot camp</li> </ul> <p>Interested in learning more about Swarm charts? Read these articles:</p> <ul> <li>Box plot Alternatives</li> <li>Better Data Visualization Using Beeswarm Charts</li> </ul>"},{"location":"matlabBasics/PlottingBasics/#plots-tab","title":"Plots Tab","text":"<p>The simplest way to explore MATLAB's plotting capabilities is through the  \"Plots\" tab in the ribbon interface.</p> <p></p> <p>Note</p> <p>To actually select an option in the Plots Tab, you will need to first select a variable in the workspace that is capable of being plotted as the selected plot type (e.g. a vector of numbers).</p>"},{"location":"matlabBasics/PlottingBasics/#sample-data","title":"Sample data","text":"<p>In this module, we will use a spreadsheet file that contains historical weather information from Denver in September, 2013. The following import this weather data directly into a table variable:</p> Load Weather Data<pre><code>url = \"https://raw.githubusercontent.com/salcedoe/MtMdocs/refs/heads/main/docs/matlabBasics/w2013.csv\";\nT = readtable(url)\n</code></pre> <p>you should end up with a table variable, <code>T</code></p> <p><code>T</code> is a 30X23 table variable. Each row in the table contains the data from a given day in September 2013, while each column contains a different metric like Max or Min Temperature.</p> <p>We can see the names of all the Column Headers in the table (remember, these are called variables in the table) by access the VariableNames field in the Table Properties, as follows:</p> <pre><code>T.Properties.VariableNames'\n</code></pre> result<pre><code>ans =\n\n  23\u00d71 cell array\n\n    {'MDT'                   }\n    {'MaxTemperatureF'       }\n    {'MeanTemperatureF'      }\n    {'MinTemperatureF'       }\n    {'MaxDewPointF'          }\n    ...\n</code></pre> <p>So, we have a lot of data to work with. Let's get cracking!</p>"},{"location":"matlabBasics/PlottingBasics/#function-call-commonalities","title":"Function Call Commonalities","text":"<p>In this module, we focus on the following plotting functions:  </p> <ul> <li>Line Plots: Used to track changes over short or long periods time. Use line plots for smaller changes and bar plots for larger changes</li> <li>Scatter Plots: - Also known as an X-Y plot. Used to determine the relationship between two different things (think correlations).</li> <li>Bar Plots: Used to graph categorical data or data sorted into groups. Keep the following in mind as you work through these examples.</li> <li>Hisgtograms: Used to plot the distribution of a set of observations</li> <li>Box charts: Used to plot the summary statistics for a set of observations</li> </ul> <p>The following are some similarities that can be seen across these functions:</p> <ul> <li> <p>The first input into these functions will typically be a vector of data. For the Bar and Line plots, we will be inputting the Y values. If you input only one vector of data, then x-values are assumed to simply increment by one.</p> </li> <li> <p>If you input two vectors of data, the first vector will be treated as the X-data and the second vector the Y-data.</p> </li> <li> <p>After the data inputs, the rest of the inputs typically deal with the appearance of the plot (such as line thick, bar color, or marker appearance).</p> </li> <li> <p>Line specifications are character shorthand for specifying how the plot should look like. For example, <code>'r--'</code> means plot a red, dashed line. Review the documentation for more information</p> </li> </ul>"},{"location":"matlabBasics/PlottingBasics/#line-plots","title":"Line Plots","text":"<p>Use Line plots (or line graphs) when you want to show value changing over time, or when you want to compare how several things change over time relative to each other. The key phrase \u201cover time,\u201d is your best clue to consider using a line graph for your data (SWD).</p> <p>To create a line graph in MATLAB, we use the function <code>plot</code>. There are several ways to call <code>plot</code>. Here are a few examples.</p>"},{"location":"matlabBasics/PlottingBasics/#example-1-line-graph-with-just-a-y-input","title":"Example 1: Line Graph with just a y- input","text":"<p>The change in daily temperature over the course of a month meets the criteria for a line graph rather nicely. In our table, <code>T</code>, we have a column called \"MaxTemperatureF\", which is simply the maximum temperature recorded on a given day. Recall that each row in the table represents a different day.</p> <p>Create a line graph using the function <code>plot</code> as follows:</p> Line Plot - one input<pre><code>y = T.MaxTemperatureF;\nplot(y)\n</code></pre> <p>\u2026In this function call, <code>plot</code> assumes that you are inputting the y-values, so it automatically provides the x-values (basically a vector matching the length of the input vector comprised of increasing integers starting at one). Notice that we did not first execute the functions <code>figure</code> and <code>axes</code>. We could have, but instead, we had MATLAB do it automatically. If there is no existing axis or figure, the MATLAB plotting functions will simply create one. But be careful\u2014if a plot already exists, MATLAB will simply overwrite the old plot with the new one, which may or may not be what you want.</p> <p>You can then add plot labels as follows:</p> Add Plot Labels<pre><code>xlabel('Day') % labels the x-axis\nylabel('Max Temperature (\u02daF)') % labels the y-axis\ntitle('Denver, Sept 2013') % adds an axis title\n</code></pre> <p>And the end result should look like this:</p> <p></p> <p>Here we plot a Line Graph of Maximum Daily Temperatures in Denver, 2013.</p>"},{"location":"matlabBasics/PlottingBasics/#example-2-line-graph-with-both-x-and-y-inputs","title":"Example 2: Line Graph with both x- and y- inputs","text":"<p>Our table <code>T</code> has a column called \"MDT\" which is simply the date of each day.  If we input two vectors into the function <code>plot</code>, these vectors are treated as X and Y inputs. Inputs beyond the first two inputs are treated as line specifications.</p> <p>Here we input the date as the X-data and the Minimum Daily temperature as the Y-data.</p> Line Plot - multiple inputs<pre><code>figure % create a new blank window\nx = T.MDT; % the date\ny = T.MinTemperatureF; % the minimum temp\nhp = plot(x, y, 'm:', 'LineWidth',2); % X-, Y-, and line spec inputs\nxlabel('Day') % labels the x-axis\nylabel('Minimum Temperature (\u02daF)') % labels the y-axis\ntitle('Denver 2013') % adds an axis title\n</code></pre> <p></p> <p>Notice in this plot how the date information from the \"MDT\" column is automatically displayed in a highly readable format on the x-axis. Also notice that line specification 'm:' indicated that function should plot a magenta, dotted line, while the paired input of \"LineWidth\", 2, indicated how thick the line should be (thicker than the default). Since we created a plot in the previous section, we call the function <code>figure</code> here to create a new window (and not overwrite the old plot)</p> <p>The function <code>plot</code> returns a handle to the line graph, assigned here to the variable <code>hp</code>. You can explore the properties of this object by simply typing <code>hp</code> into the command window:</p> <pre><code>hp\n</code></pre> Line Plot Handle Properties<pre><code>hp = \n\n  Line with properties:\n\n              Color: [1 0 1]\n          LineStyle: ':'\n          LineWidth: 2\n             Marker: 'none'\n         MarkerSize: 6\n    MarkerFaceColor: 'none'\n              XData: [1\u00d730 datetime]\n              YData: [1\u00d730 double]\n              ZData: [1\u00d70 double]\n\n  Show all properties\n</code></pre> <p>\u2026Notice the LineWidth property is set to 2 and the \"Color\" is set to [1 0 1], which is \"magenta\". You can change the property of the line graph by manipulating these fields. Try it out now. Add the following line after the plot function call and re-run the code block</p> Modify Plot Properties<pre><code>hp.Color = 'blue'\n</code></pre> <p>\u2026what happens?(1)</p> <ol> <li>The line turns blue</li> </ol>"},{"location":"matlabBasics/PlottingBasics/#example-3-multiple-plot-lines","title":"Example 3: Multiple Plot Lines","text":"<p>Multiple Line plots can be created in one function call simply by entering the x- and y- data in series. In this example, we input both the maximum and minimum temperatures.</p> Plot Multiple Lines<pre><code>figure % create a new blank window\n\nx = T.MDT;\ny1 = T.MinTemperatureF;\ny2 = T.MaxTemperatureF;\n\nhp = plot(x,y1,x,y2); % sequential x and y inputs\n\nxlabel('Day') % labels the x-axis\nylabel('Temperature (\u02daF)') % labels the y-axis\ntitle('Denver 2013') % adds an axis title\nlegend('minimum','maximum')\n</code></pre> <p>Notice that we input <code>x</code> twice into <code>plot</code>. First, as the <code>x</code> for T.MinTemperatureF line and then as the <code>x</code> for T.MaxTemperatureF line. Also notice the function call to <code>legend</code>, which allows us to add a legend to the plot.</p> <p></p>"},{"location":"matlabBasics/PlottingBasics/#line-plot-challenge","title":"Line Plot Challenge","text":"Challenge 1Challenge 2Answer 2 <p>Use the property inspector to manually change the line plot so that it looks like this:</p> <p></p> <p>Hint: Look under the \"Markers\" and \"Color And Styling\" tabs in the property inspector</p> <p>Challenge - Format the Line Plot Programmatically</p> <p>Review the MATLAB documentation for  plot and use a single call to plot to display the following:</p> <p></p> <p>Notice that we are adding a third line of data. You can find this data in table <code>T</code> T.MeanTemperatureF field. Don't forget to change the figure color to white. You will need to call following functions:</p> <ul> <li>figure</li> <li>plot</li> <li>xlabel</li> <li>ylabel</li> <li>legend</li> </ul> <p>In that order. And you will need to add a line specifications for each plot.</p> <pre><code>figure % create a new blank window\nhp = plot(T.MDT, T.MinTemperatureF,'-sq', T.MDT,T.MaxTemperatureF, '-o', T.MDT, T.MeanTemperatureF,'--'); % X-, Y-, and line spec inputs\n% hp.Color = 'blue';\nxlabel('Day') % labels the x-axis\nylabel('Temperature (\u02daF)') % labels the y-axis\ntitle('Denver 2013') % adds an axis title\nlegend('minimum','maximum','mean')\n</code></pre> <p>\u2026 Notice that the line specifications for each line immediate follow the x and y coordinates.</p>"},{"location":"matlabBasics/PlottingBasics/#bar-plots","title":"Bar Plots","text":"<p>Bar plots are great for reporting the counts of something. You typically use bar plots to graph categorical data or data sorted into groups.</p> <p>We use the function <code>bar</code> to create a bar plot. Here we plot the daily maximum temperatures in September:</p> Bar Plot<pre><code>figure;\nx = T.MDT; % dates\ny = T.MaxTemperatureF; % maximum temperatures\n\n% create bar plot\nbar(x,y,FaceAlpha=0.5); % FaceAlpha determines the transparency\n\n% label y-axis and title\nylabel(\"Temperature (\u02daF)\")\ntitle(\"Daily Max Temps, Denver CO\")\n</code></pre> <p></p> <p>In this plot, there are 30 bars, one for each day of the month. We increased the transparency of the bar color (using the FaceAlpha property) for aesthetic reasons\u2014full opaqueness (FaceAlpha=1) creates very dark blue bars. MATLAB automatically recognizes the date info in the MDT column, and nicely formats the x-axis with the dates. Notice how you can easily track the temperature trends throughout the month: our eyes are very good at comparing lengths when objects are aligned (SWD)</p> <p>If you want a horizontal bar plot, you need to use the function <code>barh</code>. Everything else is mostly same.</p> Horizontal Bar Plot<pre><code>barh(x,y,FaceAlpha=0.5);\nxlabel(\"Temperature (\u02daF)\") % label x-axis (instead of y-axis)\ntitle(\"Daily Max Temps, Denver CO\")\n</code></pre> <p></p>"},{"location":"matlabBasics/PlottingBasics/#distribution-plots","title":"Distribution Plots","text":"<p>Distribution plots are used to plot the frequencies of a set of observations.</p>"},{"location":"matlabBasics/PlottingBasics/#histograms","title":"Histograms","text":"<p>Histograms are used to plot the frequency distribution of a data set. These are different from bar plots, which are used to plot different categories of observations (see above). When you create a histogram, you group the data into bins and then plot the bins.</p> <p>For example, we can use a histogram to plot the distribution of the Maximum Temperatures in September.</p> Histogram of Max Temps<pre><code>x=T.MaxTemperatureF;\nhistogram(x)\ntitle('September, 2003. Denver, CO') % add a title\nylabel('Number of Days'); % label the y-axis\nxlabel('Maximum Temperature (\u02daF)'); % label the x-axis\n</code></pre> <p></p> <p>Here, instead of plotting every single temperature for every day, like we did with the bar plot, we bin the data into 1-degree bins, and then plot the bins (this is all handled by the <code>histogram</code> function). So, in this plot, 3 temperatures fell between 75.5 and 76.5. So, we got one bar spanning 75.5-76.5 with a height of 3. The histogram also gives us a nice overview of the temperature distributions. For example, we can see there was only one day with a temperature below 55\u02daF and relatively few days above 95\u02daC.</p> <p>Sometimes, the default bin selection used by <code>histogram</code> produces a plot that is a little sparse or doesn't quite represent the distribution as it should. You can manually set the numbers of bins used in the histogram by adding a second input to the function as follows:</p> Histogram of Max Temps<pre><code>x=T.MaxTemperatureF;\nhistogram(x,10) %  use 10 bins\ntitle('September, 2003. Denver, CO') % add a title\nylabel('Number of Days'); % label the y-axis\nxlabel('Maximum Temperature (\u02daF)'); % label the x-axis\n</code></pre> <p></p> <p>\u2026Here is the exact same data but using a histogram with just 10 bars (more of the temperature data have been binned together). In this histogram, you can see a little more shape to the distribution of temps.(1)</p> <ol> <li>Be careful when changing the number of bins that you use in a histogram. The proper number of bins used in a histogram is an arcane subject and there are many papers on the matter that are well beyond the scope of this module. Suffice it to say, you can risk misrepresenting the data if you use a number of bins that does not truly accurate represent the distribution of the data (e.g. overly binned so the the true shape of the distribution is hidden).</li> </ol>"},{"location":"matlabBasics/PlottingBasics/#box-plots","title":"Box Plots","text":"<p>A box plot is a visual representation of the summary statistics for the data. These plots show the median (line inside box), the interquartile range (the box), and the data range (the whiskers). You also have outliers (circles), which are data points that are 1.5 x the interquartile range.</p> <p></p> <p>The function <code>boxchart</code> creates box plots (1).</p> <ol> <li>There is also a function called <code>boxplot</code> that comes with the Statistics and Machine Learning Toolbox. Its plots are not quite as pretty, but you can have more control over the different aspects of the plot.</li> </ol> Box Plot of Max Temperatures<pre><code>boxchart(x)\nylabel('Max Temperature (\u02daF)') % label the y-axis\ntitle('September, 2003. Denver, CO') % add a title\n</code></pre> <p></p> <p>This plot represents the exact same data seen in the histogram above, but as a box plot. The box represents the interquartile range of data (or the middle half of the data) and ranges from 70\u02da-85\u02da F. This tells us that the middle half of the maximum temperatures fall in this range. The line inside the box is the median, which is 79.5\u02da F. So, we know that half of all maximum temperatures are above and the other half are below 79.5\u02da F. And the whiskers represent the range. So, as we saw in the histograms above, the range of temperatures fall between 53\u02da F and 97\u02da F.</p>"},{"location":"matlabBasics/PlottingBasics/#multiple-box-plots","title":"Multiple Box Plots","text":"<p>We can plot multiple box plots in the same axis by inputting a matrix of values. Let's plot the Min and Max Temperatures as box plots in the same figure:</p> Multiple Box Plots in same Axes<pre><code>figure % create a new figure\ny = [T.MinTemperatureF   T.MaxTemperatureF]; % create two-column matrix of data\nboxchart(y) % plot data as box plots\nxticklabels({'Min' 'Max'}) % change the tick label from a number to a label\nylabel('Temperature (\u02daF)') % add a label to the y-axis\n</code></pre> <p></p> <p>Box plots of  Minimum and Maximum temperatures. Here, we concatenate the Minimum and Maximum Temperatures into a 30X2 matrix and input that matrix into <code>boxchart</code>. We also turn <code>Notch on</code>, which adds notches to the sides of the boxes and can be used to statistically compare medians. When we input a matrix into <code>boxchart</code>, the default tick labels for the x-axis are <code>1</code> and <code>2</code>: <code>1</code> for the first column and <code>2</code> for the second column in the matrix. This is not especially informative, so we replace <code>1</code> and <code>2</code> with <code>'Min'</code> and <code>'Max'</code> using the <code>xticklabels</code> function.</p> <p>Inputting a matrix into <code>boxchart</code> only works if you have the same number of data points for each category (Min and Max). If you have a different number of data points for the different categories, then you can use a grouping variable as we discuss on the Group Statistics page.</p> How would you add a box of mean temperatures ('MeanTempF') to the axes above? <p>You would need to modify the y-input:</p> <pre><code>y = [T.MinTemperatureF T.MeanTemperatureF T.MaxTemperatureF]; % create three-column matrix of data\nboxchart(y,'Notch','on') % plot data as box plots\nxticklabels({'Min' 'Mean' 'Max'}) % add 'Mean' as a tick label\nylabel('Temperature (\u02daF)') % add a label to the y-axis\nylim([32 100]) % set y-axis limits\n</code></pre> <p></p> <ul> <li>Notice that we had to update <code>y</code> and the <code>xticklabels</code> input</li> </ul>"},{"location":"matlabBasics/PlottingBasics/#swarm-plots","title":"Swarm Plots","text":"<p>Swarm Charts are one-dimensional plots of all the data. So, we are not binning or summarizing the data\u2014we are showing all the data. These charts also use some math to create shapes that indicate regions of high density or outliers.</p> <p>Unlike the <code>boxchart</code> function, which accepts a single vector of data, the <code>swarmchart</code> function requires at minimum two inputs: an <code>x</code> and a <code>y</code> input. So, if you have a single vector of data to plot, like the Minimum Temperatures, you need to create an <code>x</code> vector of the same length, but with a constant value, like 1. In effect, you are creating a scatter plot, but where the x-coordinate for each data point is exactly the same.</p> <p>Here's an example of how to plot maximum temperatures as a swarm chart:</p> Swarm Chart of Max Temperatures<pre><code>figure(visible=\"on\");\nx = ones(height(T),1); % create a vector of ones for the x-coordinates\ny = T.MaxTemperatureF; % get the max temperatures as a vector\nswarmchart(x,y) % plot the swarm chart\nylabel('Temperature (\u02daF)') % add a label to the y-axis\nylim([32 100]) % set y-axis limits\n</code></pre> <p></p> <p>Swarm Chart of Maximum Temperatures. Temperature (\u02daC) is plotted along the y-axis, while the x-coordinates of the data points randomly jitter around 1. If we changed <code>x</code> from a vector of <code>1</code>'s to a vector of <code>100</code>'s, then the values would jitter around <code>100</code>.  Notice how the shape of the swarm is dependent on the distribution of the data: the widest part of the plot is along the median temperature of <code>79.5\u02daF</code>, whereas the narrowest parts of the plot have the fewest data points.</p>"},{"location":"matlabBasics/PlottingBasics/#multiple-swarm-charts","title":"Multiple Swarm Charts","text":"<p>To plot multiple swarm charts in the same plot, you stack vectors (instead of creating a matrix like for boxchart or barplot).</p> <p>In the following example, we plot both the Minimum and Maximum Temperatures. For the <code>x</code> input, we concatenate a series of <code>1's</code> followed by a series of <code>2's</code>. The we typecast this vector into a categorical array, so we can  associate the label \"Min\" with the value <code>1</code> and the label \"Max\" with the value <code>2</code>. For the <code>y</code>, we concatenate the Min and Max Temperatures into a single vector. And then, for a more pleasing aesthetic, we add some additional inputs into the function <code>swarmchart</code> to modify the face color, transparency, and jitter width of the data points.</p> Swarm Chart of Min and Max Temperatures<pre><code>x = [ones(height(T),1); ones(height(T),1)+1]; % stack 1's atop of 2's\nx = categorical(x, [1, 2], [\"Min\",\"Max\"]); % typecast to categorical: Min=1, Max=2\ny = [T.MinTemperatureF; T.MaxTemperatureF]; % stack MinTemps atop of MaxTemps\n\nswarmchart(x, y,...\n\"XJitterWidth\",0.5,... % reduce jitter displacement along the x-axis\n\"MarkerFaceAlpha\",0.25,... % marker face transparency\n\"MarkerFaceColor\",'b',... % marker face color\n\"MarkerEdgeColor\",\"b\",...\n\"MarkerEdgeAlpha\",0.75) % swarm chart\nylabel('Temp (\u02daF)')\nylim([32 100]) % set y-axis limits\n</code></pre> <p></p> <p>Min and Max Temperatures. While the temperature is still plotted along the y-axis, the x-axis now reads \"Min\" and \"Max\" instead of 1 and 2. Notice how we tightened up the spread of the data points by modifying \"XJitterWidth\" setting. By filling in the faces of the data points and adjusting the transparency, we also improve the aesthetics of the plot.</p> <p>A swarm chart can be extra informative when overlaid with a box plot. Review the Advanced Plotting: Overlays,Transparencies, and Tiling page for an example of how to do this.</p>"},{"location":"matlabBasics/PlottingBasics/#scatter-plots","title":"Scatter Plots","text":"<p>We use a scatter plot to visualize the relationship between two numerical variables. The shape of the plot can give you some indication as to the nature of that relationship. For example, a scatter plot in which the dots are higher on the right side of the plot vs the left side of the plot typically indicates that the two variables are positively correlated (When the x is high, the y is high).</p> <p>For example, we can use a scatter plot to visualize the relationship between minimum and maximum temperatures in a day, as follows:</p> Scatter Plot<pre><code>figure\n\n% get data\nx = T.MinTemperatureF;\ny = T.MaxTemperatureF;\n\n%plot \nhs = scatter(x, y, 50, 'black', 'filled'); % Marker Size 50, black, filled\nhs.MarkerFaceAlpha = 0.5; % change transparency of markers to 0.5\n\n% axis formatting\nxlabel('Minimum Temperature (\u02daF)',\"FontSize\",14) % add an x-label\nylabel('Maximum Temperature (\u02daF)', \"FontSize\",14) % add a y-label\ntitle('Denver - September 2013') % Add title\n</code></pre> <p>\u2026Here, we use the function <code>scatter</code> to generate a scatter plot. Unlike the <code>bar</code> or <code>line</code> functions, the <code>scatter</code> function requires that the first two inputs are x and y vectors.  After these inputs,  <code>scatter</code> allows for formatting specifications such as</p> <ul> <li>size of dots is 50</li> <li>color of dots is black</li> <li>dots are filled (a solid color,  not just outlines of circles)</li> </ul> <p>The order of these formatting inputs is critical, which you can review in the scatter documentation. If you assign an output from <code>scatter</code>, you get a handle, <code>hs</code> which allows you to modify the properties of the markers plotted. Here, we use <code>hs</code> to make the dots more transparent.</p> <p>And we get a scatter plot that looks like this:</p> <p></p> <p>Overall, the rising trend of the plot, with the dots higher on the right side, suggests that the two series are positively correlated, which makes sense for daily temperatures. Temperatures in any given day are usually highly correlated: if it's warm during the day, it will usually be warmer at night (unless a cold front comes sweeping in).</p>"},{"location":"matlabBasics/PlottingComponents/","title":"Basic Components of a Plot","text":"<p>For Visualizing Your Data</p> <p></p>"},{"location":"matlabBasics/PlottingComponents/#overview","title":"Overview","text":"<p>In this module, we discuss the basic components needed to create a plot. Specifically, we will learn about empty MATLAB windows, called figures, and empty axes (where the plots are added) called axes.</p>"},{"location":"matlabBasics/PlottingComponents/#things-you-should-know","title":"Things you should know","text":"<p>After this module you should be able to:</p> <ul> <li>Create a blank figure and add a blank axis to the figure</li> <li>Access and modify a figure or axis's properties using the 'Edit' menu</li> <li>Access and modify a figure's properties using the relevant handle and either dot notation or the <code>set</code> and <code>get</code> functions</li> <li>Tile multiple axes into the same figure</li> <li>Know all the listed important terminology and be able to use the listed important functions</li> </ul>"},{"location":"matlabBasics/PlottingComponents/#functions-you-should-know","title":"Functions you should know","text":"<p>You should know what these functions do and how to use them</p> <ul> <li> <p>figure</p> </li> <li> <p>axes</p> </li> <li> <p>tiledLayout</p> </li> <li> <p>nexttile</p> </li> </ul>"},{"location":"matlabBasics/PlottingComponents/#relevant-matlab-documentation-and-other-links","title":"Relevant MATLAB documentation and other links","text":"<ul> <li> <p>Graphics</p> </li> <li> <p>Graphics Objects</p> </li> <li> <p>Graphic Object Handles</p> </li> <li> <p>Graphic Object Properties</p> </li> <li> <p>Axis Toolbar: Interactively Explore Plotted Data</p> </li> <li> <p>Mathworks Blog: Creating Pretty Graphs</p> </li> </ul>"},{"location":"matlabBasics/PlottingComponents/#terminology-you-should-know","title":"Terminology you should know","text":"<p>You should be able to define the following terms and use them to discuss MATLAB figures and plotting:</p> <ul> <li> <p>Graphic Object: MATLAB components used to visualize data</p> </li> <li> <p>Root: The basic foundation on top of which everything else is run. You create the root object when you launch MATLAB</p> </li> <li> <p>Figure: a programmable window to which you can add graphic objects such as axes or ui objects (like buttons)</p> </li> <li> <p>Axes: an object to which you can add plots or images</p> </li> <li> <p>Handle: an object identifier. Every figure, axis, and control element has a handle</p> </li> <li> <p>Properties: the name, color, size, location, etc. of a graphic object</p> </li> </ul>"},{"location":"matlabBasics/PlottingComponents/#figures","title":"Figures","text":"<p>In MATLAB, a figure is a blank window that you can add stuff to. Think of a figure as a tabula rasa onto which you can add other things, like plots, or images, or even buttons.</p>"},{"location":"matlabBasics/PlottingComponents/#figure-creation","title":"Figure Creation","text":"<p>To create a new figure in MATLAB, simply type the command <code>figure</code> in the command window</p> Create a Figure<pre><code>figure\n</code></pre> <p>\u2026 and then you should see an empty window that looks like this:</p> <p></p> <p>\u2026Notice that your new figure comes preloaded with a lot of built-in functionality like a menubar and toolbar. You may or may not need this functionality, but it can be easily turned off.</p>"},{"location":"matlabBasics/PlottingComponents/#figure-properties","title":"Figure Properties","text":"<p>You can explore the properties of your new figure by selecting the \"Edit:Figure Properties...\" menu item. This command will bring up the \"Property Inspector\" window:</p> <p></p> <p>As you can see, the properties window has a series of collapsible tabs</p> <p>Let's explore these tabs by opening the \"Identifiers\" tab:</p> <p></p> <p>Here we find a series of properties related to the identification of the figure window</p> <p>We can rename our new figure by entering \"My first figure\" in the Name field.</p> <p></p> <p>Notice how the title bar of the figure changes to include our new figure name, and the Figure number</p> <p>If you want to remove the \"Figure 1:\" part of the title, simple click off the NumberTitle Check box.</p> <p></p> <p>If you prefer your windows in hot pink you change the color by clicking on the \"Window Appearance\" tab and modifying the \"Color\" property:</p> <p></p> <p>Here we used the dropdown menu to select Magenta, which has a color value of <code>1, 0, 1</code>.</p> <p>And now our figure is hot pink:</p> <p></p> <p>Much better.</p> <p>You can also hide the default toolbar by setting the \"ToolBar\" setting to \"none\". Or, if you don't want a menubar, set the \"MenuBar\" setting to \"none\". Almost any property of the figure can be adjusted in this fashion.</p> <p>In fact, the Property Inspector is a great way to inspect which properties can (or cannot) be adjusted, and what values they accept. You just need play around with the settings to get a feel for what's possible, most of which is likely beyond the scope of this course.</p> <p>You can read a full description of all the Figure Properties here.</p>"},{"location":"matlabBasics/PlottingComponents/#programming-figure-properties","title":"Programming Figure Properties","text":"<p>The Properties Inspector is what is known as a GUI (a graphics user interface), which simply means that you interact with the inspector using your mouse and clicking on buttons\u2014like how most software works. However, since MATLAB is a programming language, anything that you can accomplish with a click of a button, you can also accomplish using MATLAB code. Coding the properties of a figure to your specifications allows you to quickly recreate the settings of a figure in exactly the same way every time.</p> <p>You can programmatically change the properties of a figure in two ways:</p> <ol> <li>Through the <code>figure</code> function call</li> <li>Through the figure's handle.</li> </ol> <p>The first method assumes that you know the exact properties you want to set when creating the figure.</p>"},{"location":"matlabBasics/PlottingComponents/#figure-function-calls","title":"Figure Function Calls","text":"<p>Consider the following function call:</p> <pre><code>figure('Name','My Second Great Figure', 'Color', 'Red')\n</code></pre> <p></p> <p>Here we set the title of the figure to \"My Second Great Figure\" and the background color to red by inputting paired inputs in the function call. </p>"},{"location":"matlabBasics/PlottingComponents/#figure-handles","title":"Figure Handles","text":"<p>Once you have created the figure, you can access all of its properties through its figure handle. A figure handle is an identifier that is specific to an figure.</p> <p>Here we use a call to the <code>figure</code> function with no inputs to create a default figure and we assign the output from <code>figure</code> to <code>fh</code>.</p> <pre><code>fh = figure\n</code></pre> <p>\u2026<code>fh</code> is the figure handle. Its icon is a cube () and its class is \"Matlab.ui.Figure\", which basically means a graphical object.  (1)</p> <ol> <li>An Object is a computer element that can have both storage and functions. So, like a variable with some functions attached. Objects that have plots or images in them are called Graphic Objects.</li> </ol> <p>If you display <code>fh</code> in the command window, you will see a short list of its properties, including its name (no name) and color (a light gray).</p> result<pre><code>fh = \n\n  Figure (3) with properties:\n\n      Number: 3\n        Name: ''\n       Color: [0.9400 0.9400 0.9400]\n    Position: [1000 918 560 420]\n       Units: 'pixels'\n\n  Show all properties\n</code></pre> <p>\u2026A click on the \"Show all properties\" prints out the full list of the figure properties to the command window, which matches the list of properties that you can find in the Properties Inspector.</p> <p>The figure handle can be used to set the properties of a figure using the dot notation syntax as follows:</p> <pre><code>fh.Color = 'black'\n</code></pre> <p>\u2026The background color of the figure changes to black. </p> <p>Or change the name of your figure using this syntax:</p> <pre><code>fh.Name = 'My third awesome figure!'\n</code></pre> <p>To turn off the automatic figure numbering, type:</p> <pre><code>fh.NumberTitle = 'off'\n</code></pre> <p></p> <p>Pro-Tip</p> <p>Enter tab after typing <code>fh.</code> and you will get a scrollable pop-up menu listing all of the handle's fields</p> <p></p> <p>\u2026Type a few letters of the field you want to access and you can narrow down the selections to the field of interest. Select the property name you would like to access and hit ENTER. MATLAB will automatically complete typing the name for you.</p>"},{"location":"matlabBasics/PlottingComponents/#adding-stuff-to-figures","title":"Adding Stuff to figures","text":"<p>As previously discussed, figures are blank windows onto which you can add stuff. This stuff is added as a layer onto the figure. For example, you can add a blank axes to a blank figure. And then a line plot to the axes. The figure, the axes, and the line plot are all considered different graphic objects added to different layers of the figure. This layering systme is also known as the Parent-Child relationship between objects.</p>"},{"location":"matlabBasics/PlottingComponents/#parents-and-children","title":"Parents and Children","text":"<p>The Parent-child relationship describes the layering system in MATLAB. Children are added to parents. So, all graphic objects, including figures, have a parent-child relationship. For example, any new graphic object added to a figure is known as a child to that figure.</p> <p>Inversely, a figure is the parent to any and all graphic objects added to it. Think of children as layers added to the parent. The following organizational chart illustrates this relationship:</p> <p></p> <p>Parent-Child Relationships. In this diagram, every object (represented here as a rectangle) is a child of the object above it. And inversely, every object is the parent to the object below it.</p>"},{"location":"matlabBasics/PlottingComponents/#axes","title":"Axes","text":"<p>Axes serve as placeholders for plots. Axes cannot stand alone. They have to be added to figures. As such, axes are known as \"children\" of figures.</p> <p>You can add an empty axes to a figure by simply calling the <code>axes</code> function after calling the figure function, as follows:</p> Adding an axes to a new figure<pre><code>fh = figure; \nah = axes\n</code></pre> <p>And you get a figure with an axes</p> <p></p> <p>As you can see here, the axis has and x- and a y-axis. It even has limits for each axis (they both range from 0 to 1). The axis is smaller than the figure and it's default background is white (as opposed to the gray background of the figure).</p> <p>The variable <code>ah</code>  contains the axis handle to the axis.</p> Axes handle<pre><code>ah = \n\n  Axes with properties:\n\n             XLim: [0 1]\n             YLim: [0 1]\n           XScale: 'linear'\n           YScale: 'linear'\n    GridLineStyle: '-'\n         Position: [0.1300 0.1100 0.7750 0.8150]\n            Units: 'normalized'\n\n  Show all properties\n</code></pre> <p>You can click \"Show all properties\" in the  MATLAB command window and  MATLAB will print all of the axes properties to the Command Window.</p> <p>Notice that one of the properties of the axis is called 'Parent.' This property stores the handle to the parent figure. You can access the properties of the Parent figure using double dot notation, as follows:</p> Change Figure background<pre><code>ah.Parent.Color = 'white'\n</code></pre> <p>This changes the background of the figure to white and is the same as typing: <code>fh.Color = 'White'</code></p> <p>You can also remove the axis from the figure by deleting its handle using the function <code>delete</code></p> Remove axes from figure<pre><code>delete(ah)\n</code></pre> <p>Notice that after this command, only the axis disappears, not the figure.</p>"},{"location":"matlabBasics/PlottingComponents/#axes-property-functions","title":"Axes Property Functions","text":"<p>Axis property functions are helper functions that label the axes. The most common functions we will use in this tutorial are the following:</p> <ul> <li> <p>title: Add title to axes</p> </li> <li> <p>xlim: set x- and y-axis limits</p> </li> <li> <p>xlabel: add X- and Y- labels to axes</p> </li> <li> <p>legend: Add legend to axes</p> </li> </ul>"},{"location":"matlabBasics/PlottingComponents/#axes-toolbar","title":"Axes Toolbar","text":"<p>If you hover over an axis, you should see a pop-up toolbar that looks like this:</p> <p></p> <p>\u2026If you don't see the toolbar, make sure Plot Edit mode is turned off by clicking on the White Selection arrow.</p> <p>This toolbar has several functions, including:</p> <ul> <li> <p>: Save and Copy</p> </li> <li> <p>: Data Brushing: allows you to replace or copy specific datapoint, like outliers</p> </li> <li> <p>: Data Tips: allows you to explore specific data points (shown in figure above, the x,y data points)</p> </li> <li> <p> - Pan: move the plot around (when zoomed in)</p> </li> <li> <p>: Zoom: zoom in and out</p> </li> <li> <p> - Restore: resets view back to original</p> </li> </ul>"},{"location":"matlabBasics/PlottingComponents/#saving-plots-from-axes-toolbar","title":"Saving Plots from Axes toolbar","text":"<p>To save your plot, click on the save icon in the axes toolbar or go the File menu in the figure's menubar and select \"Save as...\"</p> <p>For emailing or to embed the plot into digital presentations, choose the .PNG format, which helps reduce file size. For printing, choose the .SVG or .PDF format. These formats allow the plot to be modified using other software, such as  Adobe Photoshop or Illustrator, to change the color of the bars or the fonts. This format also provides a greater resolution range. However, not all imaging packages can open an .svg file and sometimes some complex raster images do not reproduce properly.</p>"},{"location":"matlabBasics/PlottingComponents/#copying-plots-from-axes-toolbar","title":"Copying plots from Axes Toolbar","text":"<p>In the axes toolbar, you have two choices for copying plots:</p> <ul> <li> <p>Copy as image: Preserves resolution of figure on the screen (probably won't be able to zoom into the image without revealing rasterized pixels). Great option for dropping the figure into a powerpoint. Most universal format - can probably paste into most software. Best option for images.</p> </li> <li> <p>Copy as vector graphic. Like a PDF format. Allows nearly infinite zooming. Can edit the graphic in vector editing software, like Adobe Illustrator. Great for printing. Best option for Plots and graphs.</p> </li> </ul> <p>I am Groot</p> <p>You can set figure defaults for all figures during a coding session by setting the properties for <code>groot</code> - the graphic root object. You do this using the following code.</p> Set default values for figures<pre><code>set(groot, 'defaultAxesFontSize', 16, 'defaultFigureColor','w');\n</code></pre> <p>This code sets the default figure color to white and the default axes font size to 16.</p> <p>This command needs to be run each time you restart MATLAB. </p>"},{"location":"matlabBasics/PlottingComponents/#tiled-layouts","title":"Tiled Layouts","text":"<p>Sometimes, you want more than one axis per figure. The functions <code>tiledlayout</code> and <code>nexttile</code> allow you to add multiple axes to a single figure in tiled positions.</p> <p>The syntax is fairly straightforward. In the simplest syntax, you simply call <code>nexttile</code> each time you want to add a new axis to a figure window. Here, we will add two axes, as follows:</p> Adding Tiled Axes<pre><code>figure\nnexttile\nnexttile\n</code></pre> <p>And we get a figure with two axes.</p> <p></p> <p>With another call to <code>nexttile</code>\u2026</p> Adding another Tiled Axes<pre><code>nexttile\n</code></pre> <p>\u2026We add another axes to the figure:</p> <p></p> <p>Notice that the layout of the axes is automatically reconfigured to a 2X2 layout. This is automatic layout system is known as the 'flow' layout. MATLAB tries to keep a 4:3 ratio of axes on a figure with a 'flow' layout.</p>"},{"location":"matlabBasics/PlottingComponents/#controlling-the-tiled-layout","title":"Controlling the Tiled layout","text":"<p>If we want the axes all in one row, then we would use the <code>tiledlayout</code> function and explicitly input the layout we want, as follows:</p> Example: tiledlayout<pre><code>figure\ntiledlayout(1,3)\nnexttile\nnexttile\nnexttile\n</code></pre> <p></p> <p>An input of (1,3) into <code>tiledlayout</code> means 1 row, 3 columns</p>"},{"location":"matlabBasics/PlottingComponents/#subplot","title":"Subplot","text":"<p>To be discontinued... (eventually)</p> <p>Prior to the release of <code>nexttile</code> and <code>tiledlayout</code>, the function <code>subplot</code> accomplished  the same goal of <code>nexttile</code>: plotting multiple axes in one figure.</p> <p>However, the syntax is a little more convoluted. First you needed to decide beforehand how many rows and tiles you want. Then, instead of simply calling <code>subplot</code>, you need to explicitly set the position the axes each time you would like to add a new axis to the figure, using the following syntax:</p> SUBPLOT set-up<pre><code>subplot(ROWS,COLUMNS,INDEX) \n</code></pre> <p>\u2026where <code>ROWS</code> equals the number of rows of axes that you want to add to the figure, <code>COLUMNS</code> equals the number of columns that you want to add, and <code>INDEX</code> indicates the location of the axis (in a ROW major order). Unlike the flow layout that you can use with <code>nexttile</code>, subplot requires everything to be predetermined and organized before you start plotting.</p> <p>For example, to create a 2X2 matrix of axes in a figure, you would run the following commands:</p> Example: 2X2 Tiled Axes using SUBPLOT<pre><code>fh = figure\nsph(1) = subplot (2,2,1) % Top Left Corner\ntitle ('Position One')\nsph(2) = subplot (2,2,2) % Top Right Corner\ntitle ('Position Two')\nsph(3) = subplot (2,2,3) % Bottom Left Corner\ntitle('Position Three')\nsph(4) = subplot (2,2,4) % Bottom Right Corner\ntitle('Position Four')\n</code></pre> <p>\u2026Notice that the first two inputs into each call to <code>subplot</code> are exactly the same: 2,2. These inputs indicate that there are should be 2 rows and 2 columns. The third input is the only input that changes, and it increases from 1 to 4. Also notice that the indexing here is ROW-MAJOR, for some reason, instead of COLUMN-MAJOR as is found in all other MATLAB indexing. This means that consecutive axes are beside each other across the rows first, then down across the columns. </p> <p>After you run the above code, you should see the following:</p> <p></p> <p>Again, the axes are empty because we didn't add any data.  Similar to the <code>nexttile</code> function, we add the plotting functions after we call <code>subplot</code>.</p> <p>Tiled Layout Take-Away</p> <p>There are two functions you can used to tile your axes: <code>nexttile</code> and <code>subplot</code>. The syntax for <code>nexttile</code> is easier and, in combination with <code>tiledlayout</code>, more powerful. For example, you can more easily control the spacing of the axes using <code>tiledlayout</code>. The function <code>subplot</code> is the older function. As such, it is more compatible with more functions. But, it is not as powerful as <code>nexttile</code> and doesn't have modern features like the flow layout or compact spacing.</p> <p>So, the main takeaway here is that you should use <code>nexttile</code> unless you are getting weird results. Then try <code>subplot</code>.</p> <p>Fin. Congratulations. This module has ended. In the next module, we will discuss how to add plots to axes.</p>"},{"location":"matlabBasics/PlottingOverlaysTiles/","title":"Advanced Plotting: Overlays and Tiling","text":"<p>One plot is great. Multiple plots is even greater</p> <p>Often, you want to have have multiple plots added to the same axes or you want multiple axes added to the same figure. In this module, we'll talk about how to do this.</p>"},{"location":"matlabBasics/PlottingOverlaysTiles/#functions-you-should-know","title":"Functions you Should know","text":"<ul> <li><code>hold</code> - Retain current plot when adding new plots</li> <li><code>nexttile</code>: add tiled axes to a figure</li> <li><code>tiledlayout</code>: set the layout of the tiled axes in a tiled figure</li> <li><code>bar</code>: create a bar plot</li> <li><code>scatter</code>: create a scatter plot</li> <li><code>histogram</code>: create a histogram</li> <li><code>boxchart</code>: create a box plot</li> <li><code>title</code>: add a title to the axes</li> <li><code>xlim</code> and ylim: set the x and y limits</li> <li><code>xlabel</code> and  ylabel: label the x and y axes</li> <li><code>legend</code>: add legend to axes</li> </ul>"},{"location":"matlabBasics/PlottingOverlaysTiles/#the-power-of-hold","title":"The power of hold","text":"<p>In MATLAB, plotting is destructive, by default . This means that calls to new plotting functions will overwrite any previous plots in the current axes. So, for example, if you execute the following\u2026</p> <pre><code>plot(x)\nplot(y)\n</code></pre> <p>\u2026you would be left with only the plot of <code>y</code>\u2014the plot of <code>x</code> will be wiped out of existence.</p> <p>If, instead, you want to add multiple plots to the same axes, which is a thing people totally do, you need to call the function <code>hold</code>.</p> <p>Calling <code>hold</code> is very easy. You just enter following:</p> The function hold<pre><code>plot(x) % create first plot\nhold on % turn hold on\nplot(y) % add the y plot\n</code></pre> <p>If you want to go back to destruction, and stop overlaying graphs, enter the following:</p> <pre><code>hold off % turn hold off\n</code></pre> <p>\u2026and the hold will be turned off.</p> <p>Ok, let's overlay some plots!</p>"},{"location":"matlabBasics/PlottingOverlaysTiles/#mix-and-match","title":"Mix and Match","text":"<p>The nice thing about <code>hold</code> is that you can overlay different plotting functions.</p>"},{"location":"matlabBasics/PlottingOverlaysTiles/#load-weather-data","title":"Load Weather Data","text":"<p>For this example, we will load the same weather data from 2013 that we used in the previous module (Plotting Basics).</p> Load Weather Data<pre><code>url = \"https://raw.githubusercontent.com/salcedoe/MtMdocs/refs/heads/main/docs/matlabBasics/w2013.csv\";\nT = readtable(url)\n</code></pre> <p>Recall that this table contains historical weather information from Denver in September, 2013. We can plot the maximum temperatures as a box plot using the following syntax, as we did in the previous module</p> Bar Plot of Weather Data<pre><code>figure(Visible=\"on\")\nx = T.MDT; % dates\ny = T.MaxTemperatureF; % maximum temperatures\n\n% create bar plot\nbar(x,y,FaceAlpha=0.75); % FaceAlpha determines the transparency\n\n% label y-axis and title\nylabel(\"Temperature (\u02daF)\")\ntitle(\"Daily Temps, Denver CO\")\n</code></pre> <p></p> <p>We can then easily overlay the minimum temperatures as a box plot by adding the following lines of code:</p> <pre><code>hold on % turn overlay on\ny = T.MinTemperatureF; % grab the minimum temps and set to y\nhb = bar(x,y,FaceAlpha=0.75); % bar plot minimum temps\n</code></pre> <p></p> <p>Since we are overlaying the second bar plot atop the bar plot already plotted, we don't have to relabel the y-axis and add the title. They are already there.</p> <p>Finally, we can add a trend line of the mean temperatures using the <code>plot</code> function</p> <pre><code>y = T.MeanTemperatureF;\nplot(x,y,'k--',LineWidth=2) % plot dashed line\nlegend(\"Max\",\"Mean\",\"Mean\",fontsize=10) % add legend\n</code></pre> <p></p> <p>Here we don't have to turn <code>hold</code> on. It stays on once set. We make the line black and dashed using the format specification <code>'k--'</code> at the 3rd input. We add the legend using the <code>legend</code> function and manually input the names for the legend.</p> <p>And we finish with an information dense plot of maximum, minimum and mean temperatures in Denver, CO in the fall of 2013.</p>"},{"location":"matlabBasics/PlottingOverlaysTiles/#overlaying-histograms","title":"Overlaying Histograms","text":""},{"location":"matlabBasics/PlottingOverlaysTiles/#load-even-more-data","title":"Load even More Data","text":"<p>For the next few examples, we will load ten years worth of Denver weather data. I have stored this data in a .CSV file (spreadsheet) in a remote file on an Amazon Server. To load this file, run the following in MATLAB</p> Import Table<pre><code>url = \"https://raw.githubusercontent.com/salcedoe/MtMdocs/refs/heads/main/docs/matlabBasics/weatherDataMerged.csv\"\nT =readtable(url)\n</code></pre> <p>\u2026This should load a 300X23 table into the table variable, T. Remember, each row in this table represents one day's worth of weather data. So, 300 rows would be 10 years of September data. Each column is a variable (or measurement), like Max or Min Temperature (for the day).</p>"},{"location":"matlabBasics/PlottingOverlaysTiles/#plotting-the-histogram","title":"Plotting the Histogram","text":"<p>As we saw in the previous module, histograms are used to display the distributions of frequency. For example, here is a histogram of the Minimum Temperatures in September over 10 years:</p> Histogram of Minimum Temperatures<pre><code>figure;\nx = T.MinTemperatureF;\nhistogram(x,30) % use 30 bins\nxlabel('Temp (\u02daF)')\nylabel('Count per bin')\ntitle('Distribution of September Temps over 10 years')\n</code></pre> <p></p> <p>As we can see, a lot of low temps from 45-55\u02daC, and less low temps at 35\u02daC or 70\u02daC.</p> <p>For comparison, let's add the maximum temperatures.</p> Overlay Maximum Temperatures<pre><code>hold on % turn on overlay\nhistogram(T.MaxTemperatureF,30)\nlegend(\"Min\",\"Max\") % add a plot legend\n</code></pre> <p></p> <p>And now we have overlaid the maximum temperatures over 10 years.</p> <p>As you review the plot, notice that:</p> <ul> <li>MATLAB automatically rescaled the axis to fit the maximum data and changed the color of the overlaid histogram.</li> <li>We did not call the <code>figure</code> function again or <code>title</code>, <code>ylabel</code>, or <code>xlabel</code>. The figure, title, x-, and y-labels all stayed the same.</li> <li>We used the function <code>legend</code> to add a color legend to the plot.</li> <li>We used the same number of bins (30) in both histogram calls. This is important to ensure the plotted distributions look similar.</li> </ul>"},{"location":"matlabBasics/PlottingOverlaysTiles/#histogram-challenge","title":"Histogram challenge","text":"How would you add the distribution of mean temperatures ('MeanTempF') to the axes above? <p>You can do this with one line of code:</p> <pre><code>histogram(T.MeanTemperatureF,30,DisplayName=\"mean\")\n</code></pre> <ul> <li>Notice that we didn't need to call <code>hold on</code> again. Once it's on, it's on.</li> <li>Also notice the third input into the function <code>DisplayName = \"mean\"</code>. This input is used to update the legend with an informative name (otherwise you would get something uninformative, like <code>data3</code>).</li> </ul> <p></p>"},{"location":"matlabBasics/PlottingOverlaysTiles/#swarm-box-chart","title":"Swarm + Box Chart","text":"<p>Box plots visually summarize the statistics of a given dataset (median, range, and interquartile range), while Swarm Charts plot ALL the data points, typically in a shape that infers the summary statistics. Combining both charts is a great way to synergize the plots' respective advantages.</p> <p>We can do so using the following syntax:</p> Swarm Box Chart overlay<pre><code>figure\nhold on % hold can be turned on at any point in the syntax \n\nx = [ones(height(T),1); ones(height(T),1)+1]; % stack 1's atop of 2's\nx = categorical(x, [1, 2], [\"Min\",\"Max\"]); % typecast to categorical: Min=1, Max=2\ny = [T.MinTemperatureF; T.MaxTemperatureF]; % stack min temps stacked on top of max temps into a column vector\n\nswarmchart(x,y,...\n\"XJitterWidth\",0.5,... % reduce jitter displacement along the x-axis\n\"MarkerFaceAlpha\",0.1,... % marker face transparency\n\"MarkerFaceColor\",'k',...% marker face color\n\"MarkerEdgeColor\",\"k\",...\n\"MarkerEdgeAlpha\",0.15)\n\nboxchart(x,y,'Notch',\"on\") % box plot\nylabel('Temp (\u02daF)')\n</code></pre> <p></p> <p>Now we can really get a sense of the distribution of the data across ten years.</p> <p>The course function <code>mmBoxSwarm</code> simplifies creating these plots. The following syntax recreates the figure above.</p> <pre><code>hc = mmBoxSwarm(x,y,...\nXJitterWidth=0.5,...\nMarkerFaceColor='k',...\nMarkerFaceAlpha=0.1,...\nNotch='on')\n</code></pre> <p>So, with just one function call, you easily overlay box plots and swarm charts.</p>"},{"location":"matlabBasics/PlottingOverlaysTiles/#overlaying-scatter-plots","title":"Overlaying Scatter Plots","text":"<p>Recall that a scatter plot allows you to visualize the relationship between two variables.</p> <p>For example, the following shows the relationship between maximum and minimum temperatures on a given day in September over 10 years:</p> Scatter Plot of Min vs Max temps<pre><code>figure\nx = T.MinTemperatureF;\ny = T.MaxTemperatureF;\nhs = scatter(x, y,[],'blue','filled',MarkerFaceAlpha=0.25); % default size, blue, filled, transparency of 0.25\nxlabel('Min Temp(\u02daF)')\nylabel('Max Temp (\u02daF)')\ntitle('Minimum vs Maximum temps in September')\n</code></pre> <p></p> <p>Note, since we turned on the transparency of the dots, we get different shaded dots. The darker shaded blue dots indicate that there is more than one dot at that location.</p> <p>The rising trend of the scatter plot  suggests the temperatures are correlated. But are they correlated?</p>"},{"location":"matlabBasics/PlottingOverlaysTiles/#overlaying-a-regression-line","title":"Overlaying a Regression Line","text":"<p>The term correlation in statistics indicates an association between two variables. We can calculate the correlation between the two variables using the function <code>corr</code>, as follows:</p> Correlation between Min and Max Temps<pre><code>c = corr(x,y)\n</code></pre> result<pre><code>c =\n\n      0.61158\n</code></pre> <p>\u2026And we get a correlation of 0.61. Since the value is positive, then our data is positively correlated. Since the value is greater than 0.5 but less than 0.7, our data can be considered \"mildly correlated\".</p> <p>As our data is mildly correlated, we can calculate the linear regression of the data.  Linear regression is a mathematical model that we can use to predict one variable from the other. For example, we could use the linear regression to predict what the maximum temperature would be given a minimum temperature. It might not be a great prediction (since the data is only mildly correlated), but its a start. And once we calculate the linear regression we can plot a visualization of the model as a line overlaid on the scatter plot.</p> <p>We calculate the linear regression and then plot it, as follows:</p> Calculate Linear Regression<pre><code>% calculate linear regression\np = polyfit(x,y,1); % simple linear regression\nf = polyval(p,x); % calculate Max temps based on min temps from line\n\n% add regression line to plot\nhold on % turn on hold\nplot(x,f,'--k',\"LineWidth\",1)\nlegend({'temperatures','linear fit'},\"Location\",\"best\") % add legend\ntitle('Night and Day', sprintf('Correlation = %1.2f',c)) % add a subtitle by adding a second input to title\n</code></pre> <p></p> <p>To add the regression line, we used the plot function. We had to turn hold on to make sure the plot function didn't overwrite the scatter plot. </p> <p>Notice that the regression line goes through the middle of the cloud and trends upwards. Dots that are closest to the line are best predicted by the model. Dots further away from the line are less well predicted. Warmer temperatures seem to be better predicted than cooler temperatures.</p>"},{"location":"matlabBasics/PlottingOverlaysTiles/#overlaying-multiple-scatter-plots","title":"Overlaying Multiple Scatter Plots","text":"<p>We can of course overlay multiple scatter plots. Here we'll add the Minimum Temperatures vs Mean Temperatures to our previous scatter plot. We'll also change the color of the second scatter plot so we can differentiate the two</p> <pre><code>x = T.MinTemperatureF;\ny = T.MaxTemperatureF;\nhs = scatter(x, y,[],'blue','filled',MarkerFaceAlpha=0.25); % default size, blue, filled, transparency of 0.25\nxlabel('Min Temp(\u02daF)')\nylabel('Max Temp (\u02daF)')\n\n\nhold on % turn hold on\n\ny = T.MeanTemperatureF; % set y to mean temps\nscatter(x,y,[],'green','filled',MarkerFaceAlpha=0.25) % plot the min vs mean values\nylabel('Temp (\u02daF)') % relabel the y-axis to just 'Temp'\nlegend('Max','Mean',location=\"best\") % add a legend to the axes\ntitle('Temp Correlation - September') % update title\n</code></pre> <p>\u2026Again, between the scatter function calles, we turn hold on. </p> <p></p> <p>Now we have a new scatter plot (green) overlaid atop the previous scatter plot (blue). The new scatter plot represents the mean temps. These values have a similar relationship to the minimum temps as the maximum temperatures (mildly correlated).</p>"},{"location":"matlabBasics/PlottingOverlaysTiles/#tiled-layouts","title":"Tiled Layouts","text":"<p>Sometimes, you want to add several different axes to the same figure. The functions <code>nexttile</code> and <code>subplot</code> can do this for you.</p> <p>To add plots, we simply enter the commands after each <code>nexttile</code> call.</p> <p>Here we add the plots from above into three different tiles in the same figure</p> Flow Tiled Layout<pre><code>figure % create figure\n\n% set x and y\nx = T.MinTemperatureF;\ny = T.MaxTemperatureF;\n\nnexttile % create first tile\nhs = scatter(x, y,[],'blue','filled',MarkerFaceAlpha=0.25); % default size, blue, filled, transparency of 0.25\nxlabel('Min Temp(\u02daF)')\nylabel('Max Temp (\u02daF)')\ntitle('Scatter')\n\nnexttile % create second tile\nhistogram(x,30) % use 30 bins for Min temp\nxlabel('Temp (\u02daF)')\nylabel('Count per bin')\ntitle('Histogram')\nhold on % turn on overlay\nhistogram(y,30) % Max Temp\n\nnexttile % create third tile\ny = [T.MinTemperatureF   T.MaxTemperatureF]; % create new two-column matrix of data\nboxchart(y) % plot data as box plots\nxticklabels({'Min' 'Max'}) % change the tick label from a number to a label\nylabel('Temperature (\u02daF)') % add a label to the y-axis\ntitle('BoxChart')\n</code></pre> <p></p> <p>Here, after each <code>nexttile</code> function call, we simply insert the code from the previous examples above. <code>nexttile</code> automatically manages placing the tiles in the figure.</p>"},{"location":"matlabBasics/PlottingOverlaysTiles/#tiledlayout","title":"tiledlayout","text":"<p>By default, <code>nexttile</code> plot tiles in an ever expanding grid of tiles, the organization of which depends on the dimensions of the figure. This is known as the \"flow\" layout. If you want more control of the organization of the tiles, you use the function <code>tiledlayout</code>, as follows:</p> Horizontal Tiled Layout<pre><code>figure % create figure\ntiledlayout('horizontal') % set layout to 'horizontal'\n\n% set x and y\nx = T.MinTemperatureF;\ny = T.MaxTemperatureF;\n\nnexttile % first tile\n% \u22ee the rest of the code is the same as above \n</code></pre> <p></p> <p>Notice that we add a function call to <code>tiledlayout</code> right after <code>figure</code>. And we only call <code>tilelayout</code> once. The rest of the code is the same, but now our tiles are organized horizontally.</p> <p>If you want a vertical organization, then you would input 'vertical' into <code>tilelayout</code>. If you want to explicitly set the number of rows and columns, you would input the rows and columns, as follows:</p> <pre><code>figure\ntiledlayout(1,3) % 1 row, three columns\n</code></pre>"},{"location":"matlabBasics/PlottingOverlaysTiles/#subplot","title":"subplot","text":"<p><code>subplot</code> is the older, more fussy function used to divide a figure up into tiles. When you use <code>subplot</code>, you have to decide beforehand how many tiles you want and in what configuration. You should use <code>nexttile</code> unless you absolutely have to use <code>subplot</code>.</p> <p>A function call to <code>subplot</code> looks like the following</p> <pre><code>figure\nsubplot(1,3,1) % 1 row, 3 columns, 1st position\n</code></pre> <p>\u2026This adds one tile at the first position in a 1X3 layout</p> <p>To recreate the above plot using subplot, we would use the following code:</p> subplot 1X3 Tiled Layout<pre><code>figure % create figure\n\n% set x and y\nx = T.MinTemperatureF;\ny = T.MaxTemperatureF;\n\nsubplot(1,3,1) % create first tile, set first position\nhs = scatter(x, y,[],'blue','filled',MarkerFaceAlpha=0.25); % default size, blue, filled, transparency of 0.25\nxlabel('Min Temp(\u02daF)')\nylabel('Max Temp (\u02daF)')\ntitle('Scatter')\n\nsubplot(1,3,2) % create second tile, set second position\nhistogram(x,30) % use 30 bins for Min temp\nxlabel('Temp (\u02daF)')\nylabel('Count per bin')\ntitle('Histogram')\nhold on % turn on overlay\nhistogram(y,30) % Max Temp\n\nsubplot(1,3,2) % create third tile, set third position\ny = [T.MinTemperatureF   T.MaxTemperatureF]; % create new two-column matrix of data\nboxchart(y) % plot data as box plots\nxticklabels({'Min' 'Max'}) % change the tick label from a number to a label\nylabel('Temperature (\u02daF)') % add a label to the y-axis\ntitle('BoxChart')\n</code></pre> <p>\u2026notice for each call to subplot, the first two inputs (1,3) are the same. These set the number of tiles and layout: 1 row, 3 columns. Only the third input changes. This sets the position, indicating where to create the tile (first, second, or third position, in this case).</p> <p>A note on position in subplot</p> <p>Unlike index, position in subplot runs from left to right (row major). So, if you had a 3X3 layout of tiles, the first three position would be the top of tiles.</p>"},{"location":"matlabBasics/PlottingOverlaysTiles/#subplot-challenge","title":"subplot Challenge","text":"<p>Consider the following call to <code>subplot</code></p> <pre><code>subplot(2,3,3)\n</code></pre> What would be the tile layout? Where would the tile be created (row, col)? <p>This function call to <code>subplot(2,3,3)</code> would create a layout of 2 rows and 3 columns. The tile would be created in the second row, first column.</p>"},{"location":"matlabBasics/QuizQuestions/","title":"QuizQuestions","text":""},{"location":"matlabBasics/QuizQuestions/#control-flow","title":"Control Flow","text":""},{"location":"matlabBasics/QuizQuestions/#for-loop-1","title":"FOR LOOP 1","text":"<p>Change the following loop so that it loops 8 times. What is the final output?</p>"},{"location":"matlabBasics/Strings/","title":"String Arrays","text":"<p>for better wrangling of characters, especially words</p> <p>\ud83e\uddf6 String arrays are designed to manage collections of character arrays. They have only recently been added to MATLAB, but they have quickly become a powerful tool for managing collections of characters and words.</p>"},{"location":"matlabBasics/Strings/#syntax-overview","title":"Syntax Overview","text":"<p>The special character for strings is the double quote: <code>\"</code></p> Syntax Meaning <code>x=\"a\"</code> assign the character <code>'a'</code> to the first element in <code>x</code> <code>x=\"cat\"</code> assign the word <code>'cat'</code> to the first element in <code>x</code> <code>x=[\"cat\" \"dog\"]</code> assign the word <code>'cat'</code> to the first element and <code>\"dog\"</code> to the second element in <code>x</code>"},{"location":"matlabBasics/Strings/#things-you-should-know","title":"Things you should know","text":"<p>After completing this module, you should be able to:</p> <ul> <li>Differentiate between a Character and a String Array.</li> <li>Assign values to string arrays using paired double quotes <code>\" \"</code> and square brackets <code>[ ]</code></li> <li>Index string arrays using both <code>( )</code> and <code>{ }</code> be able to predict the outcome of each</li> <li>Manipulate string arrays using mathematical operators such as <code>+</code> and logical operators such as <code>==</code></li> </ul>"},{"location":"matlabBasics/Strings/#relevant-mathworks-documentation","title":"Relevant Mathworks Documentation","text":"<ul> <li>Characters and Strings</li> <li>String Array</li> </ul>"},{"location":"matlabBasics/Strings/#special-matlab-characters","title":"Special MATLAB Characters","text":"<ul> <li><code>\" \"</code> - paired double quotes: for creating string arrays</li> <li><code>[ ]</code> - square brackets: for concatenation</li> <li><code>( )</code> - parentheses: for indexing</li> <li><code>{ }</code> - curly brackets: for extract contents from string array elements</li> </ul>"},{"location":"matlabBasics/Strings/#but-first-a-bit-of-background","title":"But First, a Bit of Background","text":"<p>Why do we need another variable type just to manage a bunch of letters?</p>"},{"location":"matlabBasics/Strings/#the-trouble-with-character-arrays","title":"The Trouble With Character Arrays","text":"<p>Recall our issue with multi-row character arrays:</p> Padding Character Arrays<pre><code>chary = char('one fish', 'two fish', 'red fish', 'blue fish')\n</code></pre> result<pre><code>chary =\n        4\u00d710 char array\n\n        'one fish  '\n        'two fish  '\n        'red fish'\n        'blue fish '\n</code></pre> <p>To create character array matrices, we needed the function <code>char</code> to properly pad the rows of the matrix with enough spaces so that there are an equal number of characters in each row (recall that <code>space</code> is a character). But this becomes burdensome rather quickly. For every new row added to a character array, the entire array needs to be re-padded with spaces. Worse, those extraneous spaces in a large character array take up valuable memory for no reason. There had to be a better way.</p>"},{"location":"matlabBasics/Strings/#the-cell-array-kludge","title":"The Cell Array Kludge","text":"<p>For the longest time, the cell array was the better way to package character arrays. In fact, this remains one of the best uses for cell arrays. In a cell array, each row of a character array can simply be added to one of the cell elements, no space-padding required. For example:</p> Concatenating words in a cell array<pre><code>celly = {'one fish'; 'two fish'; 'red fish'; 'blue fish'}\n</code></pre> result<pre><code>celly =\n\n  4\u00d71 cell array\n\n    {'one fish' }\n    {'two fish' }\n    {'red fish' }\n    {'blue fish'}\n</code></pre> <p>And this worked for many years, but it was a kludge. Cell arrays were designed to package disparate variable types into a single variable. It is easy to package things into cell arrays, but harder to get them out. And the indexing is unnecessarily complex. Worse, due to its promiscuous proclivities (you can store anything in a cell array), the cell class has large memory overhead and few functions designed specifically for managing character arrays.  </p>"},{"location":"matlabBasics/Strings/#string-array-rising","title":"String Array Rising","text":"<p>Enter string arrays - the leaner and meaner variable class designed from the ground up to wrangle character arrays.</p> <p>The syntax is fairly simple. Instead of single quotes, you use double quotes. And you concatenate using square brackets, like numeric arrays. For example, the following syntax creates a string array called <code>stringy</code></p> Concatenating words in a string array<pre><code>stringy = [\"one fish\", \"two fish\", \"red fish\", \"blue fish\"]'\n</code></pre> result<pre><code>stringy = \n\n    4\u00d71 string array\n\n        \"one fish\"\n        \"two fish\"\n        \"red fish\"\n        \"blue fish\"\n</code></pre> <p>\u2026Notice here that we used the transpose operator <code>'</code> to orient our new string array, <code>stringy</code>, as a column vector. Also notice that <code>stringy</code> requires less bytes to store in memory than <code>celly</code>: 336 vs 518 bytes, a more than 60% reduction in memory requirement.</p>"},{"location":"matlabBasics/Strings/#indexing-string-arrays","title":"Indexing String arrays","text":"<p>String arrays follow the same indexing syntax rules of other complex variable types. Indexing with parentheses <code>()</code> returns a smaller string array, whereas indexing with the curly brackets <code>{}</code> returns the contents of the elements (or in this case, the character array contained within).</p> <p>For example, to return the first element from <code>stringy</code> as a scalar string array, we use the parentheses as follows:</p> Indexing element 1 in a string array<pre><code> stringy(1)\n</code></pre> result<pre><code>ans = \n\n    \"one fish\" % the first element in the string array\n</code></pre> <p>\u2026We can tell that <code>ans</code> is a string array because the characters in the result are bracketed by double quotes: <code>\"one fish\"</code> (or, by examining the properties of <code>ans</code> in the workspace).</p> <p>To unpack the first element from stringy and access the character array, we use the curly brackets <code>{}</code> as follows:</p> Unpacking String Array element 1<pre><code>stringy{1}\n</code></pre> result<pre><code>ans =\n      'one fish' % the character array contents from the first element\n</code></pre> <p>\u2026Here, we can tell that <code>ans</code> is a character array because the outputted result is bracketed by single quotes:  <code>'one fish'</code> (or, by examining the properties of <code>ans</code> in the workspace)</p> <p>We can use keywords, such as <code>end</code>, to return a string element, as follows:</p> Index Last element<pre><code>stringy(end)\n</code></pre> result<pre><code>ans = \n      \"blue fish\"\n</code></pre> <p>\u2026this syntax returns the last element in <code>stringy</code> as a smaller string array</p> <p>Or we can use complex indexing that uses both parentheses and curly brackets. For example, the following syntax returns the last character in the first element of <code>stringy</code>:</p> Unpacking the last character from element 1<pre><code>stringy{1}(end)\n</code></pre> result<pre><code>ans =\n      'h' % the last character in element 1 of the string array\n</code></pre> <p>\u2026In this syntax, the curly bracket extracts the contents from the first element in <code>stringy</code>, while the parentheses are used to index out the last character from that extracted character array, which happens to be the letter <code>h</code> from the word fish.</p>"},{"location":"matlabBasics/Strings/#concatenating-string-arrays","title":"Concatenating string arrays","text":"<p>String arrays also have syntax reminiscent of manipulating numeric arrays. For example, we can easily add more rows to our friend <code>stringy</code>, using following syntax:</p> Concatenating String Arrays<pre><code>stringy = [stringy; \"black fish\"; \"blue fish\"; \"old fish\"; \"new fish\"]\n</code></pre> result<pre><code>stringy = \n\n    8\u00d71 string array\n\n        \"one fish\"\n        \"two fish\"\n        \"red fish\"\n        \"blue fish\"\n        \"black fish\"\n        \"blue fish\"\n        \"old fish\"\n        \"new fish\"\n</code></pre> <p>\u2026Notice the use of recursive assignment, where the variable name <code>stringy</code> appears on both sides of the assignment operator <code>=</code>. This means overwrite <code>stringy</code> with a new version of itself that contains all of its original elements, plus a bunch of fun new string elements (four new elements, to be precise). Also notice the use of semi-colons to indicate the addition of elements vertically.</p>"},{"location":"matlabBasics/Strings/#string-array-arithmetic","title":"String array 'arithmetic'","text":"<p>We can use the <code>+</code> operator to quickly append characters to each element of a string. For example, the following syntax appends a comma to the end of each element in <code>stringy</code>:</p> Appending a comma to each element in the string array<pre><code>stringy = stringy + ',' \n</code></pre> result<pre><code>stringy = \n\n  8\u00d71 string array\n\n    \"one fish,\"\n    \"two fish,\"\n    \"red fish,\"\n    \"blue fish,\"\n    \"black fish,\"\n    \"blue fish,\"\n    \"old fish,\"\n    \"new fish,\"\n</code></pre> <p>\u2026Notice that we didn't even need to have the same sized arrays for the operation. MATLAB simply assumed we wanted to append the <code>,</code> to the end of each character arrays in <code>stringy</code>. This syntax is reminiscent of when we add a scalar to a vector: MATLAB assumes that you want to add the scalar to each element of the vector.</p>"},{"location":"matlabBasics/Strings/#challenge-string-array-indexing","title":"Challenge: String Array Indexing","text":"QuestionAnswer <p>How would you use complex indexing (using both the parentheses and the curly brackets) to replace the last comma in the last element of <code>stringy</code> (\"new fish,\") with an exclamation point?</p> <p>We can replace that last comma in the last element with an exclamation point with the following syntax:</p> Replace comma with exclamation point<pre><code>stringy{end}(end) = '!'\n</code></pre> <ul> <li>Here, we first unpack the contents from the last element in <code>stringy</code> using the curly bracket syntax: <code>{end}</code>. </li> <li>Then, we index the last element (a <code>,</code>) from unpacked character array <code>'new fish,'</code> using the parentheses syntax: <code>(end)</code></li> <li>Then, we use the assignment syntax (<code>=</code>), to replace the comma <code>,</code> with an exclamation point (<code>!</code>).</li> <li>Et voila:</li> </ul> result<pre><code>stringy = \n\n  8\u00d71 string array\n\n    \"one fish,\"\n    \"two fish,\"\n    \"red fish,\"\n    \"blue fish,\"\n    \"black fish,\"\n    \"blue fish,\"\n    \"old fish,\"\n    \"new fish!\"\n</code></pre>"},{"location":"matlabBasics/Strings/#relational-operations-on-string-arrays","title":"Relational operations on string arrays","text":"<p>You can also use relational operations on a string array in an intuitive manner.</p> <p>Relational Operation IS EQUAL TO</p> <p>For example, if you want to find the element in  <code>stringy</code> that matches the character array 'two fish,' you would use the following syntax:</p> Find Elements that match 'two fish,'<pre><code>stringy == \"two fish,\" \n</code></pre> Result<pre><code>ans =\n        8\u00d71 logical array\n\n        0\n        1\n        0\n        0\n        0\n        0\n        0\n        0\n</code></pre> <p>\u2026only the second element contains \"two fish,\".</p> <p>Relational Operation IS NOT EQUAL TO</p> <p>Or if, say, you wanted to find all elements that do not contain \"blue fish,\" you would use this syntax:</p> Find elements that do not match 'blue fish,'<pre><code>stringy ~= 'blue fish,'\n</code></pre> result<pre><code>ans =\n        8\u00d71 logical array\n\n        1\n        1\n        1\n        0\n        1\n        0\n        1\n        1\n</code></pre> <p>\u2026here, only elements 4 and 6 match 'blue fish,'.  Elements 1,2,3,5,7, and 8 do NOT match.</p> <p>Notice that in the above examples, we are matching the entire contents of each element in <code>stringy</code> to the character array. If they don't match precisely, we won't get a match.</p> Elements that Contain 'blue fish'<pre><code>stringy == 'blue fish'\n</code></pre> Result returns no match<pre><code>ans =\n        8\u00d71 logical array\n\n        0\n        0\n        0\n        0\n        0\n        0\n        0\n        0\n</code></pre> <p>... The syntax above finds no matches because we didn't include the <code>,</code> in the character array at the end of the character array 'blue fish'.</p>"},{"location":"matlabBasics/Strings/#string-array-functions","title":"String Array Functions","text":"<p>MATLAB has many functions to manipulate and process string arrays. You can find a list of them on the Characters and Strings Documentation page. These functions are grouped into the following categories:</p> <ul> <li>Create, Concatenate, Convert</li> <li>Determine Type and Properties</li> <li>Find and Replace</li> <li>Join and Split</li> <li>Edit</li> <li>Compare</li> <li>Regular Expressions</li> </ul> <p>Familiarize yourself with these functions to find many powerful ways to manipulate string arrays. The following are just a few examples.</p>"},{"location":"matlabBasics/Strings/#example-contains","title":"Example: Contains","text":"<p>contains</p> <p>Say we want to find the elements in <code>stringy</code> that contain the character array 'blue', we can use the function <code>contains</code> as follows:</p> Elements that contain 'blue'<pre><code>contains(stringy,'blue')\n</code></pre> result<pre><code>ans =\n        8\u00d71 logical array\n\n        0\n        0\n        0\n        1\n        0\n        1\n        0\n        0\n</code></pre> <p>\u2026And we get a couple of matches (elements 4 and 6). Notice here that we don't have to match the entire content of an element in <code>stringy</code>, just a portion of the contents. Whereas, in the previous section, we needed a precise match when we used the logical operation <code>==</code>. </p> <p>We can even match just a single character as follows:</p> Elements that contain the character 'w'<pre><code>contains(stringy,'w')\n</code></pre> <p>result<pre><code>ans =\n        8\u00d71 logical array\n\n        0\n        1\n        0\n        0\n        0\n        0\n        0\n        1\n</code></pre> \u2026This syntax returns all elements that contain the letter <code>w</code> in them (<code>two</code> and <code>new</code>, in this case).</p>"},{"location":"matlabBasics/Strings/#example-replace","title":"Example: Replace","text":"<p>replace</p> <p>The function <code>replace</code> is a quick way to replace one character array with another. Consider our friend <code>stringy</code>. We can easily replace <code>\"fish\"</code> with <code>\"squish\"</code> using the following syntax:</p> <pre><code>squishy = replace(stringy, 'fish', 'squish')\n\nsquishy = \n            8\u00d71 string array\n\n            \"one squish,\"\n            \"two squish,\"\n            \"red squish,\"\n            \"blue squish,\"\n            \"black squish,\"\n            \"blue squish,\"\n            \"old squish,\"\n            \"new squish!\"\n</code></pre>"},{"location":"matlabBasics/Strings/#example-split","title":"Example: Split","text":"<p>split</p> <p>The function <code>split</code> splits character arrays at the indicated delimiter (such as space, the default delimiter):</p> Split string array at space<pre><code>splity = split(squishy)\n</code></pre> Result is a new 8x2 string array<pre><code>splity = \n            8\u00d72 string array\n\n            \"one\"      \"squish,\"\n            \"two\"      \"squish,\"\n            \"red\"      \"squish,\"\n            \"blue\"     \"squish,\"\n            \"black\"    \"squish,\"\n            \"blue\"     \"squish,\"\n            \"old\"      \"squish,\"\n            \"new\"      \"squish!\"\n</code></pre> <p>\u2026The variable <code>splity</code> has two columns. The first column contains all of the characters preceding the <code>space</code> delimiter while the second column contains all of the characters that follow the delimiter.</p>"},{"location":"matlabBasics/Strings/#example-erase","title":"Example: Erase","text":"<p>erase</p> <p>If we decide we don't want any punctuation in our string array after all, we can use the <code>erase</code> function to quickly remove the offending punctuation, as follows:</p> <pre><code>erase(splity, [\",\" \"!\"])\n</code></pre> result<pre><code>ans = \n        8\u00d72 string array\n\n        \"one\"      \"squish\"\n        \"two\"      \"squish\"\n        \"red\"      \"squish\"\n        \"blue\"     \"squish\"\n        \"black\"    \"squish\"\n        \"blue\"     \"squish\"\n        \"old\"      \"squish\"\n        \"new\"      \"squish\"\n</code></pre> <p>As you can imagine, the examples are endless. Refer to the Characters and Strings Documentation as needed or for inspiration.</p>"},{"location":"matlabBasics/Strings/#example-putting-it-all-together","title":"Example: Putting it All Together","text":"<p>Cleaning up complex formatting.</p> <p>Sometimes you need to clean up extraneous characters from a string array.  For example, consider this string array that contains a string of emails in a single line:</p> Create Array of emails<pre><code>orig_string = \"Patella, Professor &lt;professor.patella@university.edu&gt;; Synapse, Sydney &lt;sydney.synapse@university.edu&gt;; Humerus, Harry &lt;harry.humerus@university.edu&gt;; Quadratus, Quentin &lt;quentin.quadratus@university.edu&gt;; Ligament, Linus &lt;linus.ligament@university.edu&gt;; Cortex, Chancellor &lt;chancellor.cortex@university.edu&gt;; Lymph, Lyndsay &lt;lyndsay.lymph@university.edu&gt;; Dendrite, Doctor &lt;doctor.dendrite@university.edu&gt;; Sarcomere, Sarah &lt;sarah.sarcomere@university.edu&gt;; Endothelium, Emmett &lt;emmett.endothelium@university.edu&gt;\"\n</code></pre> <p>This is a common formatting style you might encounter if you copy a batch of emails from an email app, like Outlook.  </p> <p>The string of emails are formatted with the name followed by the email, like this:</p> <p><code>Last Name, First Name &lt;first.last@university.edu&gt;</code></p> <p>And each Name-Email pair is separated by a semi-colon</p> <p>If you want to copy this information to say a spreadsheet, you would probably want to reformat the string  to get rid of all the extraneous characters, like the comma, the &lt; &gt;, and the semi-colons. Then move each Name-Email pair to a separate row. And then, have the First and Last Names and the emails in separate columns. Something more like this:</p> First Last email Professor Patella professor.patella@university.edu Sydney Synapse sydney.synapse@university.edu \u22ee <p>You could do this manually, by copying and pasting each bit one at a time, which would take quite a bit of time. OR, you could use MATLAB's handy String array functions.</p> <p>First, we separate all of the Name-Email pairs into separate lines.</p> Separate Name-Email pairs<pre><code>S_rows = split(orig_string, '; ') % split at semi-colon-space\n</code></pre> <p>\u2026Notice that the function split allows you to indicate what delimiter you want to use for the split. Here we indicate the semi-colon and a space as the delimiter. This means that the function will look for a semi-colon followed by a space and split up the string there. If there is a semi-colon, without a space, it won't split at that position.</p> split result<pre><code>S_rows = \n\n    10\u00d71 string array\n\n    \"Patella, Professor &lt;professor.patella@university.edu&gt;\"\n    \"Synapse, Sydney &lt;sydney.synapse@university.edu&gt;\"\n    \"Humerus, Harry &lt;harry.humerus@university.edu&gt;\"\n    \"Quadratus, Quentin &lt;quentin.quadratus@university.edu&gt;\"\n    \"Ligament, Linus &lt;linus.ligament@university.edu&gt;\"\n    \"Cortex, Chancellor &lt;chancellor.cortex@university.edu&gt;\"\n    \"Lymph, Lyndsay &lt;lyndsay.lymph@university.edu&gt;\"\n    \"Dendrite, Doctor &lt;doctor.dendrite@university.edu&gt;\"\n    \"Sarcomere, Sarah &lt;sarah.sarcomere@university.edu&gt;\"\n    \"Endothelium, Emmett &lt;emmett.endothelium@university.edu&gt;\"\n</code></pre> <p>\u2026And it works. Beautifully. Now we have each Name-Email pair in a separate element in the string. And to boot, we have eliminated the semi-colon delimiter from the string altogether. Helpfully, the default output returns a column vector, which makes the data in the string easier to read. If you wanted a row vector, you would just transpose the string.</p> <p>Next up, we separate the first and last names and emails from each other, again using split.</p> <p>split First and Last Names<pre><code>S_cols = split(S_rows,{', ',' '}) % multiple delimiters\n</code></pre> \u2026split  allows you to enter multiple delimiters, packaged as a cell array. Here we enter two delimiters: <code>,</code> and <code></code>.  (<code>comma-space</code> and <code>space</code>).</p> split result<pre><code>S_cols = \n\n    10\u00d73 string array\n\n    \"Patella\"        \"Professor\"     \"&lt;professor.patella@university.edu&gt;\" \n    \"Synapse\"        \"Sydney\"        \"&lt;sydney.synapse@university.edu&gt;\"    \n    \"Humerus\"        \"Harry\"         \"&lt;harry.humerus@university.edu&gt;\"     \n    \"Quadratus\"      \"Quentin\"       \"&lt;quentin.quadratus@university.edu&gt;\" \n    \"Ligament\"       \"Linus\"         \"&lt;linus.ligament@university.edu&gt;\"    \n    \"Cortex\"         \"Chancellor\"    \"&lt;chancellor.cortex@university.edu&gt;\" \n    \"Lymph\"          \"Lyndsay\"       \"&lt;lyndsay.lymph@university.edu&gt;\"     \n    \"Dendrite\"       \"Doctor\"        \"&lt;doctor.dendrite@university.edu&gt;\"   \n    \"Sarcomere\"      \"Sarah\"         \"&lt;sarah.sarcomere@university.edu&gt;\"   \n    \"Endothelium\"    \"Emmett\"        \"&lt;emmett.endothelium@university.edu&gt;\"\n</code></pre> <p>\u2026and now we have the names and the emails in separate columns of the string array. Notice that the commas and the spaces are also gone.</p> <p>Finally, we can remove the <code>&lt; &gt;</code> characters using the erase function.</p> Clean up String<pre><code>S_clean = erase(S_cols,{'&lt;','&gt;'})\n</code></pre> <pre><code>S_clean = \n\n    10\u00d73 string array\n\n    \"Patella\"        \"Professor\"     \"professor.patella@university.edu\" \n    \"Synapse\"        \"Sydney\"        \"sydney.synapse@university.edu\"    \n    \"Humerus\"        \"Harry\"         \"harry.humerus@university.edu\"     \n    \"Quadratus\"      \"Quentin\"       \"quentin.quadratus@university.edu\" \n    \"Ligament\"       \"Linus\"         \"linus.ligament@university.edu\"    \n    \"Cortex\"         \"Chancellor\"    \"chancellor.cortex@university.edu\" \n    \"Lymph\"          \"Lyndsay\"       \"lyndsay.lymph@university.edu\"     \n    \"Dendrite\"       \"Doctor\"        \"doctor.dendrite@university.edu\"   \n    \"Sarcomere\"      \"Sarah\"         \"sarah.sarcomere@university.edu\"   \n    \"Endothelium\"    \"Emmett\"        \"emmett.endothelium@university.edu\"\n</code></pre> <p>And we can reorder the columns with a bit of indexing</p> Swap Columns 1 and 2<pre><code>S = S_clean(:,[2 1 3])\n</code></pre> <pre><code>S = \n\n  10\u00d73 string array\n\n    \"Professor\"     \"Patella\"        \"professor.patella@university.edu\" \n    \"Sydney\"        \"Synapse\"        \"sydney.synapse@university.edu\"    \n    \"Harry\"         \"Humerus\"        \"harry.humerus@university.edu\"     \n    \"Quentin\"       \"Quadratus\"      \"quentin.quadratus@university.edu\" \n    \"Linus\"         \"Ligament\"       \"linus.ligament@university.edu\"    \n    \"Chancellor\"    \"Cortex\"         \"chancellor.cortex@university.edu\" \n    \"Lyndsay\"       \"Lymph\"          \"lyndsay.lymph@university.edu\"     \n    \"Doctor\"        \"Dendrite\"       \"doctor.dendrite@university.edu\"   \n    \"Sarah\"         \"Sarcomere\"      \"sarah.sarcomere@university.edu\"   \n    \"Emmett\"        \"Endothelium\"    \"emmett.endothelium@university.edu\"\n</code></pre> <p>Et voila, a nicely formatted string that we can copy into a spreadsheet file or add to a MATLAB table variable, (see next section).</p>"},{"location":"matlabBasics/Strings/#challenge","title":"Challenge","text":"<p>After nicely formatting the string, you realize that you got the email domain wrong. These are students from the for-profit wing of your educational enterprise and as such, should have college.com for their email domain.</p>  How would you replace \"university.edu\" for \"college.com\" in S? <p>Easy-Peasy. You simply use the function replace, as follows:</p> Replace university.edu<pre><code>S1 = replace(S,\"university.edu\",\"college.com\")\n</code></pre> result<pre><code>S1 = \n\n    10\u00d73 string array\n\n    \"Professor\"     \"Patella\"        \"professor.patella@college.com\" \n    \"Sydney\"        \"Synapse\"        \"sydney.synapse@college.com\"    \n    \"Harry\"         \"Humerus\"        \"harry.humerus@college.com\"     \n    \"Quentin\"       \"Quadratus\"      \"quentin.quadratus@college.com\" \n    \"Linus\"         \"Ligament\"       \"linus.ligament@college.com\"    \n    \"Chancellor\"    \"Cortex\"         \"chancellor.cortex@college.com\" \n    \"Lyndsay\"       \"Lymph\"          \"lyndsay.lymph@college.com\"     \n    \"Doctor\"        \"Dendrite\"       \"doctor.dendrite@college.com\"   \n    \"Sarah\"         \"Sarcomere\"      \"sarah.sarcomere@college.com\"   \n    \"Emmett\"        \"Endothelium\"    \"emmett.endothelium@college.com\"\n</code></pre> <p>Module Complete \ud83e\uddf6</p>"},{"location":"matlabBasics/Structures/","title":"Structures","text":"<p>For Storing Related but Disparate Information in a Tree-like Format</p> <p>\"You're so beautiful, Like a tree\" - Flight of the Conchords. The Most Beautiful Girl in the Room</p>"},{"location":"matlabBasics/Structures/#overview","title":"Overview","text":"<p>Structure arrays have a hierarchal, trunk-and-branch data structure. They are useful for organizing disparate information and variable types into a single variable.</p> <p></p>"},{"location":"matlabBasics/Structures/#learning-objectives","title":"Learning Objectives","text":"<p>After finishing this module, you should be able to:</p> <ul> <li>Explain why you would use a structure array</li> <li>Compare a structure array to a cell and a character array</li> <li>Assign a value to a structure array using dot notation</li> <li>Access field content in a structure</li> </ul>"},{"location":"matlabBasics/Structures/#relevant-matlab-documentation","title":"Relevant MATLAB Documentation","text":"<ul> <li>Structures</li> <li>Structure Functions</li> </ul>"},{"location":"matlabBasics/Structures/#important-terminology","title":"Important Terminology","text":"<ul> <li> <p>Structure: a data type that groups related data using data containers called fields. Each field can contain data of any type or size.</p> </li> <li> <p>Dot Notation: using the period after a variable name to create or access structure fields</p> </li> </ul>"},{"location":"matlabBasics/Structures/#creating-a-structure","title":"Creating a Structure","text":"<p>A structure array is a hierarchal data structure that groups data into fields. Structure arrays are very useful for organizing complex data, such as the metadata from image files.</p> <p></p> <p>The good news about structures is that is very simple and intuitive to make a structure. Simply type a new variable name, append a period (<code>.</code>) to the end of the name, and then add a field name. This is known as dot notation.</p> <p>For example, the following syntax creates a new structure called <code>img_info</code>, with three new fields: \"filename\", \"rows\", and \"cols\".</p> Creating a structure<pre><code>img_info.filename = 'moonshot.jpg'\nimg_info.rows = 25\nimg_info.cols = 50\n</code></pre> Result: a new structure called img_info<pre><code>img_info = \n\n  struct with fields:\n\n    filename: 'moonshot.jpg'\n        rows: 25\n        cols: 50\n</code></pre> <p>\u2026Notice that fields can be of any data array class, including character and numeric.</p>"},{"location":"matlabBasics/Structures/#accessing-field-content","title":"Accessing Field Content","text":"<p>To access the content from a field in a structure, you use dot notation, as follows:</p> Accessing fields in structures using dot notation<pre><code>img_info.rows\n</code></pre> Result: the accessed data from img_info<pre><code>ans =\n\n    25\n</code></pre> <p>Pro-Tip: TAB for a list of structure fields</p> <p>To automatically bring up a list of all of the filenames in a structure, do the following 1. Type the variable name of the structure 2. Type the dot (<code>img_info.</code>) 3. Then hit the TAB button.</p> <p>A dialog box containing all field names of the structure should appear. Once the field name dialog appears, select a field name using the UP and DOWN arrows and then ENTER. This technique is VERY useful when there are a lot of field names.</p> <p></p>"},{"location":"matlabBasics/Structures/#creating-an-array-of-structures","title":"Creating an Array of Structures","text":"<p>Like all MATLAB variables, a structure can also be an array. This is a known as a Nonscalar Structure Array (remember, scalar means having just one element).</p> <p>Think of it like this: each element in the array contains a structure. For this to work, all the  structures in the array must have the same fieldnames, but the data stored in the fieldnames can be different.</p> <p>You  add new elements to a structure array as you would to a numeric array: by using the parentheses to indicate the index of the element.</p> <p>Nonscalar Structure Array</p> Adding a new element to our Nonscalar Structure array<pre><code>img_info(2).filename = 'apollo13.jpg'\nimg_info(2).rows = 100\nimg_info(2).cols = 200\n</code></pre> Result: a 1x2 Nonscalar Structure Array<pre><code>img_info = \n\n1x2 struct array with fields\u2026\n\n    filename\n    rows\n    cols\n</code></pre> <p>We can be visualize the elements of the nonscalar structure array like this</p> <p></p>"},{"location":"matlabBasics/Structures/#accessing-field-content-in-a-structure-array","title":"Accessing Field Content in a Structure Array","text":"<p>So, how do you get the data out? To get the data from the first element in the array, simply index the structure name, as follows:</p> Accessing content from the rows field in element 1 of the nonscalar structure<pre><code>img_info(1).rows\n</code></pre> result<pre><code>ans = \n      25\n</code></pre> <p>If you do not include the index, then MATLAB returns the values from all the fields sequentially.</p> Accessing content from the cols field across all elements in nonscalar structure<pre><code>img_info.cols\n</code></pre> result<pre><code>ans =\n\n    50\n\nans =\n\n   200\n</code></pre> <p>\u2026Notice that the output is a comma-separated list, spitting out the contents, one  after the other, overwriting <code>ans</code> each time with the new content. This is similar to what happens when we access multiple cells in a cell array using the curly brackets.</p> <p>To concatenate the output, you must include a concatenating special character (i.e. <code>[ ]</code>  or <code>{ }</code>):</p> Concatenating scalar content from the same field across all structure elements<pre><code>&gt;&gt;cols = [img_info.cols]\ncols =\n\n    50   200\n</code></pre> <p>This works for scalar content, like numbers. But for nonscalar content, like a character array, you need to use the curly brackets and package the data into a cell array.</p> Concatenating Character arrays from all structure elements<pre><code>filenames = {img_info.filename} % note use of curly brackets\n</code></pre> result<pre><code>filenames = \n            'moonshot.jpg'    'apollo13.jpg'\n</code></pre> <p>\u2026The above syntax extracts the filenames from the <code>filename</code> field across all elements of img_info and concatenates them into a new 1X2 cell array called <code>filenames</code>.</p>"},{"location":"matlabBasics/Structures/#challenge","title":"Challenge","text":"Question 1Answer 1Question 2Answer 2 <p>Show the syntax to sum the values from rows field in <code>img_info</code></p> <p>Show the syntax to sum the values from rows field in <code>img_info</code>:</p> <pre><code>sum([img_info.rows])\n</code></pre> result<pre><code>ans =\n\n    125\n</code></pre> <p>Without the square brackets, you would get a sum of 25. Why?</p> <p>What happens when you use the Square Brackets to concatenate the content from the filename fields?</p> <p>What happens when you use the Square Brackets to concatenate the content from the filename fields?</p> <pre><code>[img_info.filename]\n</code></pre> result<pre><code>ans =\n        'moonshot.jpgapollo13.jpg'\n</code></pre> <p>You get the two filenames crammed into one character array</p>"},{"location":"matlabBasics/Structures/#advanced-topic-programmatically-accessing-a-structure-field","title":"Advanced Topic: Programmatically Accessing a Structure Field","text":"<p>A somewhat complicated example</p> <p>Sometimes you want to access the fields in a structure programmatically, i.e. using a variable to indicate the field. To do so, you can use parentheses, as follows:</p> <p><code>structure_name.('name_of_field')</code></p> <p>Do not confuse this syntax with indexing an array. Notice that in this syntax the period immediate proceeds the parentheses. Inside the parentheses, the field name is entered as a character array or a variable containing a character array. For example:</p> <pre><code>img_info.('filename')\n</code></pre>"},{"location":"matlabBasics/Structures/#creating-a-dialog-to-select-a-field-name-in-a-structure","title":"Creating a dialog to select a field name in a structure","text":"<p>If you would like to access the content from a structure after receiving user input, you could use the following programmatic steps:</p> <p>First, get the field names from the <code>img_info</code> using the function <code>fieldnames</code>. This function returns all the field names in from a structure array as a cell array.</p> Get Structure Field names<pre><code>fld_names = fieldnames(img_info)\n</code></pre> result<pre><code>fld_names = \n\n    'filename'\n    'rows'\n    'cols'\n</code></pre> <p>\u2026Notice the output <code>fld_names</code> is a cell array.</p> <p>We can plug this cell array into one of MATLAB's built-in dialog functions, <code>listdlg</code>. This function creates a dialog in which the user can select one element from the inputed cell array:</p> Create a list dialog for user input<pre><code>answer = listdlg('ListString',fld_names)\n</code></pre> <p>The listdlg function creates the following dialog window.</p> <p></p> <p>\u2026Notice that the field names from <code>img_info</code> are listed in the dialog window. Also notice that you select one of the rows.</p> <p>After you make your selection and you click 'OK', <code>listdlg</code> returns the index of the rows selected and assigns that value to <code>answer</code>. If you click \"Cancel\", <code>listdlg</code> sets <code>answer</code> to empty.</p> <p>We can use the value  in <code>answer</code> to index the input cell array <code>fld_names</code></p> Get selected field<pre><code>selected_field = fld_names{answer}\n</code></pre> result<pre><code>selected_field =\n\nrows\n</code></pre> <p>Then we can display the contents of the selected field from the <code>img_info</code> structure array using the following syntax:</p> Get Contents from selected field<pre><code>img_info.(selected_field)\n</code></pre> result<pre><code>ans =\n\n    25\n\n\nans =\n\n   100\n</code></pre> <p>In the above example, the values from the row field from both elements of the structure array are displayed. However, if we indicate the index of the element, then we would get the result from the field in that element of the structure. In the following example, we indicate the second element of the structure array and get just one result.</p> Get contents from just one element in the structure array<pre><code>img_info(2).(selected_field)\n</code></pre> result<pre><code>ans =\n\n    100\n</code></pre> <p>FIN. \ud83c\udf33</p>"},{"location":"matlabBasics/Tables/","title":"Tables","text":"<p>for Storing Data in a Spreadsheet-Like Format</p> <p>\"It's Business Time\" - Flight of the Conchords, Business Time</p> <p></p>"},{"location":"matlabBasics/Tables/#overview","title":"Overview","text":"<p>The Table class is the Excel spreadsheet of data types. This data type is designed to handle mixed, column-sorted, spreadsheet-type data. In a table, you can have one column data that contains a cell array and another column that contains numeric data. Table variables are intuitive to index and concatenate, have named column (and row) headers, and have many useful support functions such as a <code>summary</code>  or <code>varfun</code>.</p>"},{"location":"matlabBasics/Tables/#learning-objectives","title":"Learning Objectives","text":"<p>After completing this module, you should be able to:</p> <ul> <li> <p>Create your own table variables by using the table function</p> </li> <li> <p>Use dot notation and indexing to access content from table variables</p> </li> <li> <p>Use dot notation to access and modify table properties such as variable names.</p> </li> </ul>"},{"location":"matlabBasics/Tables/#important-terminology","title":"Important Terminology","text":"<p>You should also be able to define the following terms as they refer to MATLAB programming:</p> <ul> <li> <p>table: a data type suitable for spreadsheet-type data</p> </li> <li> <p>dot notation: adding a period after the name of a variable to access the fields of that variable</p> </li> <li> <p>function handle: a data type that stores an association to a function, rather than the function itself</p> </li> </ul>"},{"location":"matlabBasics/Tables/#important-functions","title":"Important Functions","text":"<p>After reviewing this module, you should be able to use the following functions:</p> <ul> <li> <p>table: create a table variable</p> </li> <li> <p>summary: print a summary of a table variable to the command window</p> </li> <li> <p>sortrows: sort rows of the table</p> </li> <li> <p>varfun: apply functions to columns in the table</p> </li> <li> <p>height: number of table rows</p> </li> <li> <p>groupsummary: Group summary computations</p> </li> </ul>"},{"location":"matlabBasics/Tables/#relevant-matlab-documentation","title":"Relevant MATLAB Documentation","text":"<ul> <li>Table properties</li> </ul>"},{"location":"matlabBasics/Tables/#create-a-table-variable","title":"Create a Table Variable","text":"<p>A table variable is basically a container for variables of other classes, which all must be column vectors (or matrices) that share the same number of rows</p> <p>Let's first create some variables:</p> Create Some Data<pre><code>LastName = {'Smith';'Johnson';'Williams';'Jones';'Brown'}; % cell array\nAge = [38;43;38;40;49]; % numeric array\nHeight = [71;69;64;67;64]; % numeric array\nWeight = [176;163;131;133;119]; % numeric array\nBloodPressure = [124 93; 109 77; 125 83; 117 75; 122 80]; % numeric array\n</code></pre> <p>We can examine the properties of these variables in the workspace or using the function <code>whos</code>:</p> Inspect variable properties using whos<pre><code>  Name                  Size             Bytes  Class     Attributes\n\n  Age                   5x1                 40  double              \n  BloodPressure         5x2                 80  double              \n  Height                5x1                 40  double              \n  LastName              5x1                620  cell                \n  Weight                5x1                 40  double              \n</code></pre> <p>\u2026Notice that all of these variables are column vectors with the same number of rows: We have one 5X1 cell array, the variable <code>LastName</code>. The rest of the variables are numeric arrays. <code>BloodPressure</code> is a 5X2 numeric array, while the rest of the variables are 5X1 numeric arrays.</p> <p>Example: Creating a table variable using the table function</p> <p>We can create a new table variable that combines all of these variables into a single variable called <code>T</code> using the <code>table</code> function.</p> Create table<pre><code>T = table(Age, Height,Weight,BloodPressure,'RowNames',LastName)\n</code></pre> <p>Notice that the inputs into <code>table</code> are simply the variables that we want to combine, separated by commas. Each input becomes a column in the <code>T</code> variable, with the name of the inputted variable becoming the name of the column. In the MATLAB vernacular, these columns are known as \"Variables\".  In this function call to <code>table</code>, we also input a paired input, 'RowNames', that sets the names of the rows in the table to the values found in the variable <code>LastName</code>. So, in this table, both the columns and the rows have headers. Note, I don't usually include row headers, but it is doable.</p> <p>And the table created is as follows:</p> result<pre><code>T = \n\n                Age    Height    Weight    BloodPressure\n                ___    ______    ______    _____________\n\n    Smith       38     71        176       124     93   \n    Johnson     43     69        163       109     77   \n    Williams    38     64        131       125     83   \n    Jones       40     67        133       117     75   \n    Brown       49     64        119       122     80   \n</code></pre>"},{"location":"matlabBasics/Tables/#accessing-table-content","title":"Accessing Table Content","text":""},{"location":"matlabBasics/Tables/#dot-notation","title":"dot notation","text":"<p>Once we get the data into a table, it is very easy to access any individual column of data (aka field) using dot notation. In this notation, you type the name of the Table variable (<code>T</code>), followed by a period, followed by the name of the field that you want to access. For example, the following syntax accesses the 'Weight' field:</p> Access Data from Weight Column<pre><code>T. Weight\n</code></pre> result<pre><code>ans =\n\n   176\n   163\n   131\n   133\n   119\n</code></pre> <p>\u2026Note how using dot notation returns a numeric array (<code>ans</code> is a double). When you use dot notation,  you are extracting the data type that is stored in the table variable from that column.</p> <p>So, the best way to think of a table is a data type that combines and organizes other data types, like cell arrays and numeric arrays.</p> <p>Pro-Tip: TAB for a list of table variables</p> <p>After you type the name of the table variable, T, and the period, hit the \"tab\" key on the keyboard. A list of all available fields should pop up and then you can choose the one you want to access.</p> <p>Try it now:</p> <ol> <li>Type <code>T.</code> in the command window</li> <li>Hit the tab key to reveal the pop-up menu</li> <li>Use arrows to select the desired field</li> <li>Hit Enter or TAB to select</li> </ol> <p></p>"},{"location":"matlabBasics/Tables/#table-indexing","title":"Table Indexing","text":"<p>There are many ways to index a table. You can use parentheses or curly brackets. And inside those parentheses or curly brackets, you can use Index Values (numbers) or column and row headers (character arrays).</p>"},{"location":"matlabBasics/Tables/#parentheses-indexing","title":"Parentheses Indexing","text":"<p>As expected, indexing with parentheses returns a smaller table. </p> <p>Index Column from a Table Variable</p> <p>The following syntax extracts the second column from T and returns a one-column table</p> <pre><code>T(:,2) % all rows, column 2\n</code></pre> result<pre><code>ans =\n\n  5\u00d71 table\n\n                Weight\n                ______\n\n    Smith        176  \n    Johnson      163  \n    Williams     131  \n    Jones        133  \n    Brown        119  \n</code></pre> <p>Since we indexed with the parentheses, the output is a smaller table with just the Weight column, but all row names included.</p> <p>Index Row from a Table variable</p> <p>The following syntax indexes out the 3rd and 4th rows from T.</p> <pre><code>T([3 4],:) % rows 3 &amp; 4, all columns\n</code></pre> result<pre><code>ans = \n\n              Age    Height    Weight    BloodPressure\n              ___    ______    ______    _____________\n\n    Jones      40     67        133       117     75   \n    Johnson    43     69        163       109     77   \n</code></pre> <p>Again, since we used the parentheses, we get a smaller table variable with fewer rows, and all of the columns.</p>"},{"location":"matlabBasics/Tables/#curly-bracket-indexing","title":"Curly Bracket indexing","text":"<p>You can also index a table variable with curly brackets. Similar to with cell arrays, if you index with curly brackets, you get the contents from within.</p> <p>Example: Curly bracket indexing of a table</p> <p>We can use Curly Brackets to extract data from a table, similar to dot notation:</p> <pre><code>T{:,2}\n</code></pre> result<pre><code>ans =\n\n  176\n  163\n  131\n  133\n  119\n</code></pre> <p>Since the second column is the 'Weight' column, we get the <code>weight</code> values. This is the same output as if we had used the dot notation: <code>T.Weight</code></p> <p>Although Dot notation is usually simpler than Curly Bracket to extract a column of data from a table, curly bracket indexing can be useful if you want to extract multiple columns worth of data from a table, like so:</p> <p>Example: Indexing Multiple Columns using Curly brackets</p> Extract Data from both the Height and Weight columns<pre><code>T{:,2:3}\n</code></pre> result<pre><code>ans =\n\n    71   176\n    69   163\n    64   131\n    67   133\n    64   119\n</code></pre> <p>\u2026Note, this only works for columns that share the same data type (like numeric arrays)</p>"},{"location":"matlabBasics/Tables/#indexing-by-column-name","title":"Indexing by Column Name","text":"<p>Another useful feature for tables is the ability to index by the column or row headers to index out data.</p> <p>Index by Column Header</p> <p>The following syntax indexes <code>T</code> by the Weight Column:</p> <pre><code>T(:,'Weight')\n</code></pre> result<pre><code>ans =\n\n  5\u00d71 table\n\n                Weight\n                ______\n\n    Smith        176  \n    Johnson      163  \n    Williams     131  \n    Jones        133  \n    Brown        119  \n</code></pre> <p>\u2026Since we indexed using parentheses, we get a smaller table with just one column ( <code>ans</code> is a 5X1 table).</p> <p>Index by Row Header</p> <p>Since we named our rows, we can use row names to index as well:</p> <pre><code>&gt;&gt;T({'Johnson','Jones'},:)\nans = \n              Age    Height    Weight    BloodPressure\n              ___    ______    ______    _____________\n\n    Johnson    43     69        163       109     77   \n    Jones      40     67        133       117     75   \n</code></pre> <p>\u2026Again, we get a table, because we used parentheses to index. In this syntax, the curly brackets were used to concatenate into a cell array so we can index two row names. </p>"},{"location":"matlabBasics/Tables/#challenge-table-indexing","title":"Challenge: Table Indexing","text":"Question 1Answer 1Question 2Answer 2Question 3Answer 3Question 4Answer 4Question 5Answer 5 <p>Show the syntax to index <code>T</code> and get a smaller table with the just the first three rows in it.</p> <p>Show the syntax to index <code>T</code> and get a smaller table with the just the first three rows in it.</p> <p>To do this, you need to use parentheses, as follows</p> Index first three rows of T<pre><code>T(1:3,:)\n</code></pre> result<pre><code>ans =\n\n  3\u00d74 table\n\n                Age    Height    Weight    BloodPressure\n                ___    ______    ______    _____________\n\n    Smith       38       71       176       124     93  \n    Johnson     43       69       163       109     77  \n    Williams    38       64       131       125     83  \n</code></pre> <p>Show the Syntax to return the data from the \"BloodPressure\" Column in <code>T</code>.</p> <p>Show the Syntax to return the data from the \"BloodPressure\" Column in <code>T</code>**.</p> <p>You simply use dot notation, as follows:</p> <pre><code>T.BloodPressure\n</code></pre> result<pre><code>ans =\n\n  124    93\n  109    77\n  125    83\n  117    75\n  122    80\n</code></pre> <p>Show the Syntax to return just the first column of data from the \"BloodPressure\" Column in <code>T</code>.</p> <p>Show the Syntax to return just the first column of data from the \"BloodPressure\" Column in <code>T</code>.</p> <pre><code> T.BloodPressure(:,1)\n</code></pre> result<pre><code>ans =\n\n  124\n  109\n  125\n  117\n  122\n</code></pre> <p>The way to think about this is that once you use dot notation, you are basically dealing with the contained variable. When we enter <code>T.BloodPressure</code> to access the BloodPressure column, we are basically now dealing with a numeric array. So, now we can index using the parentheses to access just the first column of the BloodPressure data, just as we would for any numeric array. </p> <p>What does the following syntax return?</p> <pre><code>T(2,3)\n</code></pre> <ul> <li>Data type?</li> <li>Number of Rows?</li> <li>Number of Columns?</li> </ul> <p>This syntax</p> <p>result is a scalar table<pre><code>T(2,3)\n</code></pre> <pre><code>ans =\n\n  table\n\n              Weight\n              ______\n\n    Johnson     163  \n</code></pre></p> <p>You get a scalar table: a table with just 1 data point.</p> <p>How would you use Name indexing on <code>T</code> if you want Ms. Brown's Blood Pressure returned as a:</p> <ol> <li>Table?</li> <li>Numeric variable?</li> </ol> <p>To return as a table, you would use the parentheses as follows:</p> <pre><code>T({'Brown'},{'BloodPressure'})\n</code></pre> result<pre><code>ans =\n\n  table\n\n            BloodPressure\n            _____________\n\n    Brown     122     80  \n</code></pre> <p>And to return as a numeric variable, you would use the curly brackets:</p> <pre><code>T{{'Brown'},{'BloodPressure'}}\n</code></pre> result<pre><code>ans =\n\n  122    80\n</code></pre>"},{"location":"matlabBasics/Tables/#removing-table-content","title":"Removing Table Content","text":"<p>Just as we can remove elements from arrays, we can remove columns from tables using the empty brackets.</p> <p>For example, to remove the 'BloodPressure' column, we would use the following syntax:</p> Remove Column from Table Variable<pre><code>T.BloodPressure = []\n</code></pre> result<pre><code>T =\n\n  5\u00d73 table\n\n                Age    Height    Weight\n                ___    ______    ______\n\n    Smith       38       71       176  \n    Johnson     43       69       163  \n    Williams    38       64       131  \n    Jones       40       67       133  \n    Brown       49       64       119  \n</code></pre> <p>\u2026and the BloodPressure column is unceremoniously dumped.</p> <p>But since we still have the numeric array <code>BloodPressure</code> in the workspace, we can easily add back the column using dot notation:</p> Add Column to Table Variable<pre><code>T.BloodPressure = BloodPressure\n</code></pre> result<pre><code>T =\n\n  5\u00d74 table\n\n                Age    Height    Weight    BloodPressure\n                ___    ______    ______    _____________\n\n    Smith       38       71       176       124     93  \n    Johnson     43       69       163       109     77  \n    Williams    38       64       131       125     83  \n    Jones       40       67       133       117     75  \n    Brown       49       64       119       122     80  \n</code></pre> <p>Note</p> <p>This syntax only works because <code>BloodPressure</code> is still a variable in the workspace and <code>T</code> is already a table variable. If <code>T</code> didn't already exist as a table, this syntax would instead create a structure array (See Structure Array Module).</p>"},{"location":"matlabBasics/Tables/#table-properties","title":"Table Properties","text":"<p>Every table has a hidden field called Properties that contains the property values for the table. Properties include the names of each Column (VariableNames) and the name of each row (RowNames, optional). You can also store additional information in a table by storing it in the UserData field. UserData can contain any class of data, even another table.</p>"},{"location":"matlabBasics/Tables/#accessing-the-properties-using-dot-notation","title":"Accessing the Properties using Dot Notation","text":"<p>Table properties, other than the \"VariableNames\" field, are often empty by default. You can see the properties of a table by using dot notation as follows:</p> Display table properties<pre><code>T.Properties\n</code></pre> result<pre><code>ans = \n\n             Description: ''\n    VariableDescriptions: {}\n           VariableUnits: {}\n          DimensionNames: {'Row'  'Variable'}\n                UserData: []\n                RowNames: {5x1 cell}\n           VariableNames: {'Age' 'Height'  'Weight'  'BloodPressure'}\n</code></pre> <p>\u2026Notice that <code>T.Properties</code> returns a structure data type. Also, notice that this structure contains metadata fields that describe the table, such as the column headers (\"VariableNames\") and row headers (\"RowNames\"). There are also fields where you can add detailed descriptions and units of measure for each column.</p>"},{"location":"matlabBasics/Tables/#changing-properties-using-indexing-and-dot-notation","title":"Changing Properties using indexing and dot notation","text":"<p>Since the properties are a structure array, we can manipulate the data in this structure using dot notation. Notice that the \"VariableNames\" field is a cell array. So you can modify this array using dot notation and the syntax for cell arrays. For example, to change the column header 'BloodPressure' to 'BP', you can use the following syntax:</p> Change Column Name<pre><code>T.Properties.VariableNames{end} = 'BP'\n</code></pre> result<pre><code>T =\n\n  5\u00d74 table\n\n                Age    Height    Weight        BP    \n                ___    ______    ______    __________\n\n    Smith       38       71       176      124     93\n    Johnson     43       69       163      109     77\n    Williams    38       64       131      125     83\n    Jones       40       67       133      117     75\n    Brown       49       64       119      122     80\n</code></pre>"},{"location":"matlabBasics/Tables/#adding-new-property-data","title":"Adding New Property data","text":"<p>You can also add new information to the table properties. Notice that there is a field for Variable Units. Use the following syntax to update this field:</p> Add Variable Units to Properties<pre><code>T.Properties.VariableUnits = {'years','Inches','Pounds','Diastolic - Systolic'}\n</code></pre>"},{"location":"matlabBasics/Tables/#viewing-updated-properties","title":"Viewing updated properties","text":"<p>To see updates to the Table properties, you need to explicitly call the Properties field as follows:</p> Display Table Properties<pre><code>T.Properties\n</code></pre> Result: table properties displayed<pre><code>ans = \n\n  TableProperties with properties:\n\n             Description: ''\n                UserData: []\n          DimensionNames: {'Row'  'Variables'}\n           VariableNames: {'Age'  'Height'  'Weight'  'BP'}\n    VariableDescriptions: {}\n           VariableUnits: {'years'  'Inches'  'Pounds'  'Diastolic - Systolic'}\n      VariableContinuity: []\n                RowNames: {5\u00d71 cell}\n</code></pre> <p>\u2026Now you can see all of the updates that were made to the table properties.</p>"},{"location":"matlabBasics/Tables/#useful-table-operations-and-functions","title":"Useful Table Operations and Functions","text":"<p>MATLAB provides many useful functions for table variables.</p>"},{"location":"matlabBasics/Tables/#summary-function","title":"Summary function","text":"<p>The <code>summary</code> function returns a statistical summary of the data in each column, including the min, median, and max. Note that the <code>summary</code> function does not return an output (i.e., <code>ans</code> is not populated). Instead, the result is \"printed\" to the command window.</p> Summary<pre><code>summary(T)\n</code></pre> Result: Summary Output<pre><code>T: 5\u00d74 table\n\nVariables:\n\n    Age: double\n    Height: double\n    Weight: double\n    BloodPressure: 2-column double\n\nStatistics for applicable variables:\n\n                          NumMissing      Min      Median       Max        Mean          Std    \n\n    Age                       0            38         40         49         41.6        4.6152  \n    Height                    0            64         67         71           67        3.0822  \n    Weight                    0           119        133        176        144.4        23.975  \n    BloodPressure(:,1)        0           109        122        125        119.4        6.5803  \n    BloodPressure(:,2)        0            75         80         93         81.6        7.0569        \n</code></pre>"},{"location":"matlabBasics/Tables/#height-width-and-size-functions","title":"Height, Width, and Size functions","text":"<p>Sometimes you just want to know the number of rows in a table. The function <code>height</code> returns this value:</p> <p>Example. Function height returns number of rows</p> <pre><code>height (T)\n</code></pre> result<pre><code>ans =\n\n    5 % number of rows in table\n</code></pre> <p>And sometimes you just want to know the number of columns in a table. The function <code>width</code> intuitively returns the number of columns (or variables) in a table:</p> <p>Example. Function width returns number of columns</p> Function: width<pre><code>width(T)\n</code></pre> result<pre><code>ans =\n\n    4 % number of columns\n</code></pre> <p>The function <code>size</code> returns both dimensions (or the specified the dimension), as we have seen with other variable types:</p> <p>Example: size returns the dimensions of the table</p> Function: size<pre><code>size(T)\n</code></pre> result<pre><code>ans =\n\n    5     4 % 5 rows, 4 columns\n</code></pre> <p>Example: The second input into size determines which dimension to calculate the size</p> <p>Remember, the second dimension means the number of columns, in MATLAB.</p> <pre><code>size(T,2) % return size of second dimension\n</code></pre> <pre><code>ans =\n\n    4 % four columns\n</code></pre>"},{"location":"matlabBasics/Tables/#sortrows-function","title":"Sortrows function","text":"<p>Organizing your data into a table greatly simplifies data analysis. For example, you can use the function <code>sortrows</code> to organize the table alphabetically by \"RowName\":</p> <p>sortrows by row names</p> <pre><code>sortrows(T,'RowNames')\n</code></pre> result<pre><code>ans =\n\n  5\u00d74 table\n\n                Age    Height    Weight    BloodPressure\n                ___    ______    ______    _____________\n\n    Brown       49       64       119       122     80  \n    Johnson     43       69       163       109     77  \n    Jones       40       67       133       117     75  \n    Smith       38       71       176       124     93  \n    Williams    38       64       131       125     83  \n</code></pre> <p>We can also sort by column or by multiple columns. The following syntax sorts the table first by height, then by weight:</p> <p>Sort rows by Height, then Weight</p> <pre><code>sortrows(T,{'Height','Weight'})\n</code></pre> result<pre><code>ans =\n\n  5\u00d74 table\n\n                Age    Height    Weight    BloodPressure\n                ___    ______    ______    _____________\n\n    Brown       49       64       119       122     80  \n    Williams    38       64       131       125     83  \n    Jones       40       67       133       117     75  \n    Johnson     43       69       163       109     77  \n    Smith       38       71       176       124     93  \n</code></pre> <p>\u2026now the rows are sorted in ascending order by the height, followed by the weight.</p>"},{"location":"matlabBasics/Tables/#challenge-sortrows","title":"Challenge: sortrows","text":"QuestionAnswer <p>What will you get if you typed: <code>sortrows(T)</code>, without additional inputs? </p> <p>What do you think would happen if you just typed: sortrows(T), without any additional inputs?</p> <pre><code>sortrows(T)\n</code></pre> result<pre><code>ans =\n\n  5\u00d74 table\n\n                Age    Height    Weight    BloodPressure\n                ___    ______    ______    _____________\n\n    Williams    38       64       131       125     83  \n    Smith       38       71       176       124     93  \n    Jones       40       67       133       117     75  \n    Johnson     43       69       163       109     77  \n    Brown       49       64       119       122     80  \n</code></pre> <p>The table is sorted by the first column, 'Age', and the output is assigned to the default variable ans.</p>"},{"location":"matlabBasics/Tables/#movevars-moving-columns-around","title":"movevars (Moving columns around)","text":"<p>The function <code>movevars</code> can be used to reorder the variables in a table.</p> <p>For example, say we added two new variable to our table, \"Sex\" and \"Region\"</p> Add variables using dot notation<pre><code>T.Sex = [\"Male\"; \"Male\"; \"Female\"; \"Female\"; \"Male\"];\nT.Region = [\"North\"; \"North\"; \"West\"; \"South\"; \"East\"];\n</code></pre> result<pre><code>T =\n\n  5\u00d76 table\n\n                Age    Height    Weight    BloodPressure      Sex       Region \n                ___    ______    ______    _____________    ________    _______\n\n    Smith       38       71       176       124     93      \"Male\"      \"North\"\n    Johnson     43       69       163       109     77      \"Male\"      \"North\"\n    Williams    38       64       131       125     83      \"Female\"    \"West\" \n    Jones       40       67       133       117     75      \"Female\"    \"South\"\n    Brown       49       64       119       122     80      \"Male\"      \"East\" \n</code></pre> <p>\u2026When you add new variables using dot notation, the default is to add these variable at the far right of the table. </p> <p>To reorder the columns, you use the function <code>movevars</code> as follows:</p> Reorder variables<pre><code>T = movevars(T,[\"Sex\" \"Region\"],\"Before\",\"Age\")\n</code></pre> <pre><code>T =\n\n  5\u00d76 table\n\n                  Sex       Region     Age    Height    Weight    BloodPressure\n                ________    _______    ___    ______    ______    _____________\n\n    Smith       \"Male\"      \"North\"    38       71       176       124     93  \n    Johnson     \"Male\"      \"North\"    43       69       163       109     77  \n    Williams    \"Female\"    \"West\"     38       64       131       125     83  \n    Jones       \"Female\"    \"South\"    40       67       133       117     75  \n    Brown       \"Male\"      \"East\"     49       64       119       122     80  \n</code></pre> <p>\u2026and we get a newly reordered table.</p>"},{"location":"matlabBasics/Tables/#convertvars-type-casting-variables","title":"convertvars (Type Casting Variables)","text":"<p>The function <code>convertvars</code> can be used to type cast multiple variables in a table at the same time.</p> <p>For example, in the previous section, we added two new string array variables to the table: \"Sex\" and \"Region\". However, for data processing, it's often preferable to have categorical arrays, instead of string arrays.</p> <p>We can type cast single variables in a table using dot notation, as follows:</p> Type cast One Variable<pre><code>T.Sex = categorical(T.Sex)\n</code></pre> <p>Or, if we want to type cast multiple variables at the same time, we can use the <code>convertvars</code> function:</p> Type cast multiple variables at the same time<pre><code>T = convertvars(T,[\"Sex\" \"Region\"],'categorical')\n</code></pre> result<pre><code>T =\n\n  5\u00d76 table\n\n                 Sex      Region    Age    Height    Weight    BloodPressure\n                ______    ______    ___    ______    ______    _____________\n\n    Smith       Male      North     38       71       176       124     93  \n    Johnson     Male      North     43       69       163       109     77  \n    Williams    Female    West      38       64       131       125     83  \n    Jones       Female    South     40       67       133       117     75  \n    Brown       Male      East      49       64       119       122     80  \n</code></pre> <p>\u2026And now, \"Sex\" and \"region\" are categorical arrays (notice that there are no double quote delimiters in Sex and Region columns).</p> <p>Running <code>summary</code> on the updated table confirms these changes:</p> Table Summary<pre><code>summary(T)\n</code></pre> <pre><code>T: 5\u00d76 table\n\nVariables:\n\n    Sex: categorical (2 categories)\n    Region: categorical (4 categories)\n    Age: double\n    Height: double\n    Weight: double\n    BloodPressure: 2-column double\n\nStatistics for applicable variables:\n\n                          NumMissing      Min      Median       Max        Mean          Std    \n\n    Sex                       0                                                                 \n    Region                    0                                                                 \n    Age                       0            38         40         49         41.6        4.6152  \n    Height                    0            64         67         71           67        3.0822  \n    Weight                    0           119        133        176        144.4        23.975  \n    BloodPressure(:,1)        0           109        122        125        119.4        6.5803  \n    BloodPressure(:,2)        0            75         80         93         81.6        7.0569  \n</code></pre>"},{"location":"matlabBasics/Tables/#applying-functions-to-variables","title":"Applying Functions to Variables","text":"<p>The <code>varfun</code> function is used to apply a function to multiple columns in a table. You can use <code>varfun</code> to quickly calculate the statistics for multiple columns. In contrast to the <code>summary</code> function,  <code>varfun</code> returns a table data which can then be assigned to a new table variable (as opposed to just printing the result to the command window).</p> <p>Using varfun to calculate the mean for all columns</p> <p>The first input into <code>varfun</code> should be the function handle. Remember a function handle is just the function name preceded by the @ symbol. This basically means to pass the name of the function into another function.</p> <p>Since we want to calculate the average of each column, we need to pass in the <code>@mean</code> function handle. </p> <pre><code>S = varfun(@mean,T)\n</code></pre> result<pre><code>S =\n\n  1\u00d74 table\n\n    mean_Age    mean_Height    mean_Weight    mean_BloodPressure\n    ________    ___________    ___________    __________________\n\n      41.6          67           65.499         119.4     81.6  \n</code></pre> <p>The result is a new table <code>S</code> with the means from the columns in <code>T</code>.</p> <p>Notice that names of the columns in the new table <code>S</code> are prepended with the name of the function that was applied to the column, e.g. 'mean_age' is the average of the age column in <code>T</code></p> <p>This simple call to <code>varfun</code>, with no additional inputs, worked because all of the columns in <code>T</code> are numeric arrays. If the table <code>T</code> had been more complex (e.g. if some of the columns contained string arrays), then we would have needed more inputs to specify precisely which columns we wanted to apply the <code>mean</code> function.</p>"},{"location":"matlabBasics/Tables/#challenge-varfun","title":"Challenge: varfun","text":"QuestionAnswerQuestion 2Answer 2 <p>How would you calculate the standard deviation of the columns in <code>T</code> and assign the result to <code>Sstd</code>?</p> <pre><code>Sstd = varfun(@std,T)\n</code></pre> <pre><code>Sstd =\n\n  1\u00d74 table\n\n    std_Age    std_Height    std_Weight    std_BloodPressure\n    _______    __________    __________    _________________\n\n    4.6152       3.0822        23.975      6.5803    7.0569\n</code></pre> <p>and this syntax returns the last element in the array, which contains the letter <code>o</code>:</p> <p>Review the varfun help page.</p> <p>What input pair would you use to calculate the mean of just the height and weight columns in T?</p> <p>What input pair would you use to calculate the mean of just the height and weight columns in T?</p> <pre><code>S = varfun(@mean,T,'InputVariables',{'Height','Weight'})\n</code></pre> result<pre><code>S =\n\n  1\u00d72 table\n\n    mean_Height    mean_Weight\n    ___________    ___________\n\n        67            144.4   \n</code></pre>"},{"location":"matlabBasics/Tables/#grouping-variables","title":"Grouping Variables","text":"<p>Grouping Variables are used to group the rows of a table into different categories, allowing for statistical calculations based on category. For example, say you wanted to calculate the mean Weight and Blood Pressure for old and young people. To do this, you need a grouping variable that groups the rows into categories such as \"old\" or \"not old\". A grouping variable can be a cell, a boolean or even a numeric array.</p> <p>Example: Adding a Grouping Variable to a table</p> <p>In this example, we add a new logical array column called 'Old' to our table where <code>TRUE</code> indicates \"old\" and <code>FALSE</code> indicates \"not old\". As everyone knows, anything older than 39 is definitely old, so let's use the relational operation 'Age greater than 39' to create our new grouping variable as follows:</p> Age greater than 39 is True<pre><code>T.Old = T.Age &gt; 39\n</code></pre> <pre><code>T =\n\n  5\u00d75 table\n\n                Age    Height    Weight    BloodPressure     Old \n                ___    ______    ______    _____________    _____\n\n    Smith       38       71       176       124     93      false\n    Johnson     43       69       163       109     77      true \n    Williams    38       64       131       125     83      false\n    Jones       40       67       133       117     75      true \n    Brown       49       64       119       122     80      true \n</code></pre> <p>Now we have a new column in <code>T</code> called 'Old' and in this column, there is a <code>true</code> for any row where the age is greater than 39 and <code>false</code> everywhere else.</p> <p>We can use the \"Old\" column as a grouping variable in the function <code>varfun</code>:</p> <p>Example: Using a Grouping Variable in varfun</p> Set Grouping Variable to Old<pre><code>S = varfun(@mean, T,'GroupingVariables','Old')\n</code></pre> <pre><code>S =\n\n  2\u00d76 table\n\n    Old     GroupCount    mean_Age    mean_Height    mean_Weight    mean_BloodPressure\n    _____    __________    ________    ___________    ___________    __________________\n\n    false        2            38           67.5          153.5        124.5        88  \n    true         3            44         66.667         138.33          116    77.333  \n</code></pre> <p>After setting the grouping variable to \"Old\", <code>varfun</code> now returns a new table (<code>S</code>) with two rows: one for each category in the Grouping variable (<code>false</code> or <code>true</code>). The first row contains the average of all rows in <code>T</code> that have a <code>false</code> in the 'Old' column, while the second row contains the average of all rows in <code>T</code> that have a <code>true</code> in the 'Old' column.</p> <p>Also notice that:</p> <ol> <li>Two new columns have been added to the <code>S</code> table: \"Old\" and \"GroupCount\"</li> <li>The column \"Old\" contains the unique values (or categories) found in the grouping variable from <code>T</code>: <code>false</code> and <code>true</code>.</li> <li>The column  \"GroupCount\" contains the counts for each category. In table <code>T</code> there were 2 \"not-olds\" and 3 \"olds\"</li> </ol>"},{"location":"matlabBasics/Tables/#group-summary","title":"Group Summary","text":"<p>The function <code>groupsummary</code> is designed from the ground up to calculate statistics from table variables using grouping variables.</p> <p>The most basic function call to <code>groupsummary</code> is as follows:</p> Function groupsummary<pre><code> G = groupsummary(T,\"Old\")\n</code></pre> result<pre><code>G =\n\n  2\u00d72 table\n\n     Old     GroupCount\n    _____    __________\n\n    false        2     \n    true         3     \n</code></pre> <p>\u2026this call simply computes a count of the different groups.</p> <p>However, <code>groupsummary</code>  becomes really useful when you want to calculate the statistics on the different columns, as follows:</p> <p>Example: Calculate group averages</p> calculate mean<pre><code>G = groupsummary(T, \"Old\",\"mean\")\n</code></pre> result<pre><code>G =\n\n  2\u00d76 table\n\n    Old     GroupCount    mean_Age    mean_Height    mean_Weight    mean_BloodPressure\n    _____    __________    ________    ___________    ___________    __________________\n\n    false        2            38           67.5          153.5        124.5        88  \n    true         3            44         66.667         138.33          116    77.333  \n</code></pre> <p>\u2026Here we get the mean for each column. Note, this only works because all of the other columns in the table are numeric.</p> <p>You can also calculate multiple statistics, like mean and standard deviation, and specify the columns you want to calculate</p> <p>Example: Calculate mean and standard deviation for Height</p> <p>If you want to calculate both the mean and the standard deviation, but just for the \"Height\" column, you can use the following function call.</p> <p><pre><code>G = groupsummary(T, \"Old\",[\"mean\",\"std\"], \"Height\")\n</code></pre> Notice that we input a string array to indicate the statistics that we want to perform.</p> result<pre><code>G =\n\n  2\u00d74 table\n\n    Old     GroupCount    mean_Height    std_Height\n    _____    __________    ___________    __________\n\n    false        2             67.5         4.9497  \n    true         3           66.667         2.5166  \n</code></pre> <p>Now we get two stats columns: One for the mean and one for the standard deviation. This is incredibly powerful for a single function call. To get the equivalent results using <code>varfun</code>, we would need at least two function calls and have to create two separate output variables, which would then need to be concatenated in some fashion.</p> <p>There are of course many ways that you can call <code>groupsummary</code>. Read the details on the Mathworks groupsummary documentation page.</p>"},{"location":"matlabBasics/Tables/#challenge-groupsummary","title":"CHALLENGE: groupsummary","text":"Question 1Answer 1Question 2Answer 2 <p>Use <code>groupsummary</code> to calculate the median and range for the height and weight columns in <code>T</code>. Use \"Old\" as a grouping variable.</p> Calc Median and Range for Height and Weight<pre><code>S = groupsummary(T,'Old',[\"median\" \"range\"], [\"Height\" \"Weight\"])\n</code></pre> result<pre><code>S =\n\n  2\u00d76 table\n\n    Old     GroupCount    median_Height    range_Height    median_Weight    range_Weight\n    _____    __________    _____________    ____________    _____________    ____________\n\n    false        2             67.5              7              153.5             45     \n    true         3               67              5                133             44  \n</code></pre> <p>Do you have to include a grouping variable? What happens if you use the empty brackets (<code>[]</code>) in the grouping variable position?</p> Empty Brackets for Grouping Var<pre><code>S = groupsummary(T,[],[\"median\" \"range\"], [\"Height\" \"Weight\"])\n</code></pre> <p>result<pre><code>S =\n\n  1\u00d75 table\n\n    GroupCount    median_Height    range_Height    median_Weight    range_Weight\n    __________    _____________    ____________    _____________    ____________\n\n        5              67               7               133              57     \n</code></pre> \u2026If we don't indicate a Grouping variable (by input the empty square brackets), we simply get the result for the full column.</p>"},{"location":"matlabBasics/Tables/#mathematical-operations","title":"Mathematical Operations","text":"<p>In addition to using specialized functions to analyze our data, we can perform mathematical operations on the columns of table variables by combining dot notation and table indexing. Consider the following example:</p>"},{"location":"matlabBasics/Tables/#converting-pounds-to-kilos","title":"Converting Pounds to Kilos","text":"<p>In <code>T</code>, the \"Weight\" column contains the weight of each person in pounds. For scientific analysis, weight is often recorded in kilograms. The conversion factor from pounds to kilograms is as follows:</p> <p>1 pound (lb) is equal to 0.45359237 kilograms (kg).</p> <p>Taking this into consideration, we can convert our \"Weight\" Column to kilograms using the following syntax:</p> <p>Example: Table Math </p> Convert pounds to kilos<pre><code>T.Weight_k = T.Weight * 0.45359237\n</code></pre> <pre><code>T =\n\n  5\u00d75 table\n\n                Age    Height    Weight    BloodPressure    Weight_k\n                ___    ______    ______    _____________    ________\n\n    Smith       38       71       176       124     93       79.832 \n    Johnson     43       69       163       109     77       73.936 \n    Williams    38       64       131       125     83       59.421 \n    Jones       40       67       133       117     75       60.328 \n    Brown       49       64       119       122     80       53.977 \n</code></pre> <p>\u2026This syntax adds a new column called \"Weight_k\" with the properly converted values in kilograms</p> <p>However, sometimes you don't want to clutter up your table. If you want to keep the same number of columns, you can simply overwrite the Weight column with the converted values, using the following syntax.</p> Overwrite Weight Column<pre><code>T.Weight = T.Weight * 0.45359237\n</code></pre> result<pre><code>T =\n\n  5\u00d75 table\n\n                Age    Height    Weight    BloodPressure    Weight_k\n                ___    ______    ______    _____________    ________\n\n    Smith       38       71      79.832     124     93       79.832 \n    Johnson     43       69      73.936     109     77       73.936 \n    Williams    38       64      59.421     125     83       59.421 \n    Jones       40       67      60.328     117     75       60.328 \n    Brown       49       64      53.977     122     80       53.977 \n</code></pre> <p>Then, we could remove the \"Weight_k\" column and update the \"VariableUnits\" property field as follows:</p> Update Table<pre><code>T.Weight_k = []; % remove Weight_k column\nT.Properties.VariableUnits{3} = 'kilograms' % add units to properties\n</code></pre> result<pre><code>T =\n\n  5\u00d74 table\n\n                Age    Height    Weight    BloodPressure\n                ___    ______    ______    _____________\n\n    Smith       38       71      79.832     124     93  \n    Johnson     43       69      73.936     109     77  \n    Williams    38       64      59.421     125     83  \n    Jones       40       67      60.328     117     75  \n    Brown       49       64      53.977     122     80  \n</code></pre> <p>Module over </p>"},{"location":"matlabBasics/Variables/","title":"Variables","text":"<p>for storing data</p>"},{"location":"matlabBasics/Variables/#module-overview","title":"Module Overview","text":"<p>Ok, so we're going to be storing data as we muddle through programming. But where are we going to store this data?</p> <p>In Variables.</p> <p>Variables are what we will use to store  data. And files. But mostly variables. So, most of what you will be doing as you learn programming is adding data to variables and then doing stuff with that data (see the Function Overview).</p> <p>In this module, we explore the properties of variables.</p>"},{"location":"matlabBasics/Variables/#stuff-you-should-know","title":"Stuff You Should Know","text":"<p>After completing this Module, you should be able to:</p> <ul> <li> <p>Define Data structure and array</p> </li> <li> <p>Describe the difference between a Matrix, an Array, and a Vector</p> </li> <li> <p>Explain variable Indexing and compare the difference between linear and standard indexing</p> </li> <li> <p>Define Data Type and list the fundamental MATLAB classes</p> </li> </ul>"},{"location":"matlabBasics/Variables/#useful-ish-matlab-documentation","title":"Useful-ish MATLAB Documentation","text":"<ul> <li>Create and Edit Variables</li> </ul>"},{"location":"matlabBasics/Variables/#terms-you-should-know","title":"Terms You Should Know","text":"<ul> <li> <p>Variable: a named location where you can store data.  </p> </li> <li> <p>Data Structure: a particular way of storing and organizing data in a variable</p> </li> <li> <p>Data Type: a variable classification that determines the types of values that are allowed to be stored in the variable</p> </li> <li> <p>Array: a simple type of data structure consisting of a collection of elements (values or variables). Each element can be identified by an index.</p> </li> <li> <p>Index. An addressing system used to pull data out of an array. The main types of indexes include Standard, Linear, and Logical Indexing.</p> </li> <li> <p>Vector: A one-dimensional array of numbers (a single row or column of numbers)</p> </li> <li> <p>Matrix:  A two-dimensional, rectangular array of numbers. The basic format of a MATLAB Variable. All MATLAB variables are arrays (think spreadsheet)</p> </li> <li> <p>Syntax: the precise coding language of a computer program.</p> </li> </ul>"},{"location":"matlabBasics/Variables/#so-what-is-a-variable","title":"So, What is a Variable?","text":"<p>In computer programming, variables are storage locations where you can store stuff (data). As we discussed earlier, this data can be numbers, letters, words, or even a whole set of instructions designed to deal with other stored data.</p> <p>Variables have names, such as 'A' or 'apple', and their stored data can be changed (hence the term \"variable\").</p> <p>Variables are fundamental components of programming. When we program, we mostly create or assign data to variables and then manipulate the data using step-by-step procedures (known as algorithms or functions).</p> <p>The MATLAB syntax used to store data in a variable looks like this:</p> <pre><code>variable_name = data\n</code></pre> <p>Notice that the variable name is located on the LEFT side of the equal sign and the data is located on the RIGHT side of the equal sign. Data flows from RIGHT to LEFT.</p>"},{"location":"matlabBasics/Variables/#what-is-a-data-structure","title":"What Is a Data Structure?","text":"<p>A data structure describes how the data is organized in a variable.</p> <p>There are many different data structures, but the main one that we will deal with is the array.</p>"},{"location":"matlabBasics/Variables/#arrays","title":"Arrays","text":"<p>The simplest data structure is an array. Think of an array as a series of little boxes \ud83d\udce6 \ud83d\udce6 \ud83d\udce6. Each of these boxes is known as an element. And all of the little boxes in an array are organized so that they have a specific location (box 1, box 2, box 3). This location is called its index. So, box 1 has index 1, box 2 has index 2, etc.</p> <p>Arrays of different sizes have different names:</p> <ul> <li>Scalar: an array with just one element (and one value)</li> <li>Vector: a row or column of elements</li> <li>Matrix: a two-dimensional, rectangularly shaped array capable of storing multiple elements of data in an easily accessible format. This is the fundamental MATLAB data structure (See Creating Matrices). Think of what a spreadsheet looks like, and you have an idea of what a matrix is. All of the data that you enter into MATLAB is stored in the form of this multidimensional type of array. MATLAB puts the MAT in matrices.</li> </ul> <p></p>"},{"location":"matlabBasics/Variables/#what-is-indexing","title":"What Is Indexing?","text":"<p>Indexing is an address system that points to elements in an array and allows you to access the data contained within.</p> <p>In a matrix, each element can be referenced by its index. To make things a little more exciting, MATLAB uses multiple, different indexing systems. Here, we describe two of these indexing systems: standard or linear indexing.</p> <p></p> <p>On the left is the linear indexing system, which uses COLUMN MAJOR indexing. In column-major order, each element is numbered down each column first, before moving to the next column. So, to refer to the element in row 2, column 2, you simply use the index number 5. On the right is the standard indexing system, which has the following syntax: (row, column). In this scheme, the left number indicates the row and the right number indicates the column. To refer to the element in row 2, column 2, you would use the following syntax: (2,2). These two indexing schemes can be used interchangeably in MATLAB.</p> <p>The MATLAB syntax for indexing looks like this</p> <pre><code>variable_name(row,col) % standard indexing\nvariable_name(index) % linear indexing\n</code></pre> <p>This syntax returns the data contained in the elements of the array. You can think of this a little like the array of mailboxes you can find at your local post office. Each mailbox has a number on it, and the numbers are typically arrayed in some sort of sequential order. Opening one mailbox to access the contents is equivalent to indexing an element in this example.</p>"},{"location":"matlabBasics/Variables/#what-is-a-data-type","title":"What is a Data Type?","text":"<p>As discussed on the Data Overview page, we will primarily be storing three basic data types: Numbers, letters, and booleans. Also as previously discussed, computers are kind of dumb. And, to store these basic data types, you have to explicitly tell the software, \"Hey, I need to store a number (or a character or a logical).\" The way that we tell the software that we want to store one of these data types is through syntax. See the Array Assignment page for more details on the basic syntax we will use to indicate data type.</p> <p>To store these different data types, you need specialized variables. This specialization is known as a <code>class</code>. Each class has rules on what it can be used to store. For example, there is a class that can only store numbers, another that can only store characters and another that can only store booleans. These basic classes are labeled as:</p> <ul> <li>numeric</li> <li>character</li> <li>logical</li> </ul> <p>There are more classes (technically, there are 17 different classes), but we are going to start with these basic classes.</p> <p>A data type simply indicates what kind of data that variable can store, like Numbers, Characters, or True or Falses? In MATLAB, just to be tricky, a data type is also known as a Data Class.</p> <p>These classes have reserved names, as shown in this diagram:</p> <p></p> <p>In this course, we will learn about the following MATLAB classes:</p> Class Name Intended Use numeric numbers char characters string strings (eg words) cell complex content struct hierarchal data logical boolean (true / false) data table Complex Spreadsheet type data <p>To make things even worse, the numeric class actually comprises several subclasses with cryptic names like double or uint16. These numeric subclasses are used to store different kinds of numbers, like Whole Numbers (integers) vs Numbers With Decimal Points (Floating-Point Numbers).</p> <p>Here are some words you probably don't understand yet:</p> <ul> <li> <p>Floating-Point Number Classes: single, double (the default numeric class)</p> </li> <li> <p>Integer Classes:  int8, uint8, int16, uint16, int32, uint32, int64, uint64</p> </li> </ul> <p>Don't worry, we'll get to what this all means in later modules, but basically, a variable's numeric class affects the minimum and maximum numbers that can be stored in that variable. It also determines whether the number can have a negative value, or just be positive.</p>"},{"location":"matlabBasics/matlabInterface/","title":"Exploring the MATLAB desktop","text":"<p>A quick overview of the MATLAB desktop</p>"},{"location":"matlabBasics/matlabInterface/#command-window","title":"Command Window","text":"<p>The command window is the area in MATLAB where you can type  MATLAB code and have it immediately execute. Try it now.</p> <p>Enter the following in the command window:</p> <pre><code>a = 1\n</code></pre> <p>After you hit enter, you get a response from MATLAB, as follows</p> result<pre><code>a =\n\n     1\n</code></pre> <p>\u2026This tells you what MATLAB did. This assigns the value <code>1</code> to the variable <code>a</code>.  </p>"},{"location":"matlabBasics/matlabInterface/#workspace","title":"Workspace","text":"<p>The workspace helps you keep track of the variables you have assigned, in a table format. In the previous example, we created the variable <code>a</code>. This variable is now listed in the workspace.</p> <p></p> <p>Notice:</p> <ul> <li>There is one row in the Workspace</li> <li>There is information like the name of the variable (a), its value, the size, number of bytes, and class</li> </ul> <p>To modify what is shown in the workspace, you can add or remove columns in the table by clicking on the upside triangle in the Workspace header to bring up the  contextual menu. Under the \"Choose Columns\" submenu, select the following:</p> <p></p>"},{"location":"matlabBasics/matlabInterface/#variable-editor","title":"Variable Editor","text":"<p>Double-clicking on a variable in the workspace brings up the Variable Editor. Here, you can edit or copy variable content as if you were using a spreadsheet editor</p> <p></p>"},{"location":"matlabBasics/matlabInterface/#ribbon-interface","title":"Ribbon Interface","text":"<p>MATLAB has a context-sensitive toolbar called the ribbon interface</p> <p></p> <ul> <li>We will often refer to this interface.</li> <li>Notice in the image above that we have the Home tab selected</li> </ul>"},{"location":"matlabBasics/matlabInterface/#current-folder","title":"Current Folder","text":"<p>At launch, MATLAB opens a folder on your hard drive. You can see a reference to this folder just below the ribbon strip, in the address bar:</p> <p></p> <ul> <li>Here, this  indicates the MATLAB drive.</li> <li>You may see something along the lines of ~/Documents/Folder which points to a location on your hard drive</li> </ul>"},{"location":"matlabBasics/matlabInterface/#matlab-drive","title":"MATLAB Drive","text":"<p>We will use the MATLAB Drive to store course files.</p> <p>The Current Folder Window displays the contents of the current folder</p> <p></p> <ul> <li>You can change which columns are shown in this window by clicking on the upside down triangle to bring up the contextual menu</li> <li>Notice as you navigate to other folders, the contents displayed changes</li> </ul>"},{"location":"matlabBasics/matlabInterface/#documentation","title":"Documentation","text":"<p>You can bring up the MATLAB documentation in several ways.</p> <ol> <li> <p>You can enter a search term in the search bar (top right corner) </p> </li> <li> <p>Or You can click on the ? icon (which you can find next to the search bar or in the Home tab in the ribbon strip)</p> </li> <li> <p>Or, you can type doc in the command window</p> </li> </ol> Get Help<pre><code>doc\n</code></pre>"},{"location":"matlabBasics/matlabInterface/#important-preferences","title":"Important Preferences","text":"<p>The following settings that can improve the performance of MATLAB for certain tasks, especially later in the semester. Let's set them now, before we forget.</p>"},{"location":"matlabBasics/matlabInterface/#java-heap-memory","title":"Java Heap Memory","text":"<ol> <li>Click on the Home Tab </li> <li>Select the preferences icon: </li> <li>Under General: Java Heap memory, drag the slider all the way to the right</li> </ol>"},{"location":"matlabBasics/matlabInterface/#image-processing-toolbox-settings","title":"Image Processing Toolbox settings","text":"<p>Use these settings</p> <p></p>"},{"location":"matlabBasics/matlabInterface/#live-scripts","title":"Live Scripts","text":"<p>MATLAB live scripts are interactive documents that combine MATLAB code with formatted text. These scripts are organized into sections called Code Sections. Each Section runs independently from the other Sections. You select a section by simply clicking inside that block. Once selected, the section is outlined by blue (as opposed to light gray).</p>"},{"location":"matlabBasics/matlabInterface/#code-blocks","title":"Code blocks","text":"<p>Code blocks contain lines of MATLAB code, such as the following.</p> <pre><code>clearvars\nclc\ndisp('cleared')\n</code></pre>"},{"location":"matlabBasics/matlabInterface/#output-location","title":"Output location","text":"<p>After you execute the code in a section, you should see some output as you would in the command window. The location of this output can either be below the code block or to the right of the code block. This position is controlled by the pair of buttons on the top right side of the live script that looks like this:</p> <p></p> <p>If you hover over these buttons, you will see a tooltip string that states its function: \"Show outputs on right\" or \"Show outputs inline\".</p>"},{"location":"matlabBasics/matlabInterface/#display-line-numbers","title":"Display Line Numbers","text":"<p>Under the View tab, you can select to display Line Numbers and Datatips. Do so now.</p> <p></p>"},{"location":"matlabBasics/matlabInterface/#code-pause","title":"Code Pause","text":"<p>In your script,  each line of code in the code block will have a line number. If you click on the number, it will become highlighted in blue as shown here:</p> <p></p> <p>This will freeze code execution at that location and interfere with your coding.   If you have accidentally highlighted a number blue, simply click on the number again and the blue highlight will disappear, unfreezing execution of the code.</p>"},{"location":"matlabBasics/matlabInterface/#debugging-controls","title":"Debugging controls","text":"<p>If you have a line number highlighted and execute the code block, you will enter debugging mode, which means that you manually have to advance the execution yourself.</p> <p>In the Live Editor tool strip, there are three buttons you can press: Continue, Step, Stop</p> <p></p> <ul> <li>Continue or Step will execute the paused  line of code </li> <li>Clicking on the Stop Icon will stop the code without executing the paused line.  </li> </ul>"},{"location":"matlabBasics/matlabInterface/#comments","title":"Comments","text":"<p>Sometimes you want to add a comment along with your code. The special character % indicates the start of a comment. Comments appear as green text</p> <pre><code>a = 1 % This is a comment\n</code></pre> <p>\u2026notice that the comment is not executed.</p>"},{"location":"matlabBasics/matlabInterface/#clear-all","title":"Clear all","text":"<p>Clear your workspace and the command window by executing following commands:</p> <pre><code>clearvars\nclc \n</code></pre> <p>Your variables are now gone! Don't worry, we'll make more.</p>"},{"location":"matlabBasics/matlabInterface/#games-and-stuff","title":"Games and Stuff","text":"<p>Ok, break time. The following commands bring up hidden easter eggs in MATLAB. Try them all by copying and pasting the following commands in the command line.</p> Play Sliding Puzzle<pre><code>fifteen\n</code></pre> Play Mine Sweeper<pre><code>xpbombs\n</code></pre> Plot a 3D Knot<pre><code>knot\n</code></pre> <p>Plot a Heart</p> <p>Copy and paste all three lines into the command line:</p> <pre><code>x=[-2:.001:2],y=(sqrt(cos(x)).*cos(200*x)+sqrt(abs(x))-0.7).*(4-x.*x).^0.01\nfigure;\nplot(x,y);\n</code></pre> <p>Answers to Life's most pressing question</p> <p><pre><code>why\n</code></pre> Be sure to run this command multiple times.</p>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/","title":"Control Flow and Functions in Scripts","text":""},{"location":"matlabBasics/scripts/Control_Flow_Functions/#control-flow-and-functions","title":"Control Flow and Functions","text":"<p>The building blocks of programming</p>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#table-of-contents","title":"Table of Contents","text":"<p>Control Flow and Functions</p> <p>Script Editor</p> <p> reset MATLAB</p> <p>Control Flow</p> <p> If, Else Statement</p> <p> Example - IF ELSE</p> <p> IF, ELSEIF Statement</p> <p> Example - ELSEIF</p> <p> Switch Case</p> <p> Example - SWITCH CASE</p> <p> And now, this...</p> <p>LOOPS</p> <p> For Loops</p> <p> Example 1 - For Loops</p> <p> Example 2 - For loops</p> <p> Example 3 - For Loop with any vector</p> <p> Example 4 - FOR LOOP and Matrices</p> <p> Example - Fibonacci sequence</p> <p> So, how do we build the fibonacci sequence ?</p> <p> Using a FOR LOP</p> <p> Preallocation</p> <p> Preallocated</p> <p>While Loops</p> <p> Example: Craps</p> <p> Roll your own Black Jack Game</p> <p> Ask if the user wants to Hit</p> <p>Functions</p> <p> Role your own functions</p> <p> Creating a Function for the Fibonacci Sequence</p> <p></p>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#script-editor","title":"Script Editor","text":"<p>Color provides information</p> <ul> <li>orange: warning - it works, but it could work better (often you can ignore orange, at least at this stage) </li> <li>red: error - something is wrong - fix it </li> <li>pink: strings </li> <li>blue: key words </li> <li>green: comments </li> </ul> <p>You can see where these colors are set in the preferences: </p> <ul> <li>Home: Preferences : Color  </li> </ul>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#reset-matlab","title":"reset MATLAB","text":"<pre><code>clc % this clears the command window\nclearvars % this clears the workspace\n</code></pre>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#control-flow","title":"Control Flow","text":""},{"location":"matlabBasics/scripts/Control_Flow_Functions/#if-else-statement","title":"If, Else Statement","text":"<ul> <li>Uses logical operations to determine which statement to execute </li> <li>Any logical operation OR anything that can be resolved to TRUE or FALSE can be used as conditional statement  </li> </ul>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#example-if-else","title":"Example - IF ELSE","text":"<p>Create an IF, ELSE statement based on the following pseudocode:</p> <ol> <li>Assign an integer to the variable x</li> <li>If the x is ODD, display 'x is odd'</li> <li>Else display 'x is even'</li> </ol> <p>NOTES:</p> <ul> <li>You should use mod to see if it is divisible by 2 </li> <li>The output from mod can be typecast into a conditional statement </li> </ul> <p>ADVANCED</p> <ul> <li>Inside the IF, ELSE statement, just set a string s to 'even' or 'odd' </li> <li> <p>Use fprintf to report the final outcome (after the IF ELSE statement)  <pre><code>x = 5\nif mod(x,2)\n    s = 'odd';\nelse\n    s = 'even';\nend\nfprintf('x is %s',s)\n</code></pre></p> </li> <li> <p>notice only one of two statements is executed </p> </li> <li>What happens if you remove the relational operation? (==0)? Does it still work? Why? </li> </ul>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#if-elseif-statement","title":"IF, ELSEIF Statement","text":"<ul> <li>If you have more than one conditional statement to test, add IF ELSE statements </li> <li>Each conditional statement will be tested sequentially </li> <li>This means that if TWO conditional statements resolve to TRUE, only the first conditional statement will be executed  </li> </ul>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#example-elseif","title":"Example - ELSEIF","text":"<p>Blackjack, a popular casino game is deceptively simple. Just get a higher score than the dealer, but don't go over 21. </p> <p>When playing Black Jack, you are dealt two cards and then asked whether you want any more cards. Its your job to decide whether you want another card (Hit me!) or you just want to stick with what you have ('Hold.')</p> <p>Here we will use the function randi to simulate a black jack hand, with a range of values from 2 (the minimal value you can get with 2 cards) to 30 (if you're foolish enough to hit on a 20).</p> <pre><code>hand = randi([2 30],1,1) % simulate a hand ranging from 2 to 30\n</code></pre> <pre><code>if hand &gt; 21 % if greater than 21\n    s =  'Ooh, bust. Pay up.';\nelseif hand==21 % if equal to 21\n    s = 'Black Jack!!!';\n    beep\nelseif hand &gt;= 16 % Hold at 16 or higher\n    s = 'Would you like to hold?';\nelse\n    s = 'Hit?';\nend\nfprintf('%d. %s', hand,s)\n</code></pre> <ul> <li>How would you add a statement asking 'Would you like to double down?' if you get a 10 OR an 11? </li> <li>Does the order of the statements matter? </li> <li>How would you add the total of the hand to the reported statement? </li> </ul> <p></p>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#switch-case","title":"Switch Case","text":"<ul> <li>ONLY tests for equality, not other operations </li> <li>You don\u2019t explicit set up a conditional statement - the conditional statement is implied (IS EQUAL TO) </li> <li>You can have as many case statements as you want </li> <li>The comparison doesn\u2019t have to be a character array </li> <li>You can even mix and match character arrays and numbers  </li> </ul>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#example-switch-case","title":"Example - SWITCH CASE","text":"<ul> <li>match a color  <pre><code>%answer = inputdlg('Enter a color:'); % dialog box to request data\nanswer = \"yellow\"\n\nswitch answer{:} % answer =  cell array - {} opens element to access content\n    case 'red'\n        str = 'Roses are red';\n    case 'green'\n        str = 'Stems are green';\n    case 'blue' \n        str = 'Violets are blue';\n    case 'magenta'\n        str = 'Magenta is Magnificent!'\n    case {'orange', 'yellow'}\n        str = 'Orange you glad you chose yellow (or orange)'\n    otherwise\n        str = 'try again';\nend\nfprintf('%s', str)\n</code></pre></li> </ul> <p>Try it now: </p> <ul> <li>Run the code section </li> <li>Explore the workspace: examine answer and str </li> </ul> <p>Next:</p> <ul> <li>add a new case for magenta. set  str  be 'Magenta is Magnificent' </li> <li>add a new case for cyan: set str to 'Cyan is cool!' </li> <li>add a new case for either 'orange' or 'yellow'. Note, case statements can be cell arrays: set str to 'Orange you glad you chose yellow (or orange)' </li> <li>Test your code. Did it work? </li> </ul> <p>Finally: </p> <ul> <li>Comment out the first line of code </li> <li>Add a new line of code that contains drop down menu (Under the insert field) and add all of the potential colors there. That way you don't have to worry about proper capitalization or misspellings. Make sure the drop down menu assigns the variable answer </li> </ul>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#and-now-this","title":"And now, this...","text":"<p><pre><code>web(\"https://www.youtube.com/watch?v=nrhD8JPn7Vo\")\n</code></pre> </p>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#loops","title":"LOOPS","text":"<p><pre><code>clc\nclearvars\n</code></pre> </p>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#for-loops","title":"For Loops","text":"<ul> <li>For loops repeated execute the code block inside the loop </li> <li>The number of times this block runs is dependent on the size of the array in the array assignment </li> <li>- specifically, the number of COLUMNS in the array  </li> </ul>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#example-1-for-loops","title":"Example 1 - For Loops","text":"<p>The only thing that changes in this loop is the value of n.</p> <p><pre><code>for n = 1:10\n    fprintf('This is loop run #%d\\n',n); % runs 10 times\nend\nfprintf('fin.');\n</code></pre> </p>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#example-2-for-loops","title":"Example 2 - For loops","text":"<ul> <li>Note: The array doesn't have to be called n. Let's call it m this time </li> </ul> <p>How many times will this run?</p> <pre><code>i = 1;\nfor m = 2:2:10\n    fprintf('On loop run #%d, m = %d\\n',i, m)\n    i = i+1;\nend\n</code></pre> <ul> <li>i is created before the loop starts </li> <li>i increase by 1 on each iteration of the loop because of the mathematical operation inside the loop </li> <li>Notice that inside the loop, m is a scalar. </li> <li>On each iteration of the loop, the value of m changes  </li> </ul>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#example-3-for-loop-with-any-vector","title":"Example 3 - For Loop with any vector","text":"<p>For Loops can be initialize with any type of vector, including a character array. </p> <ul> <li> <p>In this example, we run the FOR LOOP with a character array  <pre><code>for n='a':'f'\n    fprintf('The current iterated letter is %s\\n',n)\nend\n</code></pre></p> </li> <li> <p>You Try: Increase the number of times this loop loops by increasing the number of letters in the vector  </p> </li> </ul>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#example-4-for-loop-and-matrices","title":"Example 4 - FOR LOOP and Matrices","text":"<pre><code>mat = reshape(1:9,3,3)\n\nfor o = mat\n    display(o)\nend\n</code></pre> <ul> <li>The array runs 3 times (only 3 columns) </li> <li>The variable o  changes to a vector on each iteration </li> <li>Very rare that you would ever need to do this, but there it is  </li> </ul>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#example-fibonacci-sequence","title":"Example - Fibonacci sequence","text":"<p>The fibonacci sequence is a very famous sequence that forms the basis for the golden rectangle and commonly occurs in nature, seen in such things as the spirals in seashells and galaxies. Even the Human hand comes very close to creating a Fibonacci Sequence.</p> <p> </p> <p>The fibonacci sequence in our hand allows for a perfect curl when we clench our fist.</p> <p>The sequence itself is simple.  Every term in the sequence is the sum of the two preceding terms</p> <pre>\n1 1 2 3 5 8 13 21...\n</pre> <p>This sequence is the foundation for the Golden ratio ( \\(\\phi\\), Phi, 1.6), which when used in a design, it fosters organic and natural-looking compositions that are aesthetically pleasing to the eye. The Golden Ratio is calculated by dividing the sequential terms in the fibonacci sequence, as follows</p> <p>$$ \\frac{\\left(2+3\\right)}{3}=1\\ldotp 667 $$ </p> <p>$$ \\frac{\\left(3+5\\right)}{5}=1\\ldotp 6 $$ </p> <p>$$ \\frac{\\left(5+8\\right)}{8}=1\\ldotp 625 $$ </p> <p>and so on</p> <p>SciFri - Fibonacci sequence</p> <p></p>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#so-how-do-we-build-the-fibonacci-sequence","title":"So, how do we build the fibonacci sequence ?","text":"<p>Without a FOR LOOP, it would look something like this:</p> <pre><code>fib = [1 1] % start with two terms\nfib(3) = fib(1) + fib(2) % the third term is the sum of the first two terms\n</code></pre> <pre><code>fib(4) = fib(2) + fib(3) % the fourth term is the sum of elements 2 and 3 in the array\n</code></pre> <p>Now you try: Term 5</p> <p>How would you calculate the fifth term of the fibonacci sequence?</p> <p>Notice for each term, you sum  the previous two elements.</p> <p></p>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#using-a-for-lop","title":"Using a FOR LOP","text":"<p>A FOR LOOP simplifies the process of creating this sequence. Notice that once we get started, the only thing that changes in the code are the two indices that we use to find the last two elements in the array.</p> <p>If the index is <code>n</code>, you need the following syntax</p> <pre><code>n=6 % current term\nfib(n) = fib(n-2) + fib(n-1)\n</code></pre> <p>For Loops are perfect for automating these simple changes. </p> <pre><code>fib = [1 1]; % Preallocate terms 1 and 2 with 1 1\nfor n=3:10 % start with the 3rd term\n    fib(n) = fib(n-2) + fib(n-1);\n    disp(fib)\nend\n</code></pre> <ul> <li>Perfect! It does the exact same thing but all the way up to term 10 </li> <li>Notice that we had to start by adding 1 and 1 to fs, before the FOR LOOP </li> <li>Also notice that the number of terms we end up with is 2 plus the number of loop iterations </li> </ul> <p>We can also use a FOR LOOP to find the golden ratio, which is the Next Term + Current Term divided by the Next Term. In this example, the Current Term is indexed by <code>n</code>, while the Next Term is indexed by <code>n+1. We stop the loop early (-1), because there is no Next term after the final term.</code></p> <p><pre><code>for n=1:numel(fib)-1\n    (fib(n+1)+fib(n))/fib(n+1)\nend\n</code></pre> </p>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#preallocation","title":"Preallocation","text":"<p>Great, so we can scale this up and get lots of terms, like the first 102 terms. However, notice the little orange squiggly line under <code>fib</code> in the previous loop. This is a warning that we should to preallocate (even if we don't want to). Hover over the squiggly line and you will see the warning that I'm talking about</p> <p>What's the big deal? Well, let's see by timing it. The functions tic and toc start and stop a timer, and then report the time it takes to execute a certain block of code. Let's time the for loop for 100 terms (98 loops)</p> <pre><code>clearvars\nnum_terms = 100; % number of terms to generate\n\ntic % start timer (to see how fast the code runs)\nfib = [1 1]; % create the first two terms of the sequence\nfor n=3:num_terms % run the loop 10 times\n    fib(n) = fib(n-2) + fib(n-1);\nend\ntoc % end timer\ndisp(fib)\n</code></pre> <ul> <li>The problem with this approach to be building the sequence that MATLAB has to create a copy of the array (somewhere in memory) on every iteration of the loop </li> <li>the bigger and bigger this array gets, the more and more memory you are going to need to use and the slower the code will run </li> <li>You may even run out of memory  </li> </ul>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#preallocated","title":"Preallocated","text":"<p>Fine, so what do we do? And what does it mean to preallocate anyways?</p> <p>Preallocation takes a little work. You have to decide beforehand how big your array is going to get.</p> <p>In the previous example, the array ended up being 2 plus the number of iterations of the FOR loop. Ok, let's use that information</p> <pre><code>fib = zeros(1,num_terms); % the Preallocation step\nfib(1:2) = 1; % fill the first two terms of fs with 1s\n</code></pre> <ul> <li>Ok, so now the size of fs is predetermined to be 2 plus the number of the loops </li> <li>We used the function zero to create an \"empty\" array that we will fill on each iteration of the loop </li> </ul> <p>Now we're ready to run the for loop</p> <pre><code>tic;\nfor n=3:num_terms\n    fib(n) = fib(n-2) + fib(n-1);\nend\ntoc\ndisp(fib)\n</code></pre> <ul> <li>Notice here that instead of simply tacking on a new element to fs on each iteration of the loop,  we are  replacing the 0's in the preallocated array fs with the numbers of the sequence </li> <li>Also notice that the orange squiggle is now gone </li> <li>Lets compare speeds (change the number of terms to 100 in the non-preallocated block ) </li> </ul> <p>Thus,</p> <ul> <li>If you build matrices inside of a for-loop, it is better to preallocate that matrix with zeros before starting the loop </li> <li>This is to save memory and time </li> </ul> <p></p>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#while-loops","title":"While Loops","text":"<p>Sometimes, you don't know when the loop should end. </p> <p>WHILE Loops keep running until the conditional statement turns FALSE</p> <ul> <li>So, on every iteration of the loop, it checks the value of a variable towards a logical operation. If the </li> <li>Basically, it asks on every loop, 'Are we done yet?, Are we done yet?, ... </li> </ul> <p>This simple while loop replicates the action of a single die, using the function randi. We set the conditional statement to be: \"keep rolling until you get a 5. </p> <pre><code>die = 0;\nwhile die ~= 5\n    die = randi(6,1,1)\nend\n</code></pre> <ul> <li>notice, for this to work, you create the variable die before the start of the loop  </li> </ul>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#example-craps","title":"Example: Craps","text":"<p>In craps, you roll two dice and you want to get a <code>7</code> or <code>11</code>, I think, most of the time, or something like that. I always forget. </p> <p>So, this WHILE LOOP will continue to roll the dice until you get a <code>7</code>. The dice here being the output from the randi function, with a maximum value of 12 (since we're rolling two dice). Here, we also add a loop reporter, <code>roll</code>, which starts at 1 and increase by 1 for every roll of the dice. </p> <p>Try it now:</p> <p><pre><code>dice = 0;\nroll = 1;\nwhile dice ~= 7\n    dice = randi([2 12],1,1); % returns random number between 2 and 12\n    fprintf('Roll %d: %d\\n',roll,dice)\n    roll = roll+1; % increment the dice roll by 1 on every iteration of the while loop\nend\n</code></pre> </p>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#roll-your-own-black-jack-game","title":"Roll your own Black Jack Game","text":"<p>In Black Jack, you are first dealt 2 cards. Then you are asked if you want another card (Hit?). This continues until you don't won't want any more cards, or the sum total of your hand exceeds 21 and you bust. </p> <p>So, our game must</p> <ol> <li>Generate the sum for the 1st two cards</li> <li>If the sum of the two cards is below 21, ask the User if they want to Hit,</li> <li>If they do want to hit, add another card to the total</li> <li>If they don't want to hit, end the loop. </li> </ol>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#ask-if-the-user-wants-to-hit","title":"Ask if the user wants to Hit","text":"<p>To request input from a user, you can use the function <code>input</code>:</p> <pre><code>response = input('Hit?',\"s\") % the second input \"s\" means to request a character\n</code></pre> <ul> <li>Whatever the user inputs is stored in <code>response</code> </li> </ul> <p>Next, we need a WHILE LOOP to continue until one of the following happens:</p> <ol> <li>Hand is greater than 21. Bust</li> <li>Hand is equal to 21. Black Jack</li> <li>Hand is less than 21 and the user does not want any more cards.</li> <li>The loop should keep looping until the user stops asking for more cards, or the sum of the cards exceeds 20.</li> </ol> <p>Here we combine the IF ELSE statement with a WHILE LOOP to tackle the above.</p> <pre><code>keep_playing = true; % initially set to true\nhand = randi([2 21],1,1); % simulate a hand of two cards ranging from 2 to 21\nwhile keep_playing % keep going while variable is true\n    fprintf('Hand = %d. ', hand) % displays the current hand\n\n    if hand &gt; 21 % if greater than 21\n        disp('Ooh, bust. Pay up.');\n        break % immediately end while loop\n    elseif hand==21 % if equal to 21\n        disp('Black Jack!!!');\n        beep\n        break % immediately end while loop\n    else\n        response = input('Hit?',\"s\") ; % request Y or N answer \n\n        if contains(response,'y','IgnoreCase',true) % if Yes on Hit\n            hand = hand + randi([1 11]); % add a new card to the hand\n        else\n            keep_playing=false;\n        end\n    end\nend\n</code></pre> <pre><code>dealer = randi([17 26],1,1) % dealer must hit on 16 or lower\n</code></pre> <ul> <li>What happens When you Enter a 'y'? </li> <li>An 'n'? </li> <li>How would you add a final accounting for who wins? e.g. 'You Win!' or \"Sorry, the Dealer wins' or 'Dealer Busts! you Win!\" </li> </ul> <p>So, how do we add 11 as a possibility?</p> <p>The syntax gets a little convoluted, but basically you need a logical operation that looks for either a 7 or an 11. And then you flip that logic using LOGICAL NOT. </p> <p><pre><code>dice = 0;\nroll = 1; % keeps track of the loops\nwhile ~(dice == 7 || dice == 11) % the NOT of either 7 or 11\n    dice = randi([2 12],1,1); % returns random number between 2 and 12\n    fprintf('Roll %d: %d\\n',roll,dice) % reports the results\n    roll = roll+1; % increment the roll count\nend\n</code></pre> </p>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#functions","title":"Functions","text":"<p>Functions are Great ways to package algorithms. Functions are often stored as files. Most of the included MATLAB functions are files. </p> <p>For example, we can open the <code>mean</code> function as follows:</p> <p><pre><code>open mean.m\n</code></pre> </p>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#role-your-own-functions","title":"Role your own functions","text":"<p>With a function, you just write the code once and you can call it from anywhere in the script. This helps keep your scripts readable and not overly huge. Plus, any updates to the code (like changing the color of the histogram) can be made in the function (not in lines scattered throughout the script).</p> <p>The syntax to create a function is as follows</p> <pre><code>function out = myFirstFunction(in)\nin = in + 10;\nout = in;\nend\n</code></pre> <p>The first line contains</p> <ul> <li>the keyword function </li> <li>the output: <code>out</code> </li> <li>the name of the function: <code>myFirstFunction</code> </li> <li>the input: <code>in</code> </li> <li>The last line contains the key word end. </li> </ul> <p>And in between function and end is the code of the function. Notice that there is nothing magic about the code inside a function. It looks just like the code that we use in our scripts. .</p> <p>Now that we have added this function to this script, we can call it like any other function.</p> <pre><code>clearvars\nb = myFirstFunction(20)\n</code></pre> <ul> <li>notice that in and out are not added to the workspace - functions have their own secret workspace </li> <li>Function variables are assigned inside the function and deleted when the function is done </li> <li>Try it now: modify the function to multiply the input by 10 and re-execute this code block  </li> </ul>"},{"location":"matlabBasics/scripts/Control_Flow_Functions/#creating-a-function-for-the-fibonacci-sequence","title":"Creating a Function for the Fibonacci Sequence","text":"<p>Here is the basic code for the Fibonacci Sequence</p> <pre><code>fib = zeros(1,num_terms); % the Preallocation step\nfib(1:2) = 1; % fill the first two terms of fs with 1s\nfor n=3:num_terms\n    fib(n) = fib(n-2) + fib(n-1);\nend\n</code></pre> <p>Package this code into a function with the following properties</p> <ol> <li>Name of Function: <code>myFibonacci</code></li> <li><code>Input</code> <code>: num_terms</code> - a scalar whole number to indicated how many terms of the sequence to create</li> <li>Output: <code>fib</code> - variable containing the fibonacci sequence up to the number of terms input</li> <li>Don't forget to add an end at the end</li> </ol> <p>Hot Tip: Highlight all the code in the above code block and then select \"Refactor: Convert to Local Function\" from the Live Editor tab</p> <p>Test your function using the following call</p> <pre><code>f = myFibonacci(10)\n</code></pre> <ul> <li>f should contain the first 10 terms in the sequence </li> </ul> <pre>\nf = 1\u00d710\n     1     1     2     3     5     8    13    21    34    55\n\n</pre>"},{"location":"reference/MATLABReferencePages/","title":"Useful collection of useless information","text":""},{"location":"reference/MATLABReferencePages/#sites-youll-never-visit","title":"Sites you'll never visit","text":"<p>Here are some useful links you should review before getting started.</p> <ul> <li>MATLAB desktop</li> <li>MATLAB ONRAMP course</li> </ul>"},{"location":"reference/MATLABReferencePages/#special-characters-you-should-know-already-but-have-forgotten","title":"Special Characters You Should Know Already, but Have Forgotten","text":"Character Name Function Translation <code>[ ]</code> square bracket concatenate package similar stuff together <code>{ }</code> curly brackets concatenate or index package different stuff together, get that different stuff out <code>( )</code> parentheses index, pass variables get stuff out of variables, get stuff into functions <code>;</code> semi-colon new line, end of line add rows to arrays <code>:</code> colon indicates range 1 to 10 <code>'</code> single quotations transpose change direction"},{"location":"reference/MATLABReferencePages/#cheat-sheets-now-were-getting-somewhere","title":"Cheat sheets (now we're getting somewhere)","text":"<p>Highly compact, somewhat confusing, PDF references for:</p> <ul> <li>MATLAB Syntax</li> <li>Organizing Data in MATLAB</li> </ul>"},{"location":"reference/courseFunctions/","title":"Course Functions","text":"<p>all course functions are prefaced with <code>mm</code>.</p>"},{"location":"reference/courseFunctions/#mmsliceview","title":"mmSliceView","text":"<p>An custom image stack viewer app. Can handle 3D and 4D image stacks. Can load Image Stacks and accompanying binary Masks</p>"},{"location":"reference/courseFunctions/#benefits","title":"Benefits","text":"<ul> <li>Relatively Responsive</li> <li>Quickly scrub through image using the mouse scroll wheel</li> <li>Turn on image contrast for each slice</li> <li>Simultaneously load an image stack and a mask \u2014 overlay the mask on each slice view</li> </ul> <pre><code>mmSliceView(STACK)\n</code></pre>"},{"location":"setup/computerSetup/","title":"Settings for your Computer","text":"<p>There are some settings you can set on your computer that will make muddling through  MATLAB a little easier.</p>"},{"location":"setup/computerSetup/#turn-on-file-extensions","title":"Turn on File Extensions","text":"<p>A file extension identifies the type of file and is typically part of a file name. The extension follows a period in the name. For example, a PDF file might be called something like</p> <p><code>CoolStuff.pdf</code></p> <p>In this file, <code>CoolStuff</code> is the file name and <code>.pdf</code> is the file extensions. Other common file extensions that you might encounter include:</p> <ul> <li>.DOCX: a Microsoft Word Document</li> <li>.CSV: a Spreadsheet file</li> <li>.PNG: an Image File</li> </ul> <p><code>CoolStuff.docx</code> is a different document than <code>CoolStuff.pdf</code> and should be opened by Microsoft Word.</p> <p>Often by default, an Operating System will hide these extensions so that  the two files <code>CoolStuff.pdf</code> and <code>CoolStuff.docx</code> would be listed in the same folder as:</p> <ul> <li><code>CoolStuff</code></li> <li><code>CoolStuff</code></li> </ul> <p>This can be confusing! Also, in programming, you need to know the file extension to properly open the file.</p> <p>So, make sure that you can can see the file extensions of your files. This will make working with files much easier and your journey into programming simpler.</p>"},{"location":"setup/computerSetup/#instructions","title":"Instructions","text":""},{"location":"setup/computerSetup/#on-a-mac","title":"On a Mac","text":"<ol> <li>In the Finder  on your Mac, choose Finder &gt; Settings, then click Advanced.</li> <li>Select \u201cShow all filename extensions.\u201d</li> </ol> <p>If you select \u201cShow all filename extensions,\u201d all extensions are shown, even for files that have \u201cHide extension\u201d selected. If you deselect \u201cShow all filename extensions,\u201d then file extensions are shown or hidden based on their individual \u201cHide extension\u201d settings.</p>"},{"location":"setup/computerSetup/#on-a-pc","title":"On a PC","text":"<ol> <li>Open File Explorer; if you do not have an icon for this in the task bar; click Start, click Windows System, and then File Explorer.</li> <li>Click the View tab in File Explorer</li> <li>Click the box next to File name extensions to see file extensions</li> </ol>"},{"location":"setup/githubRepoInstallation/","title":"Github Repositories","text":"<p>Github is an online sharing and collaboration tool for software and other files. We'll use it primarily as a site where you can download additional toolboxes for MATLAB. A GitHub repository, or repo, is an online folder, typically with many subfolders and files. Different software is stored in different repos. These repos are synced with the developers' computers, so they always contain the latest version of the software. It's not just software files; for example, the files that make up this MTM documentation site are all stored in this GitHub repository.</p> <p>For more information, consult the MATLAB GITHUB documentation and this site on \"How github works.\"</p>"},{"location":"setup/githubRepoInstallation/#github-repositories-well-be-using","title":"Github repositories we'll be using","text":"<p>The following are all add-on toolboxes for MATLAB:</p> <ul> <li>MtMtoolbox - A companion set of functions and scripts for use with the MtM documentation</li> <li>matGeom - a library for geometry processing / geometric computing with MATLAB in 2D and 3D</li> <li>bfmatlab - Bio-formats toolbox to open Proprietary Microscope Image Formats and metadata. This toolbox is included in the MtMtools repository.</li> </ul>"},{"location":"setup/githubRepoInstallation/#installation-cloning","title":"Installation (cloning)","text":"<p>We will add clones (copies) of these repositories to our MATLAB drive using the following steps.</p>"},{"location":"setup/githubRepoInstallation/#easy-clone-mtm-tools","title":"Easy Clone MTM Tools","text":"<p>The MtM Tools repository comes with an easy-install button:</p> <p></p> <ul> <li>The link will open the repository in MATLAB online</li> <li>Make sure that you are logged into your online Mathworks Account</li> <li>Clone the Repository when asked</li> <li>Notice that the MtMtools repo contains a copy of the bfmatlab  toolbox</li> </ul>"},{"location":"setup/githubRepoInstallation/#add-matgeom-using-matlab","title":"Add matGeom using MATLAB","text":"<p>Do this step for the matGeom repo.</p> <ol> <li>Fire up MATLAB  </li> <li>In the Home tab, Select \"New:Git Clone\"  </li> <li>Enter the URL of the repo in the pop-up dialog: <code>https://github.com/mattools/matGeom</code></li> <li>Make sure the Folder Location is in the MATLAB drive.</li> <li>Only clone the last <code>1</code> commit. This ensures that you download only the latest version of the toolbox, saving time and storage space. In MATLAB, you can specify this option in the \"Clone\" dialog by selecting the \"Advanced Options\" and setting the \"Depth\" to <code>1</code>.</li> <li>Click on \"Clone\"  </li> <li>The matGeom folder should appear in the MATLAB Drive  </li> </ol> <p> </p>"},{"location":"setup/githubRepoInstallation/#updating-github-repositories","title":"Updating GitHub Repositories","text":"<p>Overtime, Repositories such as the scripts folder and the course functions folder (MtMTools) will get updates (as your instructor completes the scripts or updates the functions). If you have been making changes to files on your computer (e.g. filling out the scripts in class) and you want to ensure that you still have access to changes you made, you can use git stash, as described on the MATLAB \"Review and Commit Modified Files to Git\" page</p> <p>Basically, to stash all local changes, in the Source Control panel:</p> <ol> <li>Click the More source control options button</li> <li>Select \"Stash Changes\".</li> <li>In the Stash Files dialog box, provide the stash name and click Stash.</li> </ol> <p>Once you have stashed your changes, you can downloaded the updates from the git repositories by performing a git pull:</p> <ol> <li>Click on the More source control options button</li> <li>Select \"Pull\"</li> </ol>"},{"location":"setup/githubRepoInstallation/#add-toolboxes-to-matlab-search-path","title":"Add Toolboxes to MATLAB Search Path","text":"<p>For MATLAB to actually use these toolboxes, we need to tell MATLAB about them, which means add the folder paths to the MATLAB search path.</p> <ol> <li>In the MATLAB Home tab, click on the 'Set Path' icon in the Home tab  </li> <li>In the \"Set Path\" Dialog, select the \"Add Folder to Path\" from the \"Add Folder\" menu    </li> <li>Select the toolbox folder</li> <li>repeat steps 2-3 for all toolboxes (folders listed below)</li> <li>At the bottom of the set path dialog, ensure the \"Save path for future sessions\" checkbox is selected    </li> <li>Click \"Ok\"</li> </ol> <p>Toolbox folders to add to the Search Path</p> <ul> <li>MtM tools: <code>MtMtools/MtMtoolbox</code></li> <li>bfmatlab <code>MtMtools/bfmatlab</code></li> <li>matGeom: <code>matGeom/matGeom</code></li> </ul>"},{"location":"setup/matlabInstallation/","title":"Installing MATLAB","text":"<p>The University of Colorado has a site license for MATLAB. Follow the instructions for installing MATLAB using the CU Anschutz site license here. Be sure to use the instructions specific to students and be sure to use your CU Anschutz email.</p> <p>If you're not at CU Anschutz</p> <p>If you are not a student at CU Anschutz, check if your university offers a site license for MATLAB. Alternatively, Mathworks offers a free online version of MATLAB. This free version should work for most of the example code documented on this site.  MATLAB also offers reasonably priced licenses for students or for home use. </p>"},{"location":"setup/matlabInstallation/#important-caveats-before-installing","title":"Important Caveats before installing","text":"<p>You do not need to install all of the MATLAB toolboxes included with the site license. Installing them all will gobble up a lot of storage on your computer. If you are interested in saving space on your computer, only install the following:</p> <ul> <li>MATLAB (LATEST VERSION - should have the current year's date in the name)</li> <li>Computer Vision System Toolbox</li> <li>Image Processing Toolbox</li> <li>Medical Imaging Toolbox</li> <li>Parallel Computing Toolbox</li> <li>Statistics and Machine Learning Toolbox</li> </ul> <p>If you don't care about space on your computer, then feel free to install everything.</p> <p>If you have previously installed MATLAB on your computer, upgrade it to the latest version. Each iteration improves upon the previous version and this course is continually updated to take advantage of the latest improvements. Upgrading typically means installing a whole new version on your computer (and leaving the old version intact). Feel free to trash the old version once the new version is installed and is working.</p> <p>If you have already run the installer and did not install one of these toolboxes or if you installed too many toolboxes, you can add (or remove) toolboxes using the Add-on Manager from within MATLAB. To launch the Add-on manager, simply navigate to the MATLAB home tab and click on the Add-Ons icon (3 colored stacked cubes).</p>"},{"location":"setup/matlabInstallation/#installing-the-matlab-drive-connector","title":"Installing the MATLAB Drive Connector","text":"<p>MATLAB Drive is a free cloud drive similar to Dropbox or Google Drive, but optimized to share MATLAB scripts and functions. Follow the instructions here to install MATLAB Connector app on your computer. Once installed, there will be a local folder on your computer called MATLAB Drive, which will sync with the Mathworks Cloud servers.</p> <p>The MATLAB Connector is an additional application that you install on your computer. The main job of this application is to sync an online folder to a folder on your computer. Syncing can sometimes take time, especially if there are a lot of files that need to be copied. You can keep track of the sync status by bringing up the MATLAB Connector window. Depending on whether you have a Mac or a PC, there should be a little icon (with the MATLAB logo on it) that you can click on in the menubar (or Windows task bar) that shows you the current sync status. </p> <p>If you encounter issues with syncing, ensure that your internet connection is stable, and try restarting the MATLAB Connector application. If the problem persists, consult the MATLAB Drive troubleshooting guide.</p> <p></p> <p></p> <ul> <li>The Globe icon will open your web browser and take you to the online site</li> <li>The Folder icon will take you to the local location on your computer where the files are synced</li> <li>The gear icon brings up some preferences</li> </ul>"},{"location":"setup/matlabInstallation/#add-shared-matlab-folders","title":"Add Shared MATLAB Folders","text":"<p>Now that you have installed MATLAB drive, you will want to add the shared course folder to your drive. This folder, called the MTMdata folder, contains example data files and images. Click on this shared folder link to add the MTMdata folder to your MATLAB drive.</p> <p>You can find the shared  MATLAB folders in the online version of MATLAB Drive, provided that you have logged in with your university account. To view pending invitations in MATLAB Drive online, click Shared Content on the left side of the page.</p> <p></p> <p>Click on \"Add Shortcut\". This will create a shortcut to the shared folder, and the contents will stay in sync with the contents in the original folder. The files found in these folders are read-only. If you would like to modify the files, you will have to make a copy of the files and store them somewhere else on your computer or in another folder on the MATLAB drive.</p>"},{"location":"setup/matlabInstallation/#additional-toolboxes-from-github","title":"Additional Toolboxes from github","text":"<p>We will also be using additional MATLAB toolboxes that you can download from github. You can find detailed Instructions for adding these toolboxes to your MATLAB drive here.</p>"},{"location":"setup/softwareOverview/","title":"Software and Sites","text":"<p>As we muddle through Medical Imaging, we will be using the following software:</p> <ul> <li> <p> MATLAB</p> <p>A programming and numeric computing platform.</p> <p> Instructions for installing MATLAB and the MATLAB Drive connector using your CU Anschutz credentials.</p> </li> <li> <p> Github</p> <p>An online tool for software development, code sharing, and open-source development.</p> <p> Instructions for adding useful MATLAB toolboxes from Github Repositories into your MATLAB Drive</p> </li> <li> <p> Fiji</p> <p>An open-source image processing package.</p> <p> Download Page</p> </li> <li> <p> 3D Slicer</p> <p>A 3D medical imaging and computing platform.</p> <p> Download Page</p> </li> </ul>"},{"location":"setup/softwareOverview/#artificial-intelligence","title":"Artificial Intelligence","text":"<p>We'll also play around with that new, fandangled AI everyone's been talking about.</p> <ul> <li>Microsoft Copilot Chat: Students at CU Anschutz can use the Microsoft Copilot version for maximum free usage (included with CU Anschutz credentials). The easiest way to use this AI is to open the Microsoft Teams desktop app and click on the Copilot Icon (More info on OIT)</li> <li>Perplexity AI</li> <li>Claude AI</li> </ul>"},{"location":"slicer/CTACardioSegment/","title":"Segmenting a Contrast-Enhanced CT Volume","text":"<p>Medical image segmentation is the process of dividing a medical image into regions or segments that represent different tissue types or categories. The goal is to identify areas of interest, such as tumors, lesions, or other abnormalities. In this module, will we use 3D Slicer to segment the Kidneys,  Aorta, and Lungs in the CTACardio Sample dataset.</p>"},{"location":"slicer/CTACardioSegment/#extensions-required","title":"Extensions Required","text":"<ol> <li>Lung CT Analyzer &amp; Segmenter</li> <li>SegmentEditorExtraEffects</li> </ol>"},{"location":"slicer/CTACardioSegment/#background-information","title":"Background information","text":"<p>Before we segment, we should have a reasonable understanding of the methodology used to acquire the volume:</p> What is a CT Angiogram? <p>Computed tomography angiography (also called CT angiography or CTA) is a CT technique used for angiography (blood vessel imaging). For CTA, you inject a contrast agent (e.g. iodine) into the patient's bloodstream to better visualize the arteries and veins throughout the human body.</p> <p>CT angiogram</p> <p>For this segmentation project, we will take advantage of the added contrast to segment the kidneys and aorta.</p>"},{"location":"slicer/CTACardioSegment/#load-volume-and-review","title":"Load Volume and Review","text":"<ol> <li> <p>Click on \"Download Sample Data\"  button:</p> <p></p> </li> <li> <p>Select \"Download CTACardio\"</p> </li> <li> <p>Switch to the <code>Volumes</code> module</p> <p></p> </li> <li> <p>Set the Active Volume to \"CTACardio\"</p> </li> </ol> <p>Volume Information for CTACardio</p> <p></p> Volume and Voxel sizes: How many voxels in the volume and how large is each voxel? <ul> <li>Volume Size: \\(512 * 512 * 321 = 84,148,224\\) voxels (~84 million)</li> <li>Voxel Size: \\(0.93 * 0.93 * 1.25 = 1.08 mm^3\\) </li> </ul> Are the voxels isotropic or anisotropic? <p>anisotropic</p> What is the dynamic range of the volume? <p>-1024 to 3532</p>"},{"location":"slicer/CTACardioSegment/#adjust-volume-display","title":"Adjust Volume Display","text":"<p>In the Volumes module, under the Display Tab, select the CT-Abdomen preset:</p> <p></p>"},{"location":"slicer/CTACardioSegment/#volume-rendering","title":"Volume rendering","text":"<p>Volume rendering is a great way to determine which parts of the volume have high contrast</p> <ol> <li>Bring up the <code>Volume Rendering</code> module.</li> <li>Select \"CTACardio\" volume in the Volume menu</li> <li>Click open the <code>eye</code> icon to render the volume</li> </ol> <p>Volume Rendering Controls for CTACardio</p> <p></p>"},{"location":"slicer/CTACardioSegment/#adjust-rendering","title":"Adjust Rendering","text":"<ol> <li>Slide the Shift slider back and forth to reveal different aspects of the volume</li> <li>Notice how bright the veins are in the patients arm</li> <li>Slide the Shift slider to the left to reveal the oxygen tank sitting atop the patient's chest</li> <li>Select the \"CT-Chest Contrast Enhanced\" Preset</li> <li>Slide the Shift slider to the right to reveal the kidneys</li> </ol> <p>Notice that the kidneys, heart, vasculature, bones all segment out at the similar intensity mappings. This means that it will not be possible to use a simple threshold to segment these organs individually</p> Optional: Crop volume down to the Right Kidney <p>Adjust the ROI to capture just the right kidney:</p> <pre><code>1. In the `Volume Rendering` module, Check \"Enable\" crop and click on \"Display ROI\"\n2. Adjust the ROI to encompass just the right kidney\n3. Under the Advanced Tab, click on the \"Scalar Opacity Mapping\" function to adjust the transparency of the volume\n4. Hide the Crop ROI\n</code></pre> <p>You should see something that looks like this:</p> <p></p> <pre><code>The kidney is surrounded by ribs and the spinal column which imaged with similar levels of intensity. So, if we use basic thresholding, we will need to clean up a lot of the segmentation surrounding the kidney\n</code></pre> <p>Before continuing, turn off the 3D render by clicking the eye icon closed</p>"},{"location":"slicer/CTACardioSegment/#inspect-voxel-intensities","title":"Inspect Voxel Intensities","text":"<p>The most basic segmentation techniques involve thresholding, in which an intensity cut-off value is used to create a mask. For this exercise, we want to first segment the cortex of the kidneys, so let's inspect the intensity inside the kidney and in the tissue surrounding the kidneys.</p> <p>Let's start with Right kidney. Remember, we should look at the right kidney in all three views. To help align the views, we will turn on the <code>Crosshair</code> tool (  ), which adds crosshairs to each view to show the center of the alignment.</p> <ol> <li> <p>In the top toolbar, hold down the Crosshair tool menu and make sure the following menu items are selected:</p> <p></p> </li> <li> <p>Click on the Crosshair tool to activate</p> </li> <li>In the 2D viewers, scrub to the slices that show the right kidney. </li> <li> <p>Hold shift while you hover the mouse pointer over one kidney view to align all three views. The slice iteration lines will jump to the mouse when you hold shift. There should be yellow crosshairs in all three views to indicate the center of the alignments</p> <p></p> </li> <li> <p>Release shift and move the mouse pointer over the kidney and surrounding tissue inspect the intensity values of the voxels</p> </li> <li>Compare the intensity value of the kidney to the tissue surrounding the kidney and to the spinal column. Make note of these intensity values:<ul> <li>Kidney: <code>~245</code></li> <li>Surrounding Tissue, <code>~80</code></li> <li>Vertebrae: <code>~300-1000</code>.</li> </ul> </li> </ol>"},{"location":"slicer/CTACardioSegment/#preprocess-volume","title":"Preprocess Volume","text":""},{"location":"slicer/CTACardioSegment/#crop-volume","title":"Crop Volume","text":"<p>Segmentation projects are often memory intensive. So, is often useful to crop the volume down to the bare minimum needed for the segmentation project. For analysis of the segmentations, it is also useful to resample the voxels so that they are isotropic.</p>"},{"location":"slicer/CTACardioSegment/#create-roi","title":"Create ROI","text":"<ol> <li>Switch to the <code>Volume Rendering</code> module</li> <li>Enable and display the crop ROI</li> <li>If the crop is still specific to the right kidney, click on the \"Fit to Volume\" icon so the ROI covers the entire volume</li> <li>Crop out the table and as much of the wires as you can manage</li> </ol>"},{"location":"slicer/CTACardioSegment/#crop-module","title":"Crop Module","text":"<p>Switch to the <code>Crop</code> module by searching for the module using the magnifying glass</p> <p></p> <p>In the crop module, use the following settings:</p> <p></p> <ul> <li>Input volume: \"CTACardio\"</li> <li>Input ROI: \"Volume rendering ROI\" - this is the ROI that we created in the <code>Volume Rendering</code> module</li> <li>Output Volume: Create a new volume as \"CTACardioCrop\" <p></p> </li> <li>Check on \"Interpolated cropping\"</li> <li>Reveal the Volume Information tab</li> </ul> <p>Notice that the new, cropped volume will have isotropic voxels.</p> <p>Click Apply to crop (scroll down from Volume Information if you don't see the Apply button). The new cropped volume (CTACardioCrop) should appear in the viewers.</p> <p>If the Cropped volume is not displayed, select it in all the slice viewers:</p> <p></p> <p>Steps before continuing</p> <p>Return to the <code>Volume Rendering</code> module</p> <ol> <li>Turn off Volume Rendering (click eye icon closed)</li> <li>Hide the ROI (click Display ROI off)</li> </ol> <p>Return to the <code>Volume</code> module</p> <ol> <li>Set the <code>Volume</code> to 'CTACardio Crop`</li> <li>Select the 'CT-Abdomen' preset under the <code>Display</code> tab</li> </ol> <p>You should now see the following in the Slice Viewers:</p> <p></p> <p>4UP View of CTACardio Crop. No 3D Render, no Crop ROI.</p>"},{"location":"slicer/CTACardioSegment/#filter-volume","title":"Filter Volume","text":"<p>Optional.</p> <p>You can also filter a volume before you segment.</p> <p>Median Filter Settings</p> <ol> <li>Open the <code>Median Image Filter</code> module</li> <li>Use the default settings (Neighborhood Size <code>1,1,1</code>)</li> <li>Input Volume: CTACardioCrop</li> <li>Output Volume: CTACardioCrop</li> <li>Click <code>APPLY</code></li> </ol> <p></p> <p>These settings will overwrite the cropped volume with a filtered version of the volume.</p>"},{"location":"slicer/CTACardioSegment/#segment-editor","title":"Segment Editor","text":"<p>When you segment in Slicer, you create a new Segmentation Volume (or label map) that has the same number of voxels as the original volume. This segmentation volume contains whole numbers to indicate the segmentations. For example, after the following steps, all voxels pertaining to the right kidney will be labeled with a value, like 1. This is not an intensity value, but a label \u2014 that's why they can also be called label maps. We will also segment the left kidney \u2014 all those voxels will be labeled with a different value, like 2. Voxels not segmented will have a label of 0.</p> <p>The Segment Editor module creates and manages segmentations.</p> <p>Bring up the Segment Editor Module: </p> <p>The Editor has three main parts:</p> <ol> <li>The Segmentation Settings region at the top, where you create the Segmentation Volume and select the Source Volume</li> <li>The Segmentation Table, where you create the Segment Labels</li> <li>The Toolbar, which has the icons for all the Segment Editor Tools</li> </ol>"},{"location":"slicer/CTACardioSegment/#segmentation-settings","title":"Segmentation Settings","text":"<p>At the top of the Segment editor, create the following settings:</p> <ol> <li>Set the <code>Segmentation</code> by selecting 'Rename the Current Segmentation' and adding your last name to the segmentation, as follow: 'LastName Segmentation'</li> <li>Set the <code>Source Volume</code> to 'CTACardio Crop'</li> </ol>"},{"location":"slicer/CTACardioSegment/#add-segmentations-to-the-segmentation-table","title":"Add Segmentations to the Segmentation table","text":"<ol> <li>Click the Add button </li> <li>A Segmentation row should appear in the Segmentations table. The name should be \"Segment_1\" (or something similar)</li> </ol> <p>This table organizes the Segmentation Labels. Currently, we just have one Named Label: \"Segment_1\". And its selected. So, any segmentation you add using the Segment Editor tools will have the label of \"Segment_1\". We are going to use this label as a placeholder label, so let's move onto the next step.</p>"},{"location":"slicer/CTACardioSegment/#segment-the-kidneys-using-the-threshold-tool","title":"Segment the Kidneys using the Threshold Tool","text":"<p>The threshold tool segments the volume based on a Threshold Range (or Intensity Range). You set the low and high end of the range, and the tool will segment all voxels that fall in that intensity range with the selected label (i.e. \"Segment_1\"). Here,  we take advantage of the fact that contrast has been added to the patient, which makes the Kidneys very bright in comparison to the surrounding tissue.</p> <p></p> <p>Bring up the threshold tool by clicking on its icon in the toolbar (top row of toolbar). This will bring up the Threshold Tool. There should now be a flashing green color in Slice Viewers</p> <p></p> <p>The flashing color indicates which voxels would be segmented if you applied the threshold.</p> <p>Next, adjust the <code>Threshold Range</code> to range from <code>190</code> to <code>300</code></p> <p></p> <p>Click Apply.</p> <ol> <li>The editor will jump back to the Segmentation Table View</li> <li>Click on the 'Show 3D' button: </li> </ol> <p>You should now see the following in the 3D view:</p> <p></p> <p>The initial threshold result is a bit messy, but we can easily clean it up. The important thing is that we have clearly and fully segmented both kidneys.</p>"},{"location":"slicer/CTACardioSegment/#clean-up-segmentation-using-the-islands-tool","title":"Clean up Segmentation using the Islands Tool","text":"<p>First we will remove a lot of the segmentation noise using the \"Remove Small Islands\" command, which removes any connected components smaller that the indicated value.</p> <p>Remove Small Islands</p> <p>Bring up the Island Tool by clicking on its icon: </p> <ol> <li>Select \"Remove small islands\"</li> <li>Set <code>Minimum size</code> to <code>2000 voxels</code></li> <li>Click Apply</li> </ol> <p>Now both Kidneys are clearly separate segmentations.</p>"},{"location":"slicer/CTACardioSegment/#change-the-label-values-for-both-kidneys","title":"Change the Label Values for both Kidneys","text":"<p>For this step, we add new labels to the Segmentation Labels table and then switch the labels of each kidney.</p> <p>Add Kidney Labels to table</p> <p></p> <ol> <li>Click the Add button and add a new Label for the Left Kidney</li> <li>Click the Add button and add a new Label for the Right Kidney</li> </ol> <p>The segmentation colors should be different from \"Segment_1\" \u2014\u00a0so, not green.</p> <p></p> <p>Change the Label for the Left Kidney</p> <ol> <li>Select the Left Kidney label so that it is highlighted in the Segmentation Table, as shown above</li> <li>In the Islands Tool, select \"Add selected island\"</li> <li>In one of the Slice viewers, click on the Left Kidney<ol> <li>Make sure you click on the correct one!</li> <li>Hint, review the Data Probe before you click.</li> <li>This will not work in the 3D viewer</li> </ol> </li> <li>The Label for the Left Kidney should change</li> </ol> <p>Repeat the Process for the Right Kidney.</p> <p>Verify that you have successfully changed the labels by hovering over the kidney segmentations in the viewer and review the information the Data probe.</p> <p>If everything works, select Segment_1 label in the Table and click on Remove. You should now have two segmented kidneys and nothing else.</p> <p></p>"},{"location":"slicer/CTACardioSegment/#segmentation-cleanup","title":"Segmentation Cleanup","text":"<p>We can perform morphological operations on our segmentations using the Islands and Smoothing Tools.</p> <p>Smoothing</p> <p></p> <p>You can remove extrusions or close holes using the smoothing tool</p> <ol> <li>Click on the Smoothing icon</li> <li><code>Smoothing Method</code>: \"Gaussian\"</li> <li><code>Standard Deviation</code>: \"1.00mm\"</li> <li>Apply</li> </ol>"},{"location":"slicer/CTACardioSegment/#save-data","title":"Save Data","text":"<p>Time to save your hard work!</p> <ol> <li>Click on the save icon: </li> <li>In the dialog, Click on the \"Change directory\u2026\" button</li> <li>In the file dialog that appears, create a new folder called 'CTACardio' and then click Choose <p></p> </li> <li>Back in the Save Dialog, Choose \"Save\"</li> <li>Everything in the table that is checked will be saved.</li> </ol>"},{"location":"slicer/CTACardioSegment/#segment-the-aorta","title":"Segment the Aorta","text":"<p>For the Aorta, we will use a different segmentation method. First, though, we need to create the segmentation volume.</p> <ol> <li>In the <code>Segment Editor</code> module, Click on the Add Button</li> <li>Rename the new segmentation \"Aorta\"</li> <li>Change the color of the Aorta to red by double-clicking on the color tile to bring up the color selector</li> <li>choose \"Artery\" red</li> <li>Make sure that the Aorta segmentation is selected for the following steps</li> </ol> <p></p>"},{"location":"slicer/CTACardioSegment/#local-threshold","title":"Local Threshold","text":"<p>The local threshold tool is an add-on tool included with the \"SegmentEditorExtraEffects\" extension. Make sure you have that extension installed before continuing. Local threshold works by setting an intensity range and then clicking on the image to add a starting point for the segmentation. The algorithm will segment any connected voxels with the same intensity range.</p> <p>Local Threshold tool settings</p> <ol> <li>Switch to the Local Threshold tool</li> <li>Set the threshold Range to: <code>300-600</code></li> <li>Under the Masking tab, set the Editable area to \"Outside all segments\"</li> <li>For Modifying other segments, choose \"Overwrite visible\"</li> </ol> <p>There should be a color flashing in the 2D viewers. This color indicates what will be segmented</p> <p></p> <p>Applying Local Threshhold</p> <p>Once you have these settings, Ctrl- or Command-click on the descending aorta and watch the magic happen.</p> <p>You should now have an Aorta in your 3D view:</p> <p></p> <p>We also got the ventricles of the heart, but no matter, we can clean that up</p>"},{"location":"slicer/CTACardioSegment/#clean-up-aorta-using-the-scissors-tool","title":"Clean up Aorta using the Scissors tool","text":"<p>The Scissors tool allows you to cut out segmentation you don't want. </p> <ol> <li>Maximize the 3D viewer</li> <li>Switch to the Scissors tool </li> <li>Make sure Aorta is selected in the Segmentation table</li> <li>Position the 3D view so you can see the blue background behind the aortic arch <p></p> </li> <li>Cut the arch by drawing an oval using the scissor tool <p></p> </li> <li>Use the arrow keys to rotate the segmentation and ensure that you have separated the arch from the heart</li> <li>Switch to the Islands Tool</li> <li>Select \"Remove selected island\"</li> <li>In the 2D view of the segmentation, click on a segmentation in the heart to remove that portion of the segmentation <p></p> <p>Notice that the pointer icon shows the island tool when pointing to the segmentation in the 2D view only (not the the 3D viewer)</p> </li> <li>Select \"Remove small islands\" using a minimum size of 1000 voxels</li> <li>Click apply and enjoy your segmented aorta</li> <li>Save your work!</li> </ol> <p>Final Segmented Aorta (and Right Kidney):</p> <p></p>"},{"location":"slicer/CTACardioSegment/#segment-the-lungs","title":"Segment the Lungs","text":"<p>This requires the Lung CT Analyzer &amp; Segmenter extension to be installed.</p>"},{"location":"slicer/CTACardioSegment/#change-windowlevel-of-ctacardio","title":"Change Window/Level of CTACardio","text":"<ol> <li>Switch to the <code>Volumes</code> module</li> <li>Set the Active Volume to \"CTACardioCrop\"</li> <li>Select the CTLung Preset</li> </ol>"},{"location":"slicer/CTACardioSegment/#lung-ct-segmenter","title":"Lung CT Segmenter","text":"<p>YouTube demonstration</p> <p>Open the Lung CT Segmenter:</p> <p></p> <p>This menu item is only available after you have installed the extension</p> <p>Lung CT Segmenter Module</p> <p></p> <ol> <li>Make sure that your Input volume is \"CTACardioCrop\"</li> <li>Otherwise, don't change any of the settings</li> <li>Click Start</li> <li>You will be present with an axial slice and Prompted to add three points to the right lung</li> <li>Scrub to the middle of the lungs</li> <li>Click on three points in the right lung, followed by three points in the left lung <p></p> </li> <li>Once you have added the points, you will then be presented with a coronal plane</li> <li>Again, scrub to a region near the middle of the lungs</li> <li>Click on three points in the right lung, followed by three points in the left lung <p></p> </li> <li>Once you have added the points, you be prompted to add a point to the trachea. If you don't see the trachea, scrub through the coronal planes until you do.</li> <li>Add a point to the trachea</li> <li>If everything looks good, click Apply</li> <li>Enjoy segmentations of the lung and trachea</li> </ol> <p>Final Lung Segmentations</p> <p></p>"},{"location":"slicer/CTACardioSegment/#review-data-module","title":"Review Data module","text":"<p>Notice that a new Segmentation Node has been added: \"Lung Segmentation\". There are also some segmentations in there not being displayed</p> <p></p> <p>Notes: models will be added in a future step</p> <p>Save your work!</p>"},{"location":"slicer/CTChestExplore/","title":"Exploring CT Datasets","text":"<p>In this module, we explore one of the sample CT (computed tomographic) datasets included with Slicer</p>"},{"location":"slicer/CTChestExplore/#overview","title":"Overview","text":"<p>Module Learning Objectives</p> <p>After completing this module, you should be able to</p> <ol> <li>Use Slicer</li> <li>Load sample datasets</li> <li>Scrub through image slices in a volumetric dataset</li> <li>Display orthogonal planes in the 3D Viewer</li> <li>Inspect the voxel information of the dataset and change the display properties of the volume</li> <li>Generate Volume Renders of the Dataset</li> <li>Change the Layout of the Viewers</li> <li>Take Screenshots</li> </ol>"},{"location":"slicer/CTChestExplore/#display-a-ct-dataset","title":"Display a CT dataset","text":"<p>Slicer includes many sample datasets, which you can find in the Sample Data Module:</p> <ol> <li> <p>Switch to the Welcome to Slicer Module</p> </li> <li> <p>Click on \"Download Sample Data\" (OR  go to File:Download Sample Data)</p> <p></p> </li> <li> <p>Select \"CTChest\"</p> </li> <li> <p>Wait... Slicer will download the volume to your computer.</p> </li> <li> <p>After some time, you should see CT cross-sections in the 2D Viewers.</p> </li> </ol> <p></p> Which panel shows the original data as it was capture and which panels show the Multiplanar reconstructions <p>CT data is captured along the axial plane, which is shown in the Red Viewer (Coronal Slices). You can tell because this data set is circular (actually columnar). The other two viewers display the MPRs.</p>"},{"location":"slicer/CTChestExplore/#layout-menu","title":"Layout Menu","text":"<p>The organization of the viewers can be set in the Layout menu, found in the toolbar:</p> <p></p> <p>Select the \"Four-Up\" view from the toolbar if you currently don't have that layout.</p>"},{"location":"slicer/CTChestExplore/#data-module","title":"Data Module","text":"<p>The <code>Data</code> module keeps track of the volumes that you have loaded into Slicer. To open the <code>Data</code> module, click on the data icon:</p> <p></p> <p>In the Data Module, you should now see CTChest listed in the Node Table, under the Subject hierarchy tab.</p> <p></p> <p>You can hide the volume by clicking on the little cube with the eye icon on it. Make sure to un-hide the volume before continuing.</p> <p>To remove the volume from Slicer, right-click on the \"CTChest\" and select \"Delete\". Don't do this, but if you did, simply re-download the volume.</p>"},{"location":"slicer/CTChestExplore/#navigation-and-control","title":"Navigation and Control","text":"<p>To explore the dataset, you will want to scroll through the slices, zoom in, or drag th image around.</p> <p>The following are specific to each viewer. So, move the mouse over one of the viewers before attempting.</p>"},{"location":"slicer/CTChestExplore/#scrubbing","title":"Scrubbing","text":"<p>Scrubbing means to scroll through the individual images that make up an image volume. You can scrub through all of the viewers.</p> <ul> <li>Scrubbing by Scrolling. Using your mouse or trackpad, scroll up and down over one of the 2D image views stacks to scrub through the images</li> <li>Scrubbing by Arrow Keys. The arrow keys work (useful for fine scrubbing) Click on one of the image datasets and then click on the up or down arrows.Left/Right or Up/Down?</li> </ul>"},{"location":"slicer/CTChestExplore/#pan-and-zoom","title":"Pan and Zoom","text":"<p>Panning is used to move the images around. Zooming enlarges the image</p> <ul> <li> <p>Panning. Hold down the shift button and drag. The slice moves around in the window</p> </li> <li> <p>Zooming. Hold down the command (mac) or control (windows) button and drag. The slice zooms in and out</p> </li> </ul>"},{"location":"slicer/CTChestExplore/#fit-to-window","title":"Fit to Window","text":"<p>If you mess things up, you can return the volume back to the default location by clicking on the \"Fit to Window\" icon in the Viewer's top toolbar menu.</p> <p></p> <p>\"Fit to Window\" icon for the green viewer.</p>"},{"location":"slicer/CTChestExplore/#slice-alignment","title":"Slice Alignment","text":"<p>You can align the location of all three viewers, by holding down the shift button as you move the mouse around one of the viewers. Notice how the other views become synchronized to the location to which the mouse is pointing.</p>"},{"location":"slicer/CTChestExplore/#data-probe","title":"Data Probe","text":"<p>The data probe returns information about the image under the mouse arrow head, so  move the cursor over one of the images. Here is an example of what you might see if you over the mouse arrow over the red panel:</p> <p></p> What does this information mean? <p>It is the Coordinate and Intensity Information about the voxel beneath the arrow head</p> <p>In the above example,</p> <ul> <li>\"Red\" means red panel</li> <li>(R 1.9, A 93.4, I, 35) Anatomical coordinate information in RAS space. So, in this case, Right, Anterior, and Inferior. </li> <li>B CTChest (254, 103, 125) -977 indicates the image Coordinate information with intensity data, as follows: (X,Y,Z) I</li> </ul> What intensity value is bone? Air? tissue? <p>Since this is CT data, the intensity values should be calibrated to Hounsfield Units. Air should be -1000, Bone should be greater than 500. Tissue should be somewhere between 0 and 100.  </p> What does RAS mean? <p>It's an anatomical coordinate system: RAS (Right, Anterior, Superior). Other systems use LPS (Left, Posterior, Superior)</p> What do L, F, and B stand for? <p>These are layer indicators in Slicer</p> <ul> <li>L: label (i.e. segmentations)</li> <li>F: foreground</li> <li>B: background</li> </ul> <p>Volumes by default are loaded into the background, so in this example our data is loaded into the background layer. The information shown is the image coordinate system (and intensity) of the CTChest volume.</p> <p>For more information, review the Slicer Coordinate Systems documentation.</p>"},{"location":"slicer/CTChestExplore/#volume-module","title":"Volume Module","text":"<p>The Volume module contains information about the active volume.</p> <ul> <li> <p>Select the \"Volumes\" module: </p> </li> <li> <p>Set the active volume to CTChest (if its not already that)</p> </li> </ul> <p>There should only be one volume to choose in the active volume menu. If there are more than one volume, than you have inadvertently loaded multiple volumes. Be sure to select the correct volume \"CTChest\"</p>"},{"location":"slicer/CTChestExplore/#volume-information-tab","title":"Volume Information Tab","text":"<ol> <li> <p>Open the \"Volume Information\" Tab (if it's not opened):</p> <p></p> <p></p> </li> </ol> What is the size of the image stack? <p>512 x 512 x 139 (X, Y, Z)</p> What is the dimension of a voxel in the X-Y Dimension? In the Z? <p>0.762 X 0.762 mm height and width 2.5 mm depth</p> Are the voxels isotropic or anisotropic? <p>anisotropic</p> Compare the resolution of the images in the red panel vs the Green and Yellow panels? Do you notice any difference in the resolution? If so, why do you think this is? <p>In the axial view (red viewer), we are see the XY side of the voxel. These are packed more close together, so the resolution appears higher. In the other two viewers, we are seeing multiplanar reconstrutions (MPR) of the voxels, so the XZ or YZ sides, which are spaced further apart, since the voxels are anisotropic.</p> What is the range of intensity values for this dataset? What is the likely bit depth of this stack? <p>The Scalar Range tells you the intensity range, so -3024 to 3071. This is likely a 16-bit image, since the range has more than 6000 different values.</p>"},{"location":"slicer/CTChestExplore/#display","title":"Display","text":"<p>We can adjust the contrast or change the Lookup table using the controls in the Display tab.</p> <p>Click on the triangle icon besides the Name \"Display\" to reveal the display controls</p> <p></p> <p>Window/Level is the main way that radiologists adjust the contrast in CT (and X-rays). In the display tab, you can see a series of seven icons that represent different Window/Level presets:</p> <ul> <li>Click on these presets sequentially to see how they affect the image display</li> <li>Notice how the Window/Level slider changes with each preset</li> </ul> <p>You can also adjust the Lookup table. Try different LUTs for the LULz.</p>"},{"location":"slicer/CTChestExplore/#histogram","title":"Histogram","text":"<p>To better understand the Window/Level settings, reveal the histogram display by clicking on the triangle icon next the Histogram Header:</p> <p></p> <p>Here you see the plot of the image histogram (blue line). There is also a black-white gradient overlaid on the blue. This gradient indicates the Window/Level settings.</p> <pre><code>- Change the Window/Level Presets and notice what happens to the gradient\n- Drag the Window/Level sliders back and forth and notice what happens to the gradient and the image display\n</code></pre> <p>In summary, the Window/Level doesn't change the image histogram, it changes the mapping of the lookup table (changing what is displayed as black and what is displayed as white, and what is displayed as gray in between). Level sets the black and white levels. Window determines the distance between the black and white levels (and the intensities that are shown as gray).</p>"},{"location":"slicer/CTChestExplore/#mouse-control-of-window-level","title":"Mouse Control of Window / Level","text":"<p>You can also control the Window/Level settings using the mouse and dragging on the image</p> <ol> <li> <p>First, click on the Window/Level Tool in the toolbar</p> <p></p> </li> <li> <p>The click-and-drag on the image in one of the viewers.</p> <ul> <li>Dragging up and down adjusts the levels</li> <li>Dragging left and right adjusts the window sizes</li> <li>When you are done, deselect the Window/Level tool by clicking on the White Arrow tool, so you can get back to scrubbing through the images.</li> </ul> </li> </ol>"},{"location":"slicer/CTChestExplore/#selection-mode","title":"Selection Mode","text":"<p>If instead you would like to set the window / level based on the pixel intensity of a certain region of the image, you switch to \"Select region\" or \"Select region - centered\" mode, hold down on the triangle icon next to the  Adjust Window Level icon to bring up the context menu:</p> <p></p> <p>Once the \"Select region\" menu item is selected, then you can draw a rectangular region on the volume slice and the W/L settings will automatically be adjusted.</p> <p></p> <p>To exit the Window/leveling mode, click on the white arrow button next the adjustment button in the toolbar: </p>"},{"location":"slicer/CTChestExplore/#display-slices-in-3d","title":"Display Slices in 3D","text":"<p>You can display the 2D slices in the 3D viewer as follows:</p> <ol> <li> <p>Click on the pushpin icon located on the far left of the red viewer controller to bring up the red viewer menu:</p> <p></p> </li> <li> <p>In the viewer menu, click on the eye icon (\"Toggle Slice visibility in 3D view\").</p> <p></p> <ul> <li>You should now see a slice floating in space in the 3D viewer.</li> <li>Drag around the 3D viewer to reorient the slice in space</li> <li>Scrub through the image slices in the Red Viewer. Notice that the position of the 3D slice changes in 3D space</li> </ul> </li> <li> <p>Repeat the process for all three viewer menus (click on the eye for all three viewers)</p> <p></p> <ul> <li>enjoy three orthogonal slices in 3D</li> <li>Tip: Try adjusting the Left Threshold slider in the Volumes Module. What happens?</li> </ul> </li> </ol> <p>Basic controls of 3D Viewer     - Rotate: drag on 3D view     - Pan: shift-drag on 3D view to reposition the slices     - Zoom: scroll on the 3D view or  (or click on + or -) - to zoom in and out     - Recenter: click on the \"Fit to Window\" icon</p> <p>Slices are linked between the 2D and 3D views     - Scrub around 2D slice viewers to reposition the slices in 3D space.     - Or drag the Slice Viewer sliders. That's fun too.     - Click on the \"Fit to window\" icon to reposition slice back to center</p>"},{"location":"slicer/CTChestExplore/#make-global-changes-to-the-slice-views","title":"Make Global changes to the Slice views","text":"<ol> <li>In the Red Viewer menu, click on the chain link icon to link the chain.</li> <li>Click on the Eye Icon to close the eye and hide all three slices from the 3D viewer (the chain link icon links the views across the 3 viewers)</li> </ol>"},{"location":"slicer/CTChestExplore/#add-orientation-markers","title":"Add Orientation Markers","text":"<p>To track the orientation of the volume in the viewers, you can add a little human orientation marker, like this guy:</p> <p></p> <p>To do so:</p> <ol> <li> <p>Click on the Push Pin icon to bring up the view controls </p> </li> <li> <p>Click on the <code>&gt;&gt;</code> button to show more options</p> <ul> <li> <p>Notice that CTChest is shown in the Background (B) Layer.</p> </li> <li> <p>Notice that there are no other volumes currently being shown, since we have only loaded one volume</p> </li> <li>Click on the \"Orientation Marker Options\" (axes icon)</li> <li>Select \"Small\" \"Human\"</li> <li>You should now see the following little guy in the corner of the slice viewers</li> <li>Hide the \"more controls\" by clicking on the \"&lt;&lt;\" button</li> </ul> </li> </ol> <p>Adjust Settings to add Orientation Marker and remove slice edges on Launch</p> <p>If you want these orientation markers to be added on launch of Slicer, you can set the default the Slicer Settings. You can also remove those annoying Slice Edge views</p> <p>Review the Customize Slicer Page for more detailed information on hwo to do this</p>"},{"location":"slicer/CTChestExplore/#adjust-3d-slice-display","title":"Adjust 3D Slice display","text":"<p>By default, each orthogonal slice in the 3D viewer is displayed as a rectangular plane. If there is extraneous information in the plane (like area where data was not generated), you can remove that area using the threshold setting in the Volumes Module</p> <ol> <li> <p>Switch the Volumes module</p> <p></p> </li> <li> <p>In the display tab, slide the left threshold slider to the right</p> </li> </ol> <p></p> <ul> <li> <p>the axial plane in the 3D viewer is now a circular (displaying only the data that was captured)</p> <p></p> </li> <li> <p>if you keep sliding to the right, you can remove much of what is displayed as black in the orthogonal planes</p> </li> </ul>"},{"location":"slicer/CTChestExplore/#3d-view-controls","title":"3D View Controls","text":"<p>In the 3D viewer menu (blue), click on the push-pin to reveal the 3D view controls</p> <p></p> <ol> <li>Change the Viewpoint direction</li> <li>Zoom by Plus and Minus keys. Click on the Plus and Minus keys to zoom in and out of the 3D view</li> </ol> <p>Be sure to hide the orthogonal planes from the 3D viewer (as described above) before continuing.</p>"},{"location":"slicer/CTChestExplore/#volume-rendering","title":"Volume Rendering","text":"<p>The Volume rendering module displays the whole volume in the 3D viewer (not just a slice). Volume rendering modifies voxel transparencies to reveal internal structures. For example, the default setting often sets any air voxels (Hounsfield unit = -1000) transparent, so you can see what was imaged in the machine. So, in Volume Rendering, you are visualizing the data volume, with varying transparency settings for different voxel intensities so you can see \"inside.\"</p> <p>Let's visualize the CTChest using Volume Rendering.</p> <ol> <li> <p>Switch to the Volume Rendering module by selecting it in the Module Menu (in the toolbar) or by clicking on the Volume Rendering toolbar button:</p> <p></p> </li> <li> <p>Review the Volume Rendering Module</p> </li> <li>Set the Volume to CTChest</li> <li> <p>Click on the eye icon next to Volume:CTChest to open the eye         </p> </li> <li> <p>The volume should now be rendered in the 3D Viewer</p> <p></p> <ul> <li>Drag the shift slider left and right to modify the transparency of the voxels</li> </ul> </li> </ol>"},{"location":"slicer/CTChestExplore/#display-presets","title":"Display Presets","text":"<p>Slicer includes several volume render presets (similar to Window/Level settings) to optimize uncovering certain anatomical structures, like bones.</p> <ol> <li>Try all of the different presets in the Preset menus</li> <li>Compare VTK CPU Ray Casting and GPU Ray Casting</li> </ol>"},{"location":"slicer/CTChestExplore/#advanced-tab","title":"Advanced Tab","text":"<p>In the Techniques Tab under the Advanced Tab, you can tweak what the rendering looks like. Tread carefully here...</p> <ul> <li>Quality Control - Adaptive</li> <li>Advanced Rendering Properties - Composite with shading</li> <li>Notice you can switch to MIPs. Keep \"Composite with shading\"</li> </ul>"},{"location":"slicer/CTChestExplore/#crop-the-render","title":"Crop the Render","text":"<p>You can crop the render to see inside structures. To do so</p> <ol> <li>Select the \"CT-Cropped-Volume-Bone\" preset</li> <li>In the Crop row of the Display tab: Check on Enable Crop and click on the eye icon next to \"Display ROI\"</li> <li>A colored cube should now surround your volume</li> <li>Resize the cube by pulling on the colored handles. You can also adjust these handles in the 2D viewers</li> </ol> <p></p> <ul> <li>Try other presets</li> </ul> <p> </p>"},{"location":"slicer/CTChestExplore/#orthogonal-slices","title":"Orthogonal Slices","text":"<p>We can add the orthogonal slices back to the 3D Viewer to show the render intersecting with the cross-section</p> <ol> <li>Return to the Slice Viewer Controller for the axial plane.</li> <li>Click on the \"Show in 3D\" eye icon to show the red plane orthogonal slice.</li> <li>Enjoy a 3D Render with an orthogonal Slice</li> </ol> <p></p> <ul> <li>What happens to the slice in the 3D window as you scroll over the view axial viewing pane?</li> </ul>"},{"location":"slicer/CTChestExplore/#screenshot-capture","title":"Screenshot - capture","text":"<p>Slicer includes tools to create images from the slice and 3D viewer. You have more control over the resolution and format of these images if you use the Slicer tool vs your own screen capture software.</p> <p>To capture a screenshot:</p> <ol> <li> <p>Click on the Screenshot button</p> <p></p> </li> <li> <p>Name your screen shot \"CTChest\"</p> </li> <li> <p>Select \"Full Layout\" and click ok</p> </li> </ol>"},{"location":"slicer/CTChestExplore/#save-your-work","title":"Save your Work","text":"<p>Saving in Slicer is a bit overwrought. To save, click on the save button in the toolbar.</p> <p></p> <p>You will then be presented with a save dialog:</p> <p></p> <p>Notice there are several different file types to save:</p> Type Description MRML a Scene file, which preserves the current view in slicer NRRD a volume format specific to Slicer VP a special format to store the display properties of the Volume render JSON a structure format to store the ROIs PNG the snapshot we took <p>So, each time you work with a volume in Slicer, you generate a lot of files, and these files should be packaged together.</p> <p>Create a new folder for each new Slicer Project</p> <p>Notice the default location to save your files is at the top level of the Documents folder. Do not save your files here! It will make a mess of your Slicer projects by dumping all your files into one big disorganized pile. Since Slicer generates the same default file names for new projects, you also run the risk of overwriting old projects. Instead, you should create a new folder for each slicer project that you work on.</p> <p>We are working on the CTChest volume, so let's create a new folder called CTChest.</p> <ol> <li>Make sure that all of the files are checked on the left-hand side.</li> <li>Click on the on the \"Change directory for selected files\" button.  </li> <li>A File Dialog will appear.</li> <li>Create a new folder called CTChest. Place it on your desktop</li> <li>Select this folder</li> <li>Click OK.</li> <li> <p>Now the Slicer Save dialog should look like the following:</p> <p></p> </li> <li> <p>Now all of the files will now be saved in the CTChest Folder on the Desktop</p> </li> <li> <p>Click Save.</p> </li> </ol>"},{"location":"slicer/CTFemurSegment_9553F/","title":"Femur Segmentation 9553F","text":"<p>In this module, we will segment the Pelvis, Femurs, and Knee implants from the 9553F DICOM dataset.</p> <ol> <li>Load</li> <li>Crop</li> <li>Delete original volume</li> <li>TotalSegmenter</li> <li>Create New Segmentation</li> <li>Clone Femur Segmentations</li> <li>Smooth Femur Segmentations</li> <li>Segment Implants</li> <li>Fix femur inside implant</li> <li>Fix Femur Head</li> <li>Fill between slices with a different segment?</li> <li>Segment Tibia/Fibula?</li> </ol>"},{"location":"slicer/CTFemurSegment_9553F/#load-dicom-volume","title":"LOAD DICOM Volume","text":"<p>Load the <code>9553F Body Bone</code> dataset into Slicer, as discussed in the Import DICOM datasets documentation. Alternatively, you can load the 6 Body Bone NRRD volume from the MATLAB drive.</p> <p></p> <p>Note: you won't see the 3D render until you follow Volume Rendering steps below. If the volume looks messed up in the 2D viewers (a weirdly shaped head), review the Import DICOM datasets documentation to fix the problem.</p>"},{"location":"slicer/CTFemurSegment_9553F/#volumes-module","title":"Volumes Module","text":"<p>Bring up the Volumes Module and review the Volumes Information tab.</p> <p>Volumes Information</p> <p></p> <ul> <li>This volume has <code>512 x 512 x 473</code> voxels (124 million voxels)</li> <li>The volume also anisotropic voxels with dimensions of <code>0.98mm x 0.98mm x 3.5mm</code></li> </ul> <p>When segmenting, it helps to adjust the contrast so that the target anatomy (e.g. the femur) is brighter than the rest of the tissue.</p> <p>Set Volumes LUT Preset</p> <p>Under the Display tab, Select the CT Bone Window Level Preset.</p> <p> </p> <p>Your volume should have the contrast shown in the right column (CT Bone LUT). </p> <p></p> <p>Notice how using this LUT deemphasizes the tissue (almost black) while highlighting the bone (almost bright white).</p>"},{"location":"slicer/CTFemurSegment_9553F/#volume-rendering","title":"Volume Rendering","text":"<p>Volume Rendering is useful for exploring a volume and quickly rendering anatomical structures. This is NOT a substitute for segmentation. This is mostly for display purposes only. For example, there is nothing to export from a volume rendering. That being said, it is often useful to quickly render anatomical structures before segmenting.</p> <p>Switch to the Volume Rendering Module and select the 'Body Bone' volume from the pop up menu of the <code>Volume</code> setting</p> <p></p> <p>Revealing internal structures using Volume Rendering</p> <p>In the Display tab</p> <ol> <li>Adjust the Shift slider to reveal a render of the cadaver</li> <li><code>Preset</code>: Select the 'CT-AAA' to reveal a render of the cadaver's skeletal system</li> </ol> <p>The goal is to reveal the following:</p> <p></p> <p>Notice how the femur heads and lower flanges are darker than the rest of the femur. This indicates a level of bone degeneration that would be expected in an older female with a knee replacement.</p> <p>Bonus Render: Reveal implant</p> <p>Slide the Shift slider to the right to reveal the implant in the left knee. There are two parts to the implant: one in the femur and one in the tibia.</p> <p></p> <p>Before continuing, select the<code>CT-AAA</code> to again render the skeletal system. Notice how the implants create a spiky distortion in the CT scan around the knee</p>"},{"location":"slicer/CTFemurSegment_9553F/#create-a-precise-roi-for-cropping","title":"Create a precise ROI for cropping","text":"<p>Cropping the volume is a critical step in Slicer as it helps reduce the memory load (and avoid crashes) by eliminating parts of the volume that are not relevant to your project. We can create an ROI in the Volume Rendering module, but then the ROI has to be manually drawn.</p> <p>For this exercise, we instead want to create an ROI with precise coordinates. This will allow us to compare our segmentations in a future exercise. To create a precise ROI, we need the Markup tools.</p>"},{"location":"slicer/CTFemurSegment_9553F/#load-roi","title":"Load ROI","text":"<ol> <li>Click on the Add DATA button</li> <li>Select <code>Choose Files to Add</code></li> <li>Navigate to the MATLAB drive (Unit 3/data) and select \"PelvisFemurROI.mrk.json\"</li> <li>Click OK.</li> </ol> Manually Create ROI <p>If you don't have access to the file, manually create the ROI as follows:</p> <ol> <li>Switch to the Markups module</li> <li>Click on the ROI icon to create a new ROI </li> <li>Rename the ROI \"PelvisFemurROI\"</li> <li>Enter the following settings:</li> </ol> <p></p>"},{"location":"slicer/CTFemurSegment_9553F/#render-roi","title":"Render ROI","text":"<ol> <li>Switch back to the Volume Rendering module</li> <li>Set ROI to your new \"PelvisFemurROI\"</li> <li>Enable Crop - the skeleton should be cropped down to the femur and pelvis</li> <li>Turn off Volume Rendering</li> <li>Turn off Display ROI</li> </ol>"},{"location":"slicer/CTFemurSegment_9553F/#crop-volume","title":"Crop Volume","text":"<p>Now we use our ROI to crop the volume. Switch to the Crop Volume module and enter the following settings:</p> <p>Crop Volume Settings</p> <p></p> <p>IO tab</p> <ul> <li>Input Volume: <code>BODY BONE</code></li> <li>Input ROI: <code>PelvisFemurRoi</code></li> <li>Output volume: select \"Create new volume as...\" and enter \"BODY BONE crop\"</li> </ul> <p>Advanced tab: Be sure to check \"Interpolated cropping\" and \"Isotropic space\". Set the <code>Spacing Scale</code> to <code>1.10x</code> and select \"B-spline\".</p> <p>Volume Information tab: <code>Input Volume</code> indicates the dimensions of the original Body Bone volume. <code>Cropped volume</code> indicates the dimensions of the volume to be created. Notice how we will get fewer rows and columns, but more z-slices</p> <p>When you have set all of the settings, click \"Apply\".    - This might take a bit, so don't panic if you get the spinning disk of death.    - This may also end anticlimactically - nothing may seem to happen.</p> ABOUT ISOTROPIC SPACING and the Spacing Scale setting <p>What isotropic spacing actually does is up- or downsample the 3D volume. Basically, you are adding or subtracting rows, columns, or slices. Subtracting rows and columns means that you are downsampling, which should ultimately create a smaller volume, which in turns saves memory (and hopefully avoids crashing Slicer). Ultimately, you want the total volume loaded into Slicer to take only 1/10 the amount of RAM that is available on your system. For 3D processing, you rarely benefit from having high in-plane resolution if distance between planes is large. For example, a volume of <code>2500 x 2500 x 500</code> (with spacing of <code>0.1x0.1x0.5</code>) will give you approximately same quality 3D reconstructions as a volume of <code>500 x 500 x 500</code> (with spacing of <code>0.5x0.5x0.5</code>). This means we rarely want to upsample and instead should use a larger Spacing scale setting to downsample the volume (even larger than shown here). See the discussion here: Is there a way to reduce the CPU usage and reduce the amount of RAM used? - #3 by goetzf - Support - 3D Slicer Community</p>"},{"location":"slicer/CTFemurSegment_9553F/#data-review","title":"Data Review","text":"<p>Review the Data module, which displays a hierarchy of the loaded volumes and other relevant data</p> <p></p> <p>You should see the new <code>BODY BONE crop</code> volume in this list.</p> <ol> <li>Display Crop Volume: To display the new crop volume, click on the eye-cube icon in the <code>BODY BONE crop</code> row. This should display this volume in the slice viewers and hide the other volume.</li> <li>Delete Original Volume: Right-Click on the original \"6 BODY BONE\" volume and select \"delete\".<ul> <li>We won't need this volume any more and deleting it will help save on computer memory (and avoid slicer crashes).</li> <li>Also, we can always reload the volume from the DICOM dataset if needed.</li> </ul> </li> <li>Hide the PelvisFemurRoi by clicking on the corresponding eye-icon.</li> <li>In the Volumes module, turn on the CT-bone preset for the <code>BODY BONE crop</code> volume</li> </ol>"},{"location":"slicer/CTFemurSegment_9553F/#save-your-data","title":"Save Your Data","text":"<p>Now would be a good time to save your data. Remember, you need to create a new folder to save this project. You can call it something like \"CTFemur\"</p> Saving Tips and Reminders <p>How to create a New Folder. </p> <p>Notice in the directory column that each file has a default path. We want to change the folder paths for all of these files so that they are stored in the same new folder. To do so, do the following:</p> <ul> <li>Ensure that all of the files are checked. </li> <li>Click on the \"Change directory for selected files\" </li> <li>In the dialog the pops-up, navigate to the location where you want to create your folder. The Documents folder is a good place to start (Macs should avoid saving stuff on the desktop as it can slow down your computer.).</li> <li>Create a new folder in that location</li> <li>Call this folder \"CTFemur\" or something similar. And select OK. </li> </ul> <p>Save everything</p> <ul> <li>Every file should now have the same path in the directory column </li> <li>Every file should be checked in the check column.</li> <li>Click on the Save Button. </li> </ul>"},{"location":"slicer/CTFemurSegment_9553F/#segmentation","title":"Segmentation","text":"<p>To segment, we are going to use the Total Segmentator Extension. Make sure that you have the extension installed before proceeding.</p>"},{"location":"slicer/CTFemurSegment_9553F/#total-segmentator","title":"Total Segmentator","text":"<p>Open the Total Segmentator Module (Segmentation:Total Segmentator) and use the following settings:</p>"},{"location":"slicer/CTFemurSegment_9553F/#inputs","title":"Inputs","text":"<ul> <li><code>Input Volume</code>: BODY BONE crop (Important: make sure you select the cropped volume)</li> <li><code>Segmentation task</code>: total</li> <li><code>Fast</code>: checked on</li> </ul>"},{"location":"slicer/CTFemurSegment_9553F/#outputs","title":"Outputs","text":"<ul> <li><code>Segmentation</code>: Create New Segmentation</li> </ul> <p>Click APPLY and wait.</p> <p>Eventually, you will see a series of colorful segmentations added to the 2D slice viewers.</p>"},{"location":"slicer/CTFemurSegment_9553F/#create-new-segmentation-volume-and-clone-segmentations","title":"Create New Segmentation Volume and clone segmentations","text":"<p>The segmentations created by Total Segmentator will serve as our base segmentations. But as we'll soon see, these segmentations are not entirely accurate. So, in this next step, we clone the segmentations generated by Total Segmentator, which we will then modify in the upcoming steps.</p>"},{"location":"slicer/CTFemurSegment_9553F/#segment-editor","title":"Segment Editor","text":"<p>Switch to the Segment Editor module.  You should see the total segmentator segmentation. Likely called \"Body Bone Crop Segmentation\"</p> <ol> <li>From the <code>Segmentation</code> pop-up menu, select \"Create New Segmentation as\u2026\"</li> <li>Save your new Segmentation as  \"YourLastName Segmentation\" (e.g. Salcedo Segmentation)</li> </ol>"},{"location":"slicer/CTFemurSegment_9553F/#data-module","title":"Data Module","text":"<p>Switch to the Data Module. You should now see two Segmentations: one created by the Total Segmentator (and filled with Segmentations), and one that you just created (and empty).</p> <ol> <li>In the Total Segmentator Segmentation Volume, Right Click on the Right Femur and select \"Clone\"</li> <li>Drag the Clone to the Segmentation Volume</li> <li>Repeat for the Left Femur</li> <li>Hide the Total segmentation volume from view by toggling closed the eye icon</li> </ol> <p>Your new segmentation should contain the following:</p> <p></p> <p>Screen shot of the Data module. Notice that the Total Segmentation has been hidden from view (eye icon closed)</p>"},{"location":"slicer/CTFemurSegment_9553F/#review-cloned-segmentations","title":"Review Cloned Segmentations","text":"<p>Switch to the Segmenter the Segment Editor, Select your Segmentation (YourLastName Segmentation) and review the two femur segmentations. Notice that they look fairly reasonable but that there are some clear errors. For example the left femur at the knee implant is completely wrong.</p>"},{"location":"slicer/CTFemurSegment_9553F/#smooth-cloned-segmentations","title":"Smooth Cloned Segmentations","text":"<p>Switch to the Smooth Tool and smooth the Femurs using the following settings:</p> <p></p> <ol> <li><code>Smoothing Method</code>: Gaussian</li> <li><code>Standard Deviation</code>: 2.0mm</li> <li>Check <code>Apply to visible segments</code> (Make sure both Femurs are visible)</li> </ol>"},{"location":"slicer/CTFemurSegment_9553F/#segment-implant","title":"Segment Implant","text":"<p>Switch to \"Local Threshold\" (included with the SegmentEditorExtraEffects extension)</p> <p></p> <ol> <li>Create Two New Labels in the Segmentation Table: <code>femoral implant</code> and <code>tibial implant</code></li> <li>Hide the Femurs from display</li> <li><code>Threshold Range</code>: 1300-3000</li> <li>Command- or control- click on the implant in the left knee (both the femoral and tibial implants)</li> </ol> <p>Your implants should look like the following:</p> <p></p>"},{"location":"slicer/CTFemurSegment_9553F/#clean-up-left-femur","title":"Clean up Left Femur","text":"<p>The Left Femur segmentation is incorrect at the knee. It looks as if the implant is completely embedded inside the bone, but that is not how total knee implants work. Surgeons replace (saw off) the inferior distal end of the femur and the superior end of the tibia with metal components. The femur shaft is inserted into the implant, and the metal implant is exposed at the knee, separated by a plastic spacer.</p> <p>To clean up the segmentation, remove any extraneous femoral segmentation at the level of the knee. If you review the left femur segmentation axially through the implant, you can see how the segmentation does not accurately represent the bone at the level of the implant. The segmentation algorithm appears to have interpolated bone where it does not exist. But in reality, that bone was cut away to make room for the implant. As you scrub axially through the implant, there should be a point where the actual femur disappears, as shown below.</p> <p>To clean up the segmentation, remove any extraneous femoral segmentation at the level of the knee. If you review the left femur segmentation axially through the implant, you can see how the segmentation does not accurately represent the bone at the level of the implant. It just seems to have guessed where bone should have been. But in reality, that bone was cut away to make room for the implant. As you scrub axially through the implant, there should be a point where the actual femur disappears, as shown below:</p> <p></p> <p>Left femur segmentation showing the implant in cyan and femur segmentation in green. The femur segmentation does not accurately represent the bone.</p> <p>To remove this inaccurate segmentation, we are going to cut the segmentation at the level where the actual femur ends. Then we'll remove any femur segmentation inferior to that position.</p> <p>It's easiest to find the bottom of femur in the Coronal (green) viewer. Hover the mouse at the base of the femur (just above the implant) while holding shift. The axial view should now show the corresponding view, as shown above.</p> <p>Slice Cut Femur Segmentation at base of actual femur</p> <p> </p> <p>Switch to the Erase tool and Erase this segmentation slice using the following steps:</p> <ol> <li>Scrub axially to the position shown in the above image</li> <li>Select the Left Femur segmentation in the segmentation table</li> <li>Do not check anything in the Erase details settings</li> <li>Position the Erase tool over the femur segmentation</li> <li>Increase the diameter of the tool by holding shift and rolling the mouse wheel</li> <li>When the diameter is larger than the Femur Segmentation, click on the slice</li> <li>The Femur segmentation (green) should disappear</li> </ol> <p>There should now be a very evident break in the segmentation in the Coronal Slice viewer (as shown below):</p> <p></p> <p>Coronal view of Left Knee with Femur and Implant Segmentations. Left. Femur Slice cut, as detailed above. Right. Segmentation removal inferior to slice cut, as detailed below.</p> <p>Remove Femur Segmentation inferior to Slice Cut</p> <p></p> <p>Switch to the Islands Tool and remove segmentation inferior to the slice cut as follows:</p> <ol> <li>Select \"Remove Selected Island\"</li> <li>In the Coronal Slicer viewer, click on the Femur Segmentation below the slice cut</li> </ol> <p>There are still some remaining femur segmentation that artificially hangs outside the implant</p> <p>Final Segmentation Clean up</p> <ol> <li>Switch to the Scissor tool</li> <li>Use the following settings:  </li> <li>Switch to the Red Viewer</li> <li>Trim any femur segmentations that all outside the implant, as shown below.</li> <li>You may have to scrub through several slices along the implant to completely trim away the bone. </li> </ol> <p></p>"},{"location":"slicer/CTFemurSegment_9553F/#final-result","title":"Final Result","text":""},{"location":"slicer/CTMRExplore/","title":"CT MRI","text":""},{"location":"slicer/CTMRExplore/#ct-vs-mri","title":"CT VS MRI","text":"<p>In this exercise, we load a dataset that contains a CT and two MRI volumes, all aligned with each other</p>"},{"location":"slicer/CTMRExplore/#sample-data","title":"Sample Data","text":"<p>Load the \"CT-MR Brain\" dataset</p>"},{"location":"slicer/CTMRExplore/#review-the-data","title":"Review the Data","text":"<p>Use the Data module to review the loaded datasets: </p> <p></p> <p>notice that the default is to hide the first two volumes and display MRBrainT2 (only row with an open eye icon)</p>"},{"location":"slicer/CTMRExplore/#volume-information-exploration","title":"Volume Information Exploration","text":"<ol> <li>Open the <code>Volumes</code> Modules and review the Information</li> <li>Select each volume in the Active Volume Menu and then examine the:<ul> <li>Image Dimensions and Image Spacing</li> <li>Scalar Type</li> <li>Scalar Range</li> </ul> </li> </ol> Which is the largest volume (Has the Largest Dimensions) <ul> <li>The CT volume has the most Z-slices and the most voxels: nearly 20 million voxels (512 X 507 X 76).</li> <li>The MR volumes only have roughly 5 million voxels.</li> </ul> Which volume has the smallest voxels? <ul> <li>CT voxels have the smallest XY and Z dimensions in the Image Spacing Row</li> <li>The size of the CT voxels are: \\(0.43 * 0.43 * 2.5 = 0.46 mm^3\\)</li> <li>The size of MR1 voxels are: \\(0.47 * 0.47 * 7 = 1.55 mm^3\\)</li> <li>The size of MR2 voxels are: \\(0.39 * 0.39 * 4 = 0.61 mm^3\\)</li> </ul> Which volume has the widest dynamic range? <p>The CT volume ranges from -3024 to 1996, so that's widest range. Notice how CT volumes have negative values, which MR volumes do not</p>"},{"location":"slicer/CTMRExplore/#display-volumes-in-the-viewers","title":"Display Volumes in the viewers","text":"<ol> <li>Display each volume in the Viewers and scrub through the slices</li> <li>Change the displayed volume by:</li> <li>Clicking on the push-pin icon in one of the viewers</li> <li>Clicking on the Chain icon to close the chain link</li> <li>Changing the listed volume</li> </ol> <p>As you scrub through each volume, what differences do you notice right away?</p> <ul> <li>Which volume has an obvious cylindrical dataset?</li> <li>Which volume has the highest resolution the Sagittal Plane?</li> <li>Which volume(s) has the highest resolution in the Axial Plane?</li> <li>Which Volume was captured at an angle oblique to the Inferior-Superior Axis?</li> </ul> <p>Maximize viewer</p> <p>Remember For each viewer, you can expand the view by clicking on the \"Maximize View\" icon () or double-clicking on the image itself. To restore the full-layout view, click on the \"Restore Layout\" icon ().</p>"},{"location":"slicer/CTMRExplore/#compare-slice-views","title":"Compare Slice Views","text":"<p>We have only one high resolution view for the each of MR volumes, so let's display those volumes in separate viewers.  Click on the push-pin icon and set the Chain-Link icon to unlinked () so the viewers are not synchronized. Set the viewers as follows:</p> <ul> <li>Red Viewer: MRBrainT2.</li> <li>Green Viewer: to CTBrain.</li> <li>Yellow viewer: to MRBrainT1.</li> </ul> <p>Be sure to fit all the volumes to the Window: . You should see the following in the viewers:</p> <p></p> <p>Notice how the bottom of the T1 volume is at an angle. This is because the volume has been aligned (registered) to the CT volume</p> <ul> <li>In which volume(s) can you see the white and gray matter most clearly?</li> <li>In which volume is the skull the brightest?</li> </ul> <p>In the MR volumes</p> <ul> <li>Compare the colors of the white vs gray matter</li> <li>Compare the MR volumes to the CT volumes</li> <li>What Structures can you identify?</li> </ul> <p>In the T2 Volume, find:</p> <ul> <li>The uncus</li> <li>The basal ganglia.</li> <li>The thalamus</li> <li>The Cochlea? (Look for the shrek ears on slice -23.9265mm)</li> </ul> <p>In the T1 Volume, find:</p> <ul> <li>Corpus Callosum</li> <li>Fornix</li> <li>Cerebral Aqueduct</li> <li>Thalamus</li> <li>4th ventricle</li> <li>Pituitary Gland</li> </ul> <p>In the CT Volume, find:</p> <ul> <li>The pineal gland. The pineal gland is often calcified. Look for a small white dot.</li> <li>A putative meningioma (calcified falcine tumor) in the forebrain?</li> </ul> <p>Sync the CTBrain and T1 slices to the tumor location.</p> <ul> <li>Can you see evidence of the tumor in the T1 scan?</li> </ul>"},{"location":"slicer/CTMRExplore/#overlay-volumes","title":"Overlay volumes","text":"<p>We can compare the CT to MR scans by overlaying the volumes. Switch to the <code>View Controllers</code> module and set up the viewer volumes as follows:</p> <p></p> <p>Only Change the Red and Yellow slice controllers. Set the overlay transparency to 0.70</p> <p>You should now see the following in the viewers:</p> <p></p> <p>Adjust the transparencies of the overlays as you review the slices</p> <ul> <li>Review the CT to determine the extent of the skull. Notice the Dura mater is difficult to see in the CT scan, but is clearly visible in the MR scans.</li> <li>For the CT/T2 overlay notice the intensity of the ventricles and the skull as you change the transparencies from CT to MR</li> <li>For the CT/T1 overlay, scrub to the location of the falcine tumor and observe the transition between CT to MR</li> </ul>"},{"location":"slicer/CTMRExplore/#add-slices-to-the-3d-view","title":"Add Slices to the 3D view","text":"<p>Add the T1 and T2 slices to the 3D view by clicking on the respective slice viewer pushpins and toggling on the eye icon.</p> <p></p> <p>3D view of the MR volumes. Notice how the volumes were captured at angles to each other.</p> <p>To remove the edges of the slices in the 3D view, switch to the Volume Module and:</p> <ol> <li>Select each MR Volume in the <code>Volume</code> pop-menu</li> <li>Under the Display tab, set the <code>Threshold</code> as indicated in the table below:</li> </ol> Volume Lower Threshold MRT1 70 MRT2 30"},{"location":"slicer/CTMRExplore/#volume-render-the-skull","title":"Volume Render the Skull","text":"<p>Switch to the <code>Volume Rendering</code> module. Render and review each volume by selecting the volume in the <code>Volume</code> pop-up menu and toggling the eye icon. Create the following three renders (sequentially, not at the same time).</p> <p></p> <p>3D renders of the CT-MR volumes.</p> <p>Crop the rendered volume to get the views shown in T1 and CT.</p> <ul> <li>Be sure to remove the left halves of the volumes.</li> <li>Add the MR slices to the 3D viewer (Red and Yellow viewers) for all renders.</li> <li>Remove the edges of the MR slices </li> </ul> <p>For the T1 render</p> <ul> <li>Select the MR-default preset</li> <li>Notice how thick the slices are in T1 render in the 3D viewer</li> <li>This gives you an indication of the resolution of the volume.</li> </ul> <p>For the CT render:</p> <ul> <li>Slide the \"Shift\" slider back and forth to reveal the head restraint. Does the patient have straight or curly hair?</li> <li>Select the CT-AAA preset to reveal the skull</li> <li>Find the Intracranial sinus</li> <li>Find the falcine tumor. If not visible, adjust the crop ROI.</li> </ul>"},{"location":"slicer/CTPETExplore/","title":"CT PET Multimodal Datasets","text":"<p>This exercise was derived from a section of the Quantitative Imaging Example from the Slicer website.</p> <p>PET/CT Visualization and Analysis</p>"},{"location":"slicer/CTPETExplore/#fdg","title":"FDG","text":"<p>What's FDG 18F?</p> <ul> <li>Fluorodeoxyglucose: a radiopharmaceutical glucose analog. Tumors love glucose.</li> </ul>"},{"location":"slicer/CTPETExplore/#load-dataset","title":"Load Dataset","text":"<p>The datasets in this exercise are multimodal PT CT datasets. They were acquired from a patient who presented with a tumor. The following are the impressions from the Surgeon.</p> <ul> <li> <p>Pathology: poorly differentiated squamous cell carcinoma</p> </li> <li> <p>Treatment: radiotherapy and chemotherapy (weekly cis-platin)</p> </li> <li> <p>Datasets: Two 18F-FDG PET and CT scans acquired within a 5-month interval.</p> </li> </ul> <p>To load the data, we will load .MRB files. An .MRB file is like a zip file and contains all the data from a study (CT and PET images).</p>"},{"location":"slicer/CTPETExplore/#method-1-add-data-dialog","title":"Method 1: Add Data Dialog","text":"<ol> <li>In Slicer, click on the \"Add Data\" button.</li> <li>Click on \"Choose File(s) to Add\"</li> <li>Navigate to the  \"dataset3_PETCT\" folder in the Unit 3 data folder of the MATLAB drive.</li> <li>Shift-Select both \"PET_CT_pre-treatment.mrb\" and \"PET_CT_post-treatment.mrb\"</li> <li>Click \"OK\"\"</li> </ol>"},{"location":"slicer/CTPETExplore/#method-2-drag-and-drop","title":"Method 2: Drag-and-drop","text":"<ol> <li>Navigate to the  \"dataset3_PETCT\" folder in the Unit 3 data folder of the MATLAB drive.</li> <li>Find the file called \"PET_CT_pre-treatment.mrb\"</li> <li>Drag-and-drop that file to Slicer.</li> <li>Click \"OK\" on the pop-up dialog that appears</li> <li>Repeat for the \"PET_CT_post-treatment.mrb\" file</li> </ol>"},{"location":"slicer/CTPETExplore/#data-module","title":"Data Module","text":"<ul> <li>Switch to the Data Module</li> </ul> How many Volumes are loaded? <p>You should see 5 different volumes (as indicated by the cube icons)</p> <p></p> <ul> <li>CT1, CT2, PET1, PET2,</li> <li>PET1-label is a label file (a segmentation of the Tumor)</li> <li>The other files control the view</li> </ul>"},{"location":"slicer/CTPETExplore/#inspect-the-volumes","title":"Inspect the Volumes","text":"<ul> <li>Switch to the Volumes Module</li> <li>Set the Active Volume first to CT1, then to PET1</li> <li>Compare the CT and PET voxels sizes.</li> </ul> Which has a smaller voxel (and better resolution)? <p>The CT dataset clearly has a higher resolution because its voxels are much smaller (Compare the Image Spacing values)</p> <p></p>"},{"location":"slicer/CTPETExplore/#display-an-overlay-of-the-pet-ct-datasets","title":"Display an overlay of the PET CT datasets","text":"<p>Left-click on the pin icon in the top left corner to display the red slice viewer menu.</p> <p></p> <ul> <li> <p>The CT1 volume is displayed in the Foreground viewer</p> </li> <li> <p>The PET1 volume is displayed in the Background viewer</p> </li> <li> <p>The PET1-Label is displayed in the Label map viewer</p> </li> </ul> <p>Use the slider to fade between the Bg viewer and the Fg viewer to display the PET volume overlaid on the CT volume. Change the CT1 value to 0.60.</p> <p>Your settings should now be as follows:</p> <p></p>"},{"location":"slicer/CTPETExplore/#remove-black-edges-of-the-orthogonal-planes","title":"Remove black edges of the orthogonal planes","text":"<p>You can remove the black portions of the orthogonal places in the 3D Viewer using controls in the Volumes Module.</p> <ol> <li>Switch to the volumes module</li> <li>Set the Active Volume to \"PET1.\"</li> <li>In the display tab, adjust the left Threshold slider to set the lower limit of the threshold. In this example, we use a lower Threshold setting of 400</li> </ol>"},{"location":"slicer/CTPETExplore/#adjust-position-of-the-orthogonal-planes","title":"Adjust position of the orthogonal planes","text":"<ul> <li>Move the mouse around the tumor.</li> <li>Hold the shift-button to align the three slice views.</li> <li>Note the label appears as a green outline.</li> <li>You can toggle between an outline and a filled in object by clicking on the icon next to PET1-label.</li> </ul>"},{"location":"slicer/CTPETExplore/#final-result","title":"Final Result","text":"<p>When you are finished, you should see something similar to the following:</p> <p></p> <p>Four-up view of CT1 and PET1 overlay. Tumor segmentation shown in green. Edges of the orthogonal slices in the 3D viewer were removed from display using threshold settings in the volumes module.</p>"},{"location":"slicer/CTPETExplore/#add-a-volume-render-of-the-skull","title":"Add a volume render of the Skull","text":"<p>We can add a volume render to the scene fairly easily, using the Volume Render module</p> <p></p> <ul> <li>Switch to the Volume Rendering Module</li> <li>Choose the CT1 Volume</li> <li>Select the CT-AAA preset</li> <li>Adjust the <code>Shift</code> slider to clean-up the noise</li> <li>Use the crop function to remove the table.</li> <li>Scrub the Slice so that it intersects the PET1_label</li> </ul>"},{"location":"slicer/CTPETExplore/#create-a-3d-segmentation-of-the-tumor","title":"Create a 3D segmentation of the Tumor","text":"<p>This is an old dataset that uses old 3D Slicer methodology for their segmentations, called labelmaps. Instead of labelmaps, Slicer has switched to using Segmentation volumes. Luckily, it is easy to convert the labelmap into a segmentation volume using the Data module.</p> <p></p> <ol> <li>Switch to the Data module</li> <li>Right-click on PET1-label (this is the label map)</li> <li>From the contextual menu, select \"Convert labelmap to segmentation node.\"</li> </ol> <p></p> <ul> <li>This creates a new item in the data table called \"PET1-label-segmentation\". Notice the different icon</li> <li>There is also now a new row in the Slice View Controls that lists this segmentation volume (instead of the labelmap)</li> </ul> <p></p> <p>We can make this new segmentation appear in the 3D using the Segment Editor Module:</p> <p></p> <ol> <li>Switch to the Segment Editor Module by clicking on the icon in the toolbar (or selecting in the Modules pop-up menu)</li> <li>Click on the \"Show 3D\" button</li> <li>You should now see a 3D segmentation of the tumor</li> </ol>"},{"location":"slicer/CTPETExplore/#final-3d-render-of-the-multimodal-dataset","title":"Final 3D Render of the Multimodal dataset","text":"<p>You should now see the following in the 3D view:</p> <p></p> <ul> <li>Hide the 3D slices to view just the skeleton and the tumor</li> </ul>"},{"location":"slicer/CTPETExplore/#review-findings","title":"Review Findings","text":"<p>The following are the clinical findings for the patient:</p> <p></p>"},{"location":"slicer/CTPETExplore/#before-and-after-comparisons","title":"Before and After Comparisons","text":"<p>This multimodal dataset includes CT and PET scans from before and after () treatment (CT1-PET1 vs CT2-PET2, respectively) . We can use a different layout to visualize all of the volumes at once.</p> <p>Choose \"Three over Three\" from the Layout Menu:</p> <p></p> <p>Open the View Controllers Module.</p> <p></p> <ul> <li>here you see the view controller for all of the slice viewers shown. </li> <li>Since there are six viewers, there are six controllers</li> <li>Reveal all of the controls by clicking on the &gt;&gt; icon</li> <li>Be sure to unlink the chain (so your changes are not copied into all of the viewers)</li> </ul> <p>Use these settings:</p> <p></p> <p>You should get something that looks like this:</p> <p></p> <p>Review the results - Are the volumes the same size? - Can you find the same region where the tumor was? - Is the tumor still there?</p> <p>Review and try to match the views shown in the Physician's Follow-up findings.</p>"},{"location":"slicer/CreateModels/","title":"Creating and Displaying Surface Models","text":"<p>So far, we have created segmentations packaged into segmentation volumes (aka label maps). And while we have rendered segmentations in 3D using the <code>Segment Editor</code> module, we have not actually created  independent 3D surface models. In this module, we will create such models from our previous segmentation efforts.</p> <p>Segmentations are useful for masking regions of interest in a volume and for calculating statistics, like volume and length. However, they can be a bit wieldy to manage without specialized software and tend to be rather large. Segmentations are defined by their location in the larger segmentation volume. This can make it difficult to compare multiple masks across multiple segmentation volumes, especially when some of these masks are chiral (e.g. left vs right kidney or femur)</p> <p>In certain situations, 3D surfaces can offer some advantages. A 3D surface is typically represented as a series of vertices and faces. So, 3D surfaces can be more compact: you can create surfaces of the internal structures, not the entire volume, so they are independent from the segmentation volume. 3D surfaces can be displayed by the major Operating Systems (PC, Mac), and 3D surfaces can uploaded to websites designed to share and display 3D surfaces (e.g. Sketchfab).</p>"},{"location":"slicer/CreateModels/#creating-models-from-the-ctacardio-segmentations","title":"Creating models from the CTACardio segmentations","text":"<p>We start by loading our CTACardio segmentations.</p> <ol> <li>Clear Slicer by closing the scene (File:Close Scene) or restarting Slicer</li> <li>Click on the Add DATA button and select the \"CTACardio MRML scene\" file to load the CTACardio segmentation volumes into Slicer.</li> </ol>"},{"location":"slicer/CreateModels/#segmentation-module","title":"Segmentation Module","text":"<p>You create 3D surface models of the segmentation using the <code>Segmentation</code> module.</p> <p>Switch to the  <code>Segmentation</code> module by clicking on the \"Segmentations...\" button (right arrow)  or you can just find Segmentations in the Module Menu</p> <p></p> <p>The <code>Segmentation</code> module organizes all of the segments created using the <code>Segment Editor</code>. In fact, the top half of the module looks identical to the Segment Editor.</p> <p>Additional tabs include:</p> <ul> <li>Display: where you can control the display of the segmentation render (in 3D)</li> <li>Representations: where you can create different types of label masks</li> <li>Copy/move: Where you can move segmentations to different Segmentation nodes</li> <li>Export/import models and labelmaps: Create models and/or labelmaps</li> <li>Export to files: save your segmentations as .OJB files</li> <li>Binary labelmap layers: Controls layers in segmentations</li> </ul> <p>We'll start by creating a surface model of the kidneys and the aorta, so make sure that correct segmentation is listed as the Active Segmentation.</p> <p></p> <p>Note, you may have additional segmentations listed in your table (like Left Kidney)</p>"},{"location":"slicer/CreateModels/#decimation","title":"Decimation","text":"<p>The process of creating surface models usually creates too many triangles, which might make the surface model unwieldy to operate. So, you should always decimate a surface model after you create them to remove these excess triangles.</p> <p>In the Representations tab:</p> <p></p> <ol> <li>Closed Surface: Click on the <code>Create</code> or <code>Update</code> button to bring up the Advanced segmentation conversion dialog window.</li> <li>Advanced segmentation conversion dialog window: Select the <code>Binary labelmap-&gt;</code> row in the top table. <p></p> </li> <li>In the lower table, change the <code>Decimation Factor</code> to 0.5 to 0.75.<ul> <li>Keep an eye on your 3D structures and ensure that you don't over-decimate (they will start to look jagged when over-decimated.)</li> </ul> </li> </ol>"},{"location":"slicer/CreateModels/#create-surface-models","title":"Create Surface Models","text":"<p>Open the Export/import models and labelmaps tab and use these settings</p> <p></p> <p>Then, Click on the \"Export\" button</p> <p>The 3D models should appear in the 3D viewer (it should look the same as the 3D render of the segmentation).</p> <p>Models vs 3D segmentations</p> <p>3D models and Segmentation shown in 3D will likely look identical, because, in practice they are. Slicer makes 3D models of segmentations to display them in the 3D viewer. Sometimes, the only way to differentiate between the two is to toggle the 3D view button at the top of the Segmentations module. That button controls the visualization of segmentations as 3D models. Vizualization of the actual surface models is controlled in the Models Module</p>"},{"location":"slicer/CreateModels/#review-data-and-save","title":"Review Data and Save","text":"<ol> <li>Click on the Data Module</li> <li>Review the hierarchy </li> <li>Save your work</li> </ol> <p>notice that just a couple of things are checked\u2026 This is what has changed. Choose overwrite when asked.</p>"},{"location":"slicer/CreateModels/#models-module","title":"Models Module","text":"<p>The Models Module lists all of the models created and controls their display</p> <p></p> <ol> <li>Switch to <code>Models</code> Module.</li> <li>You should see your models listed</li> </ol> <p></p>"},{"location":"slicer/CreateModels/#adjust-model-opacity","title":"Adjust Model Opacity","text":"<ol> <li>Select one of the models in th models list (e.g.)</li> <li>In the Display tab, change the opacity to 0.5</li> </ol> <p>Kidney surface model with an opacity of 0.5</p>"},{"location":"slicer/CreateModels/#other-model-rendering-settings-to-try","title":"Other Model rendering settings to try","text":"<ul> <li>3D Display: <code>wireframe</code> shows the faces and triangles</li> </ul>"},{"location":"slicer/CreateModels/#clipping-planes","title":"Clipping Planes","text":"<p>One nice feature of Models is that you can clip them (shear off edges) using the orthogonal planes. </p> <ol> <li>Display the Red Slice in the 3D viewer</li> <li>Select Aorta in the Models List</li> <li>Under the 3D Display tab, enable <code>Clipping</code></li> <li>Click Configure...</li> <li>In the Clippings Plane, select different options to see the different effects</li> <li>e.g. Compare \"Positive\" to \"Negative\"</li> </ol> <p></p>"},{"location":"slicer/CreateTumorModels/","title":"CreateTumorModels","text":""},{"location":"slicer/CreateTumorModels/#surface-models-tumors-dataset","title":"Surface Models - Tumors dataset","text":"<p>Load the Tumors data set</p> <p></p> <p>At the top of the Segmentations Module, you can set the Active Segmentation node from the pop-up menu</p> <p></p>"},{"location":"slicer/CreateTumorModels/#create-a-model-of-the-other-segments","title":"Create a model of the other segments","text":"<p>Use the similar steps to create a 3D surface of the aorta as you did for the kidney, with the following changes.</p> <ol> <li>Hide the Right Kidney in the segmentation table</li> <li>For the Export/import models tab, use the following settings</li> <li>Operation: Export</li> <li>Output type: Models</li> <li>Output Node: Segmentation-models (you created this in the previous step)</li> <li>Exported Segments: \"Visible\" - that way, you don't remake the kidney model, since its not visible (see step 1)</li> <li>Export</li> <li>Switch to the <code>Models</code> module</li> <li>There should now be a row for the Aorta</li> <li>Save your work!</li> </ol>"},{"location":"slicer/CreateTumorModels/#create-models","title":"Create Models","text":"<p>Be sure that you have set the segmentation nodes in the Active Segmentation pop-up menu at the top of the Segmentation Module (e.g. SegTumor1). Surface Models will be created of those segments found in that Segmentation node (e.g. Tumor1)</p> <p>In the Export/import models and labelmaps section using the following steps:</p> <ol> <li>Operation: <code>Export</code></li> <li>Output type: <code>Models</code></li> <li>Output node: Create New node as \"MRTumorModels\"</li> <li>Click the <code>Export</code> button</li> </ol> <p>Switch to the Models Module:</p> <p></p> <p>You should see a model of the segmentation that you just made under the MRTumorModels Node.</p> <p>Repeat for the other segments. When you are done, you should see the following in the Models Module.</p> <p></p> <p>Switch to the Data module</p> <ul> <li>You should see the MRTumorModels listed there</li> <li>Right-click on \"MRTumorModels\"</li> <li>Select \"Convert models to segmentation mode\"</li> <li>A new segmentation node called \"MRTumorModels segmentation\" will be added to the list</li> </ul> <p>SAVE YOUR WORK!</p>"},{"location":"slicer/CustomizeSlicer/","title":"Customize Slicer","text":"<p>The two main ways to customize Slicer:</p> <ol> <li>the Application Settings</li> <li>the Extension Manager</li> </ol>"},{"location":"slicer/CustomizeSlicer/#application-settings","title":"Application Settings","text":"<p>The Application settings contain settings that control Slicer Appearance and performance</p>"},{"location":"slicer/CustomizeSlicer/#modules","title":"Modules","text":"<p>The modules tab contains settings for loading extensions (modules), setting the default startup module, and customizing the toolbar</p>"},{"location":"slicer/CustomizeSlicer/#modify-the-toolbar","title":"Modify the Toolbar","text":"<p>The toolbar is broken down into panels, which can be shown/hidden by right-clicking on a blank area of the toolbar to bring up a contextual menu:</p> <p></p> <p>The favorites panel, to the right of the arrows, can be modified in the Application settings: Modules tab</p> <p></p>"},{"location":"slicer/CustomizeSlicer/#views","title":"Views","text":""},{"location":"slicer/CustomizeSlicer/#add-orientation-marker","title":"Add Orientation Marker","text":"<p>It is convenient to display the human orientation marker in the viewers at startup.</p> <p></p> <p>the Orientation marker makes it much easier to understand the orientation of the orthogonal slices or the current view in the 3D viewer</p> <p>To set the Slice View defaults:</p> <ol> <li>In the Edit menu, select \"Application Settings\"</li> <li>In the dialog window, select the \"Views\" tab</li> <li>Use the following settings:</li> </ol> <p></p> <p>When you make changes to the default settings, Slicer requires that you restart the app. Click OK to restart when prompted</p>"},{"location":"slicer/CustomizeSlicer/#remove-slice-edge","title":"Remove Slice Edge","text":"<p>Slice edges are colored rectangles in the 3D view that indicate the orthogonal planes. To remove these from the display uncheck \"Show slice edge in 3D.\"</p>"},{"location":"slicer/CustomizeSlicer/#volume-rendering","title":"Volume Rendering","text":"<p>If you have issues rendering volumes, try changing the default rendering to \"VTK CPU Ray Casting\"</p>"},{"location":"slicer/CustomizeSlicer/#installing-extensions","title":"Installing Extensions","text":"<p>Extensions are customized modules to handle specialized tasks. For the Slicer exercises, we will use the following extensions</p> <ul> <li> <p>segEditExtraFX</p> <p></p> </li> <li> <p>LungCTAnalyzer</p> <p></p> </li> <li> <p>TotalSegmentator</p> <p></p> </li> <li> <p>HDBrainExtraction</p> <p></p> </li> <li> <p>PyTorch</p> <p></p> </li> </ul>"},{"location":"slicer/CustomizeSlicer/#you-add-extensions-as-follows","title":"You add extensions as follows","text":"<ol> <li>Click on the Extension Manager toolbar button to bring up the Manager.</li> <li>On the Side bar, Select a Category, like \"Segmentation\"</li> <li>Find Extension of interest, like \"segEditExtraFX\"</li> <li>Click the Install Button</li> <li>Repeat</li> <li>When you are finished installing extensions, restart Slicer.</li> </ol> <p>Pro-Tip: If the extension manager isn't working</p> <p>Try Clicking on the \"Check for Updates\" button and then on \"Try again\", and see if that fixes things.</p>"},{"location":"slicer/ExportModels/","title":"Export Models to OBJ","text":"<p>An OBJ file is a surface model file format.</p>"},{"location":"slicer/ExportModels/#single-segmentation-node","title":"Single Segmentation Node","text":"<p>For this example, we will use the segmentations that we generated for the CTACardio segmentation exercise.</p> <ol> <li>Load you CTACardio project</li> <li>Switch to the Segmentations module</li> <li>Set the Active segmentation to the <code>Segmentation</code> node.</li> <li>Under the Representations tab, update the Closed surface and ensure the decimation settings are set to 0.5 <p></p> </li> <li>Under the Export to files, enter the following settings:</li> </ol> <p> - Create a new folder on your desktop called \"MyModels\" - Set the File format to <code>OBJ</code> - Be sure to Check on <code>Merge into single file</code></p>"},{"location":"slicer/ExportModels/#multiple-segmentation-nodes","title":"Multiple Segmentation Nodes","text":"<p>When we segmented the tumors, we created multiple segmentation nodes from multiple volumes. If we want to collate all of the segmentations into a single OBJ file, we need to collate the segmentations into one segmentation node.</p> <p></p> <p>This screengrab illustrates the multiple volumes (gray cubes) and multiple segmentation nodes (brain icons). Here we have three Segmentation nodes: SegTumor1, SegTumor2, and MRBT1SkullStrip. Each node contains one segmentation: Tumor1, Tumor2, or brain, respectively.</p>"},{"location":"slicer/ExportModels/#collate-segmentations-into-one-node","title":"Collate Segmentations into One Node","text":"<ol> <li>Switch to the Segmentations module</li> <li>For the Active segmentation, select <code>Create New Segmentation as...</code> and enter \"AllSegs\" in the pop-up dialog</li> <li>Switch to the Data module \u2014 you should see the new \"AllSegs\" mode</li> <li>Clone each segmentation (Tumor1, Tumor2, or brain) by right-clicking on the segmentation and selecting \"Clone\"</li> <li>Drag the clones to the AllSegs node</li> </ol>"},{"location":"slicer/ExportModels/#export-segmentations","title":"Export Segmentations","text":"<ol> <li>Switch back to the Segmentations module</li> <li>Select the \"AllSegs\" segmentations</li> <li>Repeat the steps to export the segmentations into a single OBJ file</li> <li>make sure to set the reference volume to MRTumor1</li> </ol>"},{"location":"slicer/ExportModels/#sketchfab","title":"Sketchfab","text":"<p>Post your models on Sketchfab.</p> <p>Instructions for posting on Sketchfab</p>"},{"location":"slicer/ImageSequenceToVideo/","title":"Creating Video Clips from Image Sequence","text":"<p>These instructions are specific to the Mac Operating system</p> <p>So, you tried to install ffmpeg on a Mac, and you couldn't get it work. No matter. There's another way.</p> <p>First, generate image series in Slicer.</p>"},{"location":"slicer/ImageSequenceToVideo/#quicktime-player","title":"QuickTime Player","text":"<p>Once you have created your different folders of image sequences in Slicer, open the Apple QuickTime Player (v10.5 or greater) and follow these steps</p> <ol> <li>From the File menu, select \u201cOpen Image Sequence\u2026\u201d</li> <li>Select one of the folders that you just created that contains a Slicer Image Series</li> <li>Use the following settings in the pop-up dialog</li> <li>Resolution: <code>Actual size</code></li> <li>Frame Rate: <code>30 Frames Per Second</code></li> <li>Encode For: <code>Greater Compatibility</code></li> </ol> <p></p> <p>Your image sequences should come up in quicktime as a video.</p> <p>To export the video, select the \u201cFile:Export As\u2026\u201d menu item and select <code>1080p</code>.</p> <p>Import these saved video clips into iMovie.</p>"},{"location":"slicer/ImportDICOMDataset/","title":"Import DICOM datasets","text":""},{"location":"slicer/ImportDICOMDataset/#dicom","title":"DICOM","text":"<p>DICOM is one of the main file format standards for handling, storing, printing, and transmitting information in medical imaging. In a DICOM dataset, the image stacks are typically saved as individual image files. Each image contains the metadata for the entire stack.</p> <p>DICOMs are notoriously difficult to work with. In this module, we will learn to work with them</p>"},{"location":"slicer/ImportDICOMDataset/#objectives","title":"Objectives","text":"<ul> <li>Learn about the DICOM file format</li> <li>Learn how to segment a femur from the cadaver dataset series</li> <li>Learn how to separate fused segmentations (ie femur head from pelvis)</li> </ul>"},{"location":"slicer/ImportDICOMDataset/#ct-dicom-dataset","title":"CT DICOM Dataset","text":"<p>You can find a DICOM dataset called 9553F in the Unit 3/Data folder. This is a dataset from a CT scan of one the MHA cadavers from 2016.</p> <p>It is a folder in which there are are four more folders:</p> <ul> <li>S30</li> <li>S40</li> <li>S50</li> <li>S60</li> </ul> <p>And inside each of these folders are the actual DICOM image files.</p> <ul> <li>I20</li> <li>I30</li> <li>I40</li> <li>I50</li> <li>I60</li> <li>I70</li> <li>I80</li> <li>I90</li> <li>...</li> </ul> <p>Notice the unhelpful names and lack of file extensions. It is difficult to sort out what volumes are contained in this dataset. For the record, there are 4 different volumes.</p>"},{"location":"slicer/ImportDICOMDataset/#import-dataset-into-slicer","title":"Import dataset into slicer","text":""},{"location":"slicer/ImportDICOMDataset/#dicom-database","title":"DICOM Database","text":"<p>Slicer includes a DICOM database. This database contains a repository of information specific to the image files in a DICOM dataset. This database helps load frequently accessed datasets quickly. Every time you load a DICOM dataset, the location of this dataset is stored in the database.</p> <p>Next, bring up the <code>Add DICOM Data</code> module by clicking on the corresponding icon:</p> <p></p> <p>In the <code>Add DICOM Data</code> module, click on the Import DICOM files button.</p> <p></p> <p>Browse your computer and select the 9553F folder from the data folder.</p> <p>Your DICOM browser window should now have some data, like this:</p> <p></p> <p>This browser contains three, semi-hierarchal fields: 1. The top field lists the studies that have been imported. In this case, you should have one study: 9553F.   - Select that study by clicking on it. 2. The middle field contains information about the selected study in the top field    - \"Cadaver2016\" 3. The bottom field contains the volumes in the study. In this case there are 4 volumes   - HEAD: Optimized for tissue in the head   - HEAD BONE: Optimized scan for the skull   - BODY: Optimized scan for the tissue   - BODY BONE: Optimized scan for the skeleton</p> <p>To inspect the metadata, right-click on \"Head\" to bring up the contextual menu...</p> <p></p> <p>\u2026and select \"View DICOM metadata\"</p> <p></p> <p>This new window is a browser for the metadata of each file in the folder</p> <p>Notice the:</p> <ul> <li>Scroll bar at the top: There are 159 different images, so 159 different metadata headers. As you drag the slider back and forth, you will see that most of the metadata is the same, except for a few image specific fields. Also notice the slider does not  necessarily in reveal the files in sequential order</li> <li>The left column is populated Tag IDs: (0008, 0005)? These are the weird DICOM specifications.</li> <li>Use the search field at the top for the following Values:</li> <li>Modality: CT</li> <li>AcquisitionDate: 20161031 (YYYYMMDD)</li> <li>Manufacturer: Philips (this is for the CT machine)</li> <li>ManufacturerMOdelName: Gemini TF TOF 64 (The model name: The imager looks something like this. It is also capable of performing PET)</li> <li>InstitutionName: CTRIC (Colorado Translational Research Imaging Center. Now called the CU Research Imaging Center, this CT was scanned here on campus)</li> <li>ScanType: Helix (the method of scanning used on the cadaver - see lecture on CT)</li> <li>ImageComments: Head</li> <li>BitsAllocated vs BitsStored: 12-bit image</li> <li>PixelSpacing: 0.58, 0.58</li> <li>SliceThickness: 1</li> </ul> <p>And there is lots more metadata to browser through, a lot of which is incomprehensible.</p> <p>Close the metadata window and then open the Head Bone and Body Bone metadata to compare</p> <ul> <li>Compare the number of slices for Head Bone vs Body Bone</li> <li>Note the difference in Voxel Size</li> </ul>"},{"location":"slicer/ImportDICOMDataset/#load-body-bone-dataset","title":"Load Body Bone Dataset","text":"<ol> <li>Select \"Body Bone\"</li> <li>Click Load</li> <li>You will get a Warning, Click \"OK\" to load anyway</li> <li> <p>And...</p> <p></p> <p>The volume is all messed up. The top part of the Head data was accidentally added to the Body Bone data. And then there was a huge gap in the volume between the top of the head to where the actual Body Bone data starts (around the shoulders). So, slicer tried to fill in that gap, Turns out that the files I1-I400 (basically anything below I1000) in folder s60 are actually part of the head data. If you scrub through the metadata of BODY BONE, you can see those files.</p> </li> </ol> <p>There are two ways to tackle this issue of a messed up looking volume:</p> <ol> <li>Switch to the <code>Volumes</code> module</li> <li>In Volume Information, click on the Center Volume button</li> <li>And the distortion is removed</li> </ol> <p>or...</p> <ol> <li>Switch to the <code>Data</code> module</li> <li>You should see the following:    <p>In addition to the Body Bone volume, there is an \"acquisition transform\". This is how the importer tried to fix the volume, but instead just ended screwing it up.</p> </li> <li>Right-click on \"BODY BONE acquisition transform\" and delete.</li> <li>If there is a \"BODY BONE centering transform\", which appears after you click on the Center Volume button in the <code>Volumes</code> module, right-click to delete that too.</li> <li>NOTE: This is not common. Not all DICOM datasets load in all messed up.</li> </ol> <p>At any rate, you should end up with a \"fixed\" volume that looks like this:</p> <p></p> <p>Notice the little piece of skull at the top of the volume.</p>"},{"location":"slicer/ImportDICOMDataset/#inspect-volume","title":"Inspect volume","text":"<ol> <li>Switch to the <code>Volume</code> module</li> <li>Inspect the volume information</li> <li>the Image dimensions and Spacing should match what you saw in the DICOM metadata</li> <li>Notice that the Scalar range is 12-bit (~4000 dynamic range)</li> <li>Select the Abdomen Preset</li> </ol>"},{"location":"slicer/ImportDICOMDataset/#volume-render","title":"Volume Render","text":"<ol> <li>Switch to the <code>Volume Rendering</code> module</li> <li>Turn on Volume Rendering</li> <li>Use the CT-AAA Preset</li> <li>Inspect the volume</li> </ol>"},{"location":"slicer/InterfaceIntro/","title":"3D Slicer","text":"<p>3D Slicer is an application used to visualize and analyze medical image datasets like CT scans or MRI dataset. In this course, we will also use Slicer to segment and render anatomical objects in these datasets.</p>"},{"location":"slicer/InterfaceIntro/#useful-slicer-documentation","title":"Useful Slicer Documentation","text":"<p>3D Slicer has a documentation site you can review.</p> <ul> <li>Getting Started</li> <li>User Interface</li> <li>Coordinate Systems</li> <li>Data Loading and Saving</li> <li> Slicer Youtube Tutorials</li> </ul>"},{"location":"slicer/InterfaceIntro/#interface","title":"Interface","text":""},{"location":"slicer/InterfaceIntro/#application-menu","title":"Application Menu","text":"<p>Slicer has four fairly simple menus</p>"},{"location":"slicer/InterfaceIntro/#toolbar","title":"Toolbar","text":"<p>The Toolbar provides quick access to commonly used functions.</p> <p></p>"},{"location":"slicer/InterfaceIntro/#viewers","title":"Viewers","text":"<p>There are two types of viewers in 3D Slicer</p> <ul> <li>2D Viewers: Display orthogonal cross-sections of the volume data</li> <li>3D Viewers: Displays 3D Renderings and/or orthogonal slices in 3D space.</li> </ul> <p>In the default view, there are three 2D slice viewers: Red, Yellow, and Green. These typically correspond to the axial, sagittal, and coronal anatomical planes (see the Red, Yellow, and Green Slice viewers shown above). There is also one 3D viewer, which shows anything being rendered in 3D.</p>"},{"location":"slicer/InterfaceIntro/#changing-the-viewer-layout","title":"Changing the Viewer Layout","text":"<p>You can change the layout of the Slice Viewers using the layout menu in the toolbar:</p> <p></p>"},{"location":"slicer/InterfaceIntro/#viewer-controls","title":"Viewer Controls","text":"<p>You can change what's displayed in the viewers by clicking on the pushpin icon in the top left corner of each 2D viewer to display the following controls:</p> <p></p>"},{"location":"slicer/InterfaceIntro/#2d-slice-view-controller-top-row","title":"2D Slice View Controller Top row","text":"<p>Clicking on the push-pin only reveals the top row of controls:</p> <ul> <li>Link - change the settings across all viewers</li> <li>Eye Icon - display the orthogonal slice in the 3D viewer</li> <li>Orientation - select which orthogonal plane to display (e.g. coronal, sagittal, etc.)</li> <li>Background layer - choose the main volume to display in the viewer</li> </ul>"},{"location":"slicer/InterfaceIntro/#the-rest-of-the-2d-controllers","title":"The rest of the 2D controllers","text":"<p>To reveal the additional settings, you need to click on the <code>&gt;&gt;</code> icon</p> <p>For the 2D viewers, you should now see more controls with some pop-up labels</p> <ul> <li>Label - show the segmentation data in the label layer</li> <li>Foreground - You can overlay two volumes on top of each other. One is set to the foreground layer and one to the background layer</li> <li>Background - The background layer for the volumes</li> <li>Opacity - sets the amount of mixed opacity for the foreground and background layers</li> </ul>"},{"location":"slicer/InterfaceIntro/#modules","title":"Modules","text":"<p>The modules contain all of the fine-toothed controls for Slicer. You set the current module by selecting its name from the Modules menu in the Toolbar.</p>"},{"location":"slicer/InterfaceIntro/#welcome-module","title":"Welcome Module","text":"<p>The default module is the welcome module which contains key controls for loading data, customizing slicer, and downloading sample data. It also contains several panels of information about using Slicer.</p> <p></p>"},{"location":"slicer/InterfaceIntro/#welcome-module-main-buttons","title":"Welcome Module Main Buttons","text":"<ul> <li> <p>Add DICOM data - loading DICOM datasets</p> </li> <li> <p>Add Data - load Slicer data</p> </li> <li> <p>Download Sample Data - download and display sample datasets</p> </li> <li> <p>Customize Slicer - Opens Slicer preferences</p> </li> <li> <p>Explore Added Data - Brings up the data module, which shows any data that has been loaded into Slicer</p> </li> </ul>"},{"location":"slicer/InterfaceIntro/#welcome-module-collapsing-tabs","title":"Welcome Module Collapsing Tabs","text":"<p>Each panel (indicated by a black triangle) contains basic information on how to interact with the software</p> <ul> <li> <p>Feedback - a link to the Slicer forum</p> </li> <li> <p>About - A description of Slicer</p> </li> <li> <p>Documentation &amp; Tutorials - links to the Slicer Documentation</p> </li> <li> <p>Updates - Check for Slicer updates</p> </li> <li> <p>Data Probe: This panel is available in most module interfaces. It displays pixel information when the mouse hovers over a pixel in a 2D viewer.</p> </li> </ul>"},{"location":"slicer/MRHeadExplore/","title":"Explore the MRHead dataset","text":"<p>In this exercise, we will explore the MRHead Volume</p> <ol> <li>Switch to the <code>Sample Data</code> module (File:Download Sample Data)</li> <li>Select MRHead</li> <li>Display the red viewer slice in 3D</li> <li>Display the yellow viewer slice in 3D</li> </ol>"},{"location":"slicer/MRHeadExplore/#volume-render","title":"Volume Render","text":"<p>Switch to the <code>Volume Rendering</code> module.</p> <ol> <li>Render MRHead in 3D</li> <li>Select the \"MR Default\" preset</li> <li>Crop the render Sagittally along the midline</li> <li>Can you remove the black surrounding the volume from being displayed in 3D?</li> </ol> <p></p> Is this a T1 or T2 dataset? <p>likely T1</p> How Large is the volume? <p>\\(256 * 256 * 130 = 8,519,680\\) voxels</p> How large is a voxel in this dataset? <p>\\(1 * 1 * 1.3 = 1.3mm^3\\)</p>"},{"location":"slicer/MRHeadExplore/#id-structure","title":"ID STRUCTURE","text":"<ol> <li>Lobes and Sulci<ul> <li>temporal lobe</li> <li>occipital lobe</li> <li>Parieto occiptal sulcus</li> <li>Calcarine Sulcus</li> <li>Uncus</li> <li>Cingulate Gyrus</li> </ul> </li> <li>Brainstem<ul> <li>Midbrain, pons, medulla</li> <li>Tectum</li> <li>Spinal Cord</li> </ul> </li> <li>Ventricles<ul> <li>Lateral</li> <li>3rd</li> <li>Cerebral aqueduct</li> <li>4th</li> <li>Falx Cerebri</li> <li>Septum pellucidum</li> </ul> </li> <li>Cisterns<ul> <li>Magna</li> <li>Quadrigeminal</li> <li>Interpeduncular</li> </ul> </li> <li>Cerebellum</li> <li>Mammillary Bodies</li> <li>Corpus Callosum</li> <li>Fornix</li> <li>Auditory Nerve</li> <li>Pituitary Gland</li> <li>Basal Ganglia</li> <li>Thalamus</li> <li>Hippocampus</li> <li>Choroid Plexus</li> </ol>"},{"location":"slicer/MRTumorSegment/","title":"Exercise: Segment a Brain Tumor","text":""},{"location":"slicer/MRTumorSegment/#overview","title":"Overview","text":"<p>This exercise is based on the following Slicer tutorial: pdf</p>"},{"location":"slicer/MRTumorSegment/#what-is-a-meningioma","title":"What is a meningioma?","text":"<ul> <li>The most common type of primary brain tumor: ~30% of all brain tumors</li> <li>These tumors originate in the Meninges<ul> <li>Three protective layers that surrounds and supports the brain</li> <li>Dura, Arachnoid, and Pia mater</li> </ul> </li> <li>Meningiomas grow out of the arachnoid (the middle layer of the meninges). <ul> <li>Their growth can press against the brain or spinal cord and cause serious problems. </li> </ul> </li> <li>Meningiomas are named by their location:<ul> <li>e.g. Falcine meningiomas form in the falx, whereas parasagittal meningiomas form near the falx (The  falx is  a very thin layer of tissue between the two sides of the brain.)</li> </ul> </li> </ul> <p>Localization of intracranial meningiomas. Left: Axial view of meningiomas at the base of the skull. Right: Coronal view of meningiomas in the cranial dome, the falx cerebri, and intraventricular. For more information on meningiomas, click here. Image: University Department of Neurosurgery, Inselspital Bern. </p>"},{"location":"slicer/MRTumorSegment/#what-is-gadolinium","title":"What is gadolinium?","text":"<ul> <li>Gadolinium (Gd) is a malleable and ductile rare-earth element</li> <li>It can be used as a contrast agent for MRI.</li> <li>When injected intravenously into the body, gadolinium enhances and improves the quality of the MRI images. </li> <li>This helps improve the visibility of inflammation, tumors, blood vessels, and\u2014for some organs\u2014blood supply.</li> <li>Gd is eliminated from the body through the kidneys.</li> </ul>"},{"location":"slicer/MRTumorSegment/#how-does-gadolinium-improve-contrast-in-mris","title":"How does Gadolinium improve contrast in MRIs?","text":"<ul> <li>Gadolinium is paramagnetic at room temp<ul> <li>helps with contrast by increasing nuclear spin relaxation rates</li> </ul> </li> <li>Gd does not readily cross the blood-brain barrier<ul> <li>But, brain tumors degrade the BBB, allowing Gd to penetrate</li> </ul> </li> </ul>"},{"location":"slicer/MRTumorSegment/#required-extension","title":"Required Extension","text":"<p>This exercise requires the following extensions:</p> <ul> <li>HDBrainExtraction.</li> <li>PyTorch</li> </ul> <p>Be sure to install those extensions before continuing.</p>"},{"location":"slicer/MRTumorSegment/#load-the-tumor-datasets","title":"Load the Tumor datasets","text":"<ol> <li>Select the <code>Sample Dataset</code> module</li> <li>Select MRBrainTumor1 and MRBrainTumor2</li> <li>Explore the volumes.</li> <li>Notice the tissue contrast in the brain.</li> </ol>"},{"location":"slicer/MRTumorSegment/#inspect-volume","title":"Inspect Volume","text":"<p>Bring up the Data module </p> <p>You should see two volumes:</p> <ol> <li>MRBrainTumor1</li> <li>MRBrainTumor2</li> </ol> <p>Hover over the names of these volumes. Notice that you get some information on the volumes themselves.</p> Do the volumes have the same dimensions and voxel sizes? <p>No.</p>"},{"location":"slicer/MRTumorSegment/#volume-module","title":"Volume Module","text":"<p>Bring up the Volume module </p> <p>The volume module gives you more detailed information on the volumes and allows you to change the display properties of the volumes.</p> What are the dimensions of the volume (Image Dimensions) and voxels (Image Spacing)? What is the Scalar type and Range? <ul> <li>MRBrainTumor1<ul> <li>Image Dimensions: 256 X 256 X 112 </li> <li>Image Spacing: 0.94 X 0.94 X 1.4 mm</li> <li>Scalar Range: 0 to 695</li> <li>Scalar Type: short (16-bit)</li> </ul> </li> <li>MRBrainTumor2<ul> <li>Image Dimensions: 256 X 256 X 130 </li> <li>Image Spacing: 0.94 X 0.94 X 1.2 mm</li> <li>Scalar Range: 0 to 986</li> <li>Scalar Type: short (16-bit)</li> </ul> </li> </ul>"},{"location":"slicer/MRTumorSegment/#inspect-the-tumors","title":"Inspect the Tumors","text":"<p>Starting with MRBrainTumor1, find the tumor and get all three slice viewers aligned onto the tumor.</p> <p>Then inspect Tumor 2.</p> <p>Baseline radiologist's clinical impression:</p> <ul> <li>large falcine lesion is identified.</li> <li>measures 3.10 cm anteroposteriorly and 3.51 cm in height.</li> <li>enhances moderately on post gadolinium imaging.</li> </ul>"},{"location":"slicer/MRTumorSegment/#volume-render-the-tumors","title":"volume Render the Tumors","text":"<p>In this step, we will render the MRI volume in 3D and then use the crop tool to crop the volume down to the tumor.</p> <ol> <li>Bring up the Volume Rendering Module</li> <li>Set Volume: to <code>MRBrainTumor1</code></li> <li>Click open Eye Icon next to Volume to render </li> <li>Select the <code>MR-Default</code> display preset</li> <li>Enable Crop and Display ROI</li> <li>In the 2D Viewers, drag the  ROI so that it captures just the Tumor.</li> <li> <p>Make sure to scrub through the slices in all three planes to verify that you captured the tumor.    </p> </li> <li> <p>When you're done sizing the ROI, hide it by closing the eye next to \"Display ROI\".</p> </li> <li>Adjust the display by sliding the Shift slider</li> </ol>"},{"location":"slicer/MRTumorSegment/#overlay-volumes","title":"Overlay Volumes","text":"<ul> <li>Use the Slice controllers to overlay the volume.<ul> <li>Foreground: <code>Tumor2</code></li> <li>Background: <code>Tumor1</code></li> </ul> </li> <li>Change the transparency between the 2 volumes to 50%</li> <li>Are the volumes aligned?</li> </ul>"},{"location":"slicer/MRTumorSegment/#register-the-volumes","title":"Register the Volumes","text":"<p>In the previous step, we saw that the two brains (from the same human) are not aligned. This is due to the fact that the MRIs were captured at two separate time points and the subject wasn't precisely positioned in the same location in the machine. In this step, we will register the brains, which means we will align their positions.</p> <p>Under the Registration Modules Menu, choose the \"General Registration (BRAINs)\"</p> <p>Change the following settings:</p> <ol> <li>Fixed Image Volume: <code>MRBrainTumor1</code></li> <li>Moving Image Volume: <code>MRBrainTumor2</code></li> <li>Slicer Linear Transform: Create New Linear Transform</li> <li>Output Image Volume: Create new volume as \"MRBT2mvd\"</li> <li>Initialize Transform Mode: <code>useMomentsAlign</code></li> <li>Registration Phases: <code>Rigid (6 DOF)</code></li> <li>Click apply.  Should take about 1 minute.</li> </ol> <p></p>"},{"location":"slicer/MRTumorSegment/#check-registration","title":"Check registration","text":"<p>In the Volumes Module, change the colormap of the newly created \"MRBT2mvd\" volume to a different color like shades of magenta (CoolShade3) or inverse gray</p> <p>Use the Slice controllers to overlay Tumor1 with MRBT2mvd.</p> <ul> <li>Foreground: <code>MRBrainTumor1</code></li> <li>Background: <code>MRT2mvd</code></li> <li>Adjust LUT for MRT2mvd (so its not so overexposed)</li> <li>Set transparency to 50%</li> </ul> <p>Are they aligned?</p> <p>Yes? Good.</p> <p>SAVE YOUR WORK!</p>"},{"location":"slicer/MRTumorSegment/#segmentation","title":"Segmentation","text":"<p>Next, we'll segment the tumors using the segmentation tool. </p>"},{"location":"slicer/MRTumorSegment/#segment-tumor1","title":"Segment Tumor1","text":"<p>We will use the Grow-from-seeds method to segment the Tumor in the MRBrainTumor1 volume. First, though, we need to segment three orthogonal sections from the tumor (and sample the background). </p>"},{"location":"slicer/MRTumorSegment/#2d-slice-viewers","title":"2D Slice Viewers","text":"<ol> <li>Find the largest cross-section of the tumor in the Sagittal viewer (yellow viewer).</li> <li>Ensure that the slice includes some of the bright white meninges layer as well.</li> <li>Align 2D viewers (Hold the shift button and hover the mouse) so all three viewers are aligned with the Yellow viewer</li> <li>Compare with the image below for an example of how the 2D viewers (in the 4up layout) should look (but without any green label yet)</li> </ol>"},{"location":"slicer/MRTumorSegment/#segment-editor","title":"Segment Editor","text":"<p>Bring up the Segment Editor and use the following settings:</p> <ol> <li>Segmentation: Rename new segmentation as <code>SegTumor1</code> </li> <li>Master Volume: Set to <code>MRBrainTumor1</code></li> <li>Create a new Segmentation called Tumor1</li> <li>Create another segmentation called Not_tumor</li> </ol> <p></p>"},{"location":"slicer/MRTumorSegment/#threshold","title":"Threshold","text":"<p>The threshold tool allows you to select a range of intensities to segment. Here, we will use the threshold tool for masking.</p> <ol> <li>Bring up the threshold tool to set the masking range</li> <li>Move the cursor over to the center of the tumor cross-section in one of the slice viewers</li> <li>Notice that the cursor has the icon of the Threshold tool in one corner</li> <li>Click and hold on the center of the tumor</li> <li>A yellow circle will appear. As you drag, the circle gets larger</li> <li>Drag to the edge of the tumor to to capture the intensities in that tumor</li> <li>Release the mouse button</li> <li>Notice that you have just set the Threshold Range in the Threshold module.     </li> <li>Adjust the range to 125-500 if needed</li> <li>The flashing color in the view slicers indicates what will be segmented if you were to click <code>Apply</code> (but don't do that)</li> <li>Click on the <code>Use for masking</code> button.<ul> <li>This will restrict the paint tool to only paint voxels with an intensity that falls in the intensity range (125-500)</li> </ul> </li> </ol>"},{"location":"slicer/MRTumorSegment/#paint-tool","title":"Paint Tool","text":"<p>After clicking on the <code>Use for masking</code> button, Slicer should have automatically switched over to the paint tool. If not, do so now by clicking on the paint tool button.</p> <p>In the Masking settings of the paint tool, the \"Editable intensity range\" should now be turned on:</p> <p></p> <p>Now when you paint, you will only be able to paint inside the tumor and other bright areas, like the meninges, where the intensities fall inside of the editable intensity range.</p> <p>Go ahead and paint the three orthogonal slices of the tumor, as follows:</p> <p></p> <p>Next, in the Paint tool, change the masking to the following settings:</p> <p></p> <p>Notice that we have un-checked the \"Editable Intensity range\". With these settings, you will be unable to overwrite the tumor labels you have already drawn, but you should be able to paint everywhere else.</p> <p>Select the \"Not_Tumor\" label in the segmentations table and paint the background surrounding the tumors, as follows:</p> <p></p>"},{"location":"slicer/MRTumorSegment/#grow-from-seeds","title":"Grow-From-Seeds","text":"<ol> <li>Select the \"Tumor1\" label in the segmentations table and then bring up the Grow From Seeds tool</li> <li>Use the following Masking settings:<ul> <li>Editable Area: <code>Everywhere</code></li> <li>Modify other Segments: <code>Overwrite all</code></li> </ul> </li> <li>Click on the <code>Initialize</code> button</li> <li>Scrub through the slices and ensure that the two labels are properly labeled. If not, use the paint tool to correct any label errors, making sure you select the right segmentation in the segmentation table before painting</li> <li>Click <code>Apply</code> and wait.</li> <li>Enjoy segmented tumor (Be sure the Show 3D button is selected in the segment editor tool)</li> <li>Clean-up tumor noise using the Smoothing tool</li> <li>Enjoy a freshly segmented tumor!</li> </ol> <p>SAVE YOUR WORK!</p>"},{"location":"slicer/MRTumorSegment/#tumor2","title":"Tumor2","text":"<p>Ok, repeat the segmentation for Tumor2, with the following changes:</p> <ol> <li>Create a New Segmentation as <code>SegTumor2</code></li> <li>Change the Master Volume to <code>MRBT2mvd</code></li> <li>Create a new Segment called Tumor2. Change the color of this segment to Blue (or a different color from the original tumor)</li> </ol> <p></p>"},{"location":"slicer/MRTumorSegment/#final-comparison","title":"Final Comparison","text":"<p>Go to the Data Module. You should see the following in your Node list:</p> <ul> <li>MRBrainTumor1 (Volume)</li> <li>MRBrainTumor2 (Volume)</li> <li>Slicer Linear Transform (LinearTransform)</li> <li>MRBT2mvd (Volume)</li> <li>SegTumor1 (Segmentation)<ul> <li>Tumor1 (Segment)</li> </ul> </li> <li>SegTumor2 (Segmentation)<ul> <li>Tumor2 (Segment)</li> </ul> </li> </ul> <p>Review how slicer organizes the data.</p> <ol> <li>Each Segmentation contains segments that are specific to a volume (MRBrainTumor1 or MRBT2mvd, in this case)</li> <li>Click on MRBrainTumor1<ul> <li>Notice how other items in the Data table light up - these are connected to Tumor1 in some fashion</li> </ul> </li> <li>Hover over one of the Segmentations (Like Tumor1). After a beat, you get information about that volume:     &gt;Segment - ID, Segment_1, Representations: Binary labelmap, Closed Surface, Colol: (128, 174,128)</li> <li>Compare that information to the information that you get for the volumes, like \"MRBrainTumor1\"     &gt;Volume (Dimensions: 256 X 256 X 112 Spacing: 0.938 x 0.938 x 1.42mm )</li> </ol>"},{"location":"slicer/MRTumorSegment/#review-segments","title":"Review Segments","text":"<ol> <li>Display only the MRBrainTumor1 volume to slice viewers (add to the background). Hide any other volumes</li> <li>Display the Tumor1 segment and the Tumor2 segment by opening the eye icons in the Data hierarchy</li> <li>Compare their dimensions. Do they look the same size?</li> </ol>"},{"location":"slicer/MRTumorSegment/#region-properties","title":"Region Properties","text":"<p>So, have the tumors changed in size?</p>"},{"location":"slicer/MRTumorSegment/#manually-measure-tumor-with-ruler","title":"Manually Measure Tumor With Ruler","text":"<p>You can measure objects in Slicer using the Markups tools, which includes a points list, line, angle, curve, closed curve, plane, ROI etc. To reveal the Markups toolbar, click on the Markups Toggle Button </p> <p></p> <p>Switch to the Markups module to keep track of your markup measurements.</p> <p></p>"},{"location":"slicer/MRTumorSegment/#measure-the-tumor-using-the-line-tool","title":"Measure the tumor using the Line tool","text":"<ol> <li>Scrub the viewers so that you see the widest aspect of the tumor in each view.</li> <li>Select the Line Markup tool (the second button from the left)</li> <li>Measure the tumor by click on one side of the tumor and then on the other side</li> <li>Each time you click, Slicer adds a control point (red dot) to the viewer</li> <li>Slicer measures the distance between two sequential control points.</li> <li>Be consistent how you make your measurements</li> <li>Be sure to measure all three anatomical axes of the tumors: A-P, L-R, S-I</li> <li>Make sure that you measure across the widest part of the tumors in each plane.</li> </ol> Making Multiple Sequential Line Measurements <p>You can make several measurements at the same time by turning on the \"Place Multiple Control Points\" setting. In the Markups tool bar, bring up the Place Control Points menu by clicking on the triangle next to this icon: </p> <p> </p> <p>Now when you are done with one line measurement, you can go on to the next. Double-click the last control point when you are done. If you accidentally get an extra measurement point in the Markups table, just delete that measurement.</p>"},{"location":"slicer/MRTumorSegment/#label-and-organize-each-measurement","title":"Label and Organize each measurement","text":"<ol> <li>As you measure each length, an entry will be added into the Markups table, prefaced by an \"L\" (for length)</li> <li>Double-click on that name and rename it to indicate tumor number and Anatomical Axes, e.g. <code>T1-LR</code></li> <li>Also, for each measurement, under the Display:Advanced tab, uncheck <code>Properties Label</code> to remove text from the slices</li> <li>When you are ready to Measure the second tumor, hide all of the first tumor markups by closing the eye icons for each measurement in the Markups table</li> <li>Finally, when you have made all of your measurements, create a new folder in the Markups module called Line Measurements and drag all of your measurements into this folder</li> </ol> <p>You should end up with something that looks like this:</p> <p> </p>"},{"location":"slicer/MRTumorSegment/#segment-statistics","title":"Segment Statistics","text":"<p>You can calculate properties like volume and surface area using the Segment Statistics Module</p> <p>Switch to the Modules:Quantification:Segment Statistics module and enter the following settings</p> <p></p>"},{"location":"slicer/MRTumorSegment/#inputs","title":"Inputs","text":"<p>Set the inputs as follows:</p> <ul> <li>Segmentation: Select a Segmentation node (e.g. \"SegTumor1\" or \"SegTumor2\")</li> <li>Scalar Volume: Should automatically update to the appropriate volume</li> </ul>"},{"location":"slicer/MRTumorSegment/#advanced","title":"Advanced","text":"<p>Under the advanced tab, there are several statistics that can be calculated: Labelmap Statistics, Scalar volume statistics, and Closed Surface Statistics. Labelmap and Scalar will likely give you very similar results. Closed Surface stats will assume that the volume is completely sealed and give you slightly different results. You can add or remove stats by clicking on the relevant <code>Options</code> button next to the statistics.</p> <p>Choose the following options:</p> <ul> <li>Labelmap Statistics<ul> <li>Voxel Count</li> <li>Volume cm3</li> <li>Feret Diameter mm</li> <li>OBB diameter mm (oriented bounding box)</li> <li>Surface mm2</li> </ul> </li> <li>Scalar volume statistics<ul> <li>Minimum</li> <li>Maximum</li> <li>Mean</li> <li>Median</li> <li>Standard deviation</li> </ul> </li> <li>Closed Surface: uncheck (don't calculate)</li> </ul> <p>Once you have set-up all of the options, click Apply</p> <ol> <li>A table should appear under the slice viewers. You will get one row for each segment in the segmentation (in our case, 1 row).     </li> <li>Highlight the row</li> <li>Copy</li> <li>Open Microsoft Excel</li> <li>Paste</li> </ol> <p>Repeat the steps for \"Tumor2\".</p>"},{"location":"slicer/MRTumorSegment/#follow-up-radiologists-clinical-impression","title":"Follow-up radiologist's clinical impression","text":"<ul> <li>left frontal lobe mass appears unchanged on all series.</li> <li>measures 3.3 x 3.2 cm in maximum dimension.</li> <li>enhances moderately on post gadolinium imaging.</li> </ul>"},{"location":"slicer/MRTumorSegment/#skull-stripping","title":"Skull Stripping","text":"<p>In this step, we will remove the skulls from the volumes using the HD Brain Extraction tool. This is not strictly necessary to segment the tumors but it does highlight a cool new technique.</p> <p>Select the HD Brain Extraction tool from the Modules Menu</p> <p></p> <p>And set:</p> <ol> <li>Input volume to <code>MRBrainTumor1</code></li> <li>Skull-stripped volume to <code>Create New Volume</code></li> <li>Brain Segmentation to <code>Create New Segmentation</code> as \"MRBT1SkullStrip\"     </li> <li>Click Apply.<ul> <li>You may get a notice that PyTorch will be installed. Just wait...</li> </ul> </li> </ol> <p>Eventually, you should get something awesome, like the following:</p> <p></p>"},{"location":"slicer/MRTumorSegment/#review-stripping-results","title":"Review Stripping Results","text":"<p>Switch to the Data Module and notice that:</p> <ul> <li>There is a new Volume: \"MRBrainTumor1 stripped\"</li> <li>A new segmentation node has been added called <code>MRBT1SkullStrip</code> and it contains one segment: \"brain\"</li> </ul> <p>Go to the Segment Editor and turn on the 3D view to see the brain in 3D</p>"},{"location":"slicer/MRTumorSegment/#challenge","title":"Challenge","text":"<p>How would you create this scene?</p> <p></p>"},{"location":"slicer/MRTumorSegment/#volume-rendering-with-tumors","title":"Volume Rendering with Tumors","text":"<ol> <li>Turn on Tumor Segmentations in 3D view</li> <li>Turn on coronal slice view in 3D</li> <li>Render the Stripped Skull volume</li> <li>Crop the volume along the interhemispheric fissure</li> <li>Make sure your tumor model is visible</li> </ol>"},{"location":"slicer/TotalSegmentator/","title":"Automated Segmentation using Total Segmentator","text":"<p>Total Segmentator is a 3D Slicer extension for fully automatic whole body CT segmentation using the TotalSegmentator AI model. Computation time is less than one minute.</p>"},{"location":"slicer/TotalSegmentator/#required-extensions","title":"Required extensions","text":"<ul> <li>TotalSegmentator</li> <li>PyTorch</li> </ul>"},{"location":"slicer/TotalSegmentator/#pytorch","title":"Pytorch","text":"<p>PyTorch is a python library for machine learning. Slicer uses this library to run Total Segmentator. Sometimes, this library needs to be updated to be compatible with the latest version of Total Segmentator.</p> <p>The latest version of Total Segmentator requires a version Pytorch greater than 2.0. Bring up the PyTorch Utils module to check what version of PyTorch you have installed.</p> <p></p> <p></p> <p>If the Torch version is 2.2.2 or greater, you should be good to go.</p> <p>If your Torch version is &lt; 2.0</p> <ol> <li><code>Uninstall PyTorch</code></li> <li><code>Restart the application</code></li> <li>Bring up PyTorch Utils again.</li> <li>Set the Torch version requirement to: <code>&gt;=1.12</code></li> <li>If you have a Mac or and AMD Windows machine, set the Computation backend to <code>CPU</code>. Otherwise, if you have a NVIDIA graphics card, leave as <code>automatic</code></li> <li><code>Install PyTorch</code></li> </ol> <p></p>"},{"location":"slicer/TotalSegmentator/#total-segmentator-module","title":"Total Segmentator Module","text":"<p>For this example, we will use the CTChest volume from the Sample Data module. Load that volume into Slicer</p> <p>Bring up the Total Segmentator module</p> <p></p> <ol> <li>Set the Input volume to <code>CTChest</code></li> <li>Set the Segmentation task: to <code>total</code></li> <li>Check Fast on</li> <li>Create new segmentation on Apply</li> <li>Click <code>Apply</code></li> </ol> <p></p> <ul> <li>You may get a notification that certain python items are being installed. Just wait.</li> <li>You should get a notification that module is \"Creating segmentations with the TotalSegmentator AI\". Just wait.</li> <li>Just wait.</li> </ul> <p>Finally, you should get some segmentations.</p> <p></p>"},{"location":"slicer/TotalSegmentator/#review-segmentations","title":"Review segmentations","text":""},{"location":"slicer/TotalSegmentator/#show-the-segmentations-in-3d","title":"Show the Segmentations in 3D","text":"<ol> <li>Switch to the Segmentation Editor</li> <li>Click on Show 3D</li> </ol>"},{"location":"slicer/TotalSegmentator/#hide-some-segmentations","title":"Hide some Segmentations","text":"<ol> <li>Switch to the Data Module</li> <li>There should be a new Segmentation Node called \"CTChest segmentation\"</li> <li>There should be a lot of segmentations in that node.</li> <li>Select all of the Segmentations</li> <li>Right-Click and select \"Hide\" - the eye icons should close for all of the segmentations</li> <li>Selectively click open the eye icons of those segmentations that you want to visualize</li> </ol>"},{"location":"volumeProcessing/WorkflowOverview/","title":"Workflow Overview","text":""},{"location":"volumeProcessing/WorkflowOverview/#volume-review","title":"Volume Review","text":""},{"location":"volumeProcessing/WorkflowOverview/#preprocess-data","title":"Preprocess data","text":"<p>ABOUT ISOTROPIC SPACING and the Spacing Scale setting</p> <p>What isotropic spacing actually does is up- or downsample the 3D volume. Basically, you are adding or subtracting rows, columns, or slices. Subtracting rows and columns means that you are downsampling, which should ultimately create a smaller volume, which in turns saves memory (and hopefully avoids crashing Slicer). Ultimately, you want the total volume loaded into Slicer to take only 1/10 the amount of RAM that is available on your system. For 3D processing, you rarely benefit from having high in-plane resolution if distance between planes is large. For example, a volume of <code>2500 x 2500 x 500</code> (with spacing of <code>0.1x0.1x0.5</code>) will give you approximately same quality 3D reconstructions as a volume of <code>500 x 500 x 500</code> (with spacing of <code>0.5x0.5x0.5</code>). This means we rarely want to upsample and instead should use a larger Spacing scale setting to downsample the volume (even larger than shown here). See the discussion here: Is there a way to reduce the CPU usage and reduce the amount of RAM used? - #3 by goetzf - Support - 3D Slicer Community</p>"},{"location":"volumeProcessing/WorkflowOverview/#segmentation","title":"Segmentation","text":"<p>When you segment, you actually create a new volume that is the same size as the original volume (same number of voxels). This segmentation volume is said to mask the original volume. Segmentation volumes can be either binary volumes (true or false) or label maps, which use whole numbers to indicate connected regions. For this exercise, for example, we will create a segmentation of the Right Kidney. In this segmentation volume, all voxels pertaining to the right kidney will be labeled with a value, like 1. This is not an intensity value, but a label \u2014 that's why they are called label maps.  We will also segment the Left Kidneys \u2014 all those voxels will be labeled with a different value, like 2. And so on. Everywhere that is not segmented will have a label of 0.</p> <p>TO:DO Diagram Showing color overlay and two volumes: one for the labelmap and one for the intensity volume</p> Saving Tips and Reminders <p>How to create Create a New Folder. </p> <p>Notice in the directory column that each file has a default path. We want to change the folder paths for all of these files so that they are stored in the same new folder. To do so, do the following:</p> <ul> <li>Ensure that all of the files are checked. </li> <li>Click on the \"Change directory for selected files\" </li> <li>In the dialog the pops-up, navigate to the location where you want to create your folder. The Documents folder is a good place to start (Macs should avoid saving stuff on the desktop as it can slow down your computer.).</li> <li>Create a new folder in that location</li> <li>Call this folder \"CTFemur\" or something similar. And select OK. </li> </ul> <p>Save everything</p> <ul> <li>Every file should now have the same path in the directory column </li> <li>Every file should be checked in the check column.</li> <li>Click on the Save Button. </li> </ul> <p>Here is a video overview of the Grow from Seeds method: PERKlab - Grow from seeds</p>"},{"location":"volumeProcessing/WorkflowOverview/#model-creation","title":"Model Creation","text":""},{"location":"volumeProcessing/WorkflowOverview/#export","title":"Export","text":""},{"location":"volumeProcessing/volumeIndexing/","title":"Indexing Image Stacks","text":"<p>Volume processing often requires indexing the stack to pull out smaller stacks or individual slices.</p> <p>Indexing image stacks is fairly straightforward \u2014\u00a0you just need to keep track of the Dimensions. For example, if we have a 4D volume, <code>RGB4</code>, with dimensions <code>512x512x3x12</code>, we can index out the Red channel using the following syntax:</p> Index out the Red Channel<pre><code>RED = RGB4(:,:,1,:); % all rows, all columns, channel 1, all z-slices\n</code></pre> <p>\u2026This returns a 4D array with just 1 channel</p> Size of RED<pre><code>size(RED)\n\nans =\n\n   512   512     1    12\n</code></pre> <p>We can drop the singleton dimension (dimension three) using the function squeeze.</p> Squeeze 4D array into a 3D array<pre><code>RED = squeeze(RED);\n\nsize(RED)\n\nans =\n\n   512   512   12\n</code></pre> <p>\u2026Now <code>RED</code> is a 3D array.</p> <p>We can index a single slice out of <code>RED</code> using the following syntax:</p> Indexing out the Sixth Slice from RED<pre><code>slice = RED(:,:,6)\n</code></pre> Size of slice<pre><code>size(slice)\n\nans =\n\n   512   512\n</code></pre> <p>\u2026<code>slice</code> is a <code>512x512</code> image.</p> <p>If we wanted all three channels in a slice, we simply index the original, 4D volume, <code>RGB4</code>.</p> Index out 6th Slice from RGB4<pre><code>rgb_slice = RGB4(:,:,:,6); % all rows, all columns, all channels, slice 6\n</code></pre> Size of slice<pre><code>size(rgb_slice)\n\nans =\n\n   512   512   3\n</code></pre> <p>\u2026<code>rgb_slice</code> is an image with 3 channels (RGB image).</p> <p>So, we can index out a color channel by accessing the third dimension and index out a z-plane by accessing the 4th dimension.</p>"},{"location":"volumeProcessing/volumeLoadingMicroscopy/","title":"Loading Microscopy Volumes","text":"<p>Image volumes created by advanced micrography, such as confocal imaging, are best loaded into MATLAB using the Bio-formats MATLAB toolbox, bfmatlab. This toolbox can handle the proprietary file formats generated by all of the major microscope manufacturers. Saving image stacks in the proprietary file format of the microscope best ensures that the full resolution and  bit-depth of the image data is preserved, along with all captured metadata.</p> <p>In this example, we will load a 4D image stack of a taste bud.</p> <p></p> <p>This image stack has 4 Dimensions. Its size is <code>512x512x3x12</code>, which means that each individual slice in the stack is <code>512x512</code> and has three channels (like an RGB image). And there are 12 of these slices.</p>"},{"location":"volumeProcessing/volumeLoadingMicroscopy/#mmreadimgnd","title":"mmReadImgND","text":"<p>The course function mmReadImgND is a wrapper for the tools included in the bfmatlab toolbox. The following syntax loads a color image stack created by a confocal microscope.</p> Load confocal image dataset<pre><code>[RGB4,meta] = mmReadImgND(\"2641-tastebud-RGB.tif\");\n</code></pre> <p>Reviewing the workspace shows the size and class of RGB4\u2026</p> result<pre><code>  Name        Size                    Bytes  Class     Attributes\n\n  RGB4      512x512x3x12            9437184  uint8               \n  meta        1x1                      3775  struct              \n</code></pre> <p>\u2026RGB4 is an 8-bit 4D array. It has 3 channels and 12 image slices. Each image slice in the volume has 512 rows (Height) and 512 columns (Width).</p> <p>Reviewing the <code>meta</code> structure reveals the same information , along with size of the voxels (PixelSpacing) in this volume:</p> <pre><code>meta = struct with fields:\n            filename: \"2641-tastebud-RGB.tif\"\n    StudyDescription: '2641-tastebud-RGB.tif'\n      SeriesSelected: 0\n               Width: 512\n              Height: 512\n            BitDepth: 'uint8'\n        PixelSpacing: [0.30333 0.30333 0.75531]\n        ChannelCount: 3\n          PlaneCount: 12\n           TimeCount: 1\n                 XML: \"&lt;?xml version=\"1.0\" encoding=\"utf-8\"?&gt;\u21b5&lt;OME xmlns:xsi=\"http://www.w3.org/2001/XMLSchema-instance\" xsi:schemaLocation=\"http://www.openmicroscopy.org/Schemas/OME/2016-06 http://www.openmicroscopy.org/Schemas/OME/2016-06/ome.xsd\"&gt;\u21b5&lt;Image ID=\"Image:0\" Name=\"2641-tastebud-RGB.tif\"&gt;\u21b5&lt;Description/&gt;\u21b5&lt;Pixels BigEndian=\"true\" DimensionOrder=\"XYCZT\" ID=\"Pixels:0\" Interleaved=\"false\" PhysicalSizeX=\"0.303326643969745\" PhysicalSizeXUnit=\"\u00b5m\" PhysicalSizeY=\"0.303326643969745\" PhysicalSizeYUnit=\"\u00b5m\" PhysicalSizeZ=\"0.755310778914241\" PhysicalSizeZUnit=\"\u00b5m\" SignificantBits=\"8\" SizeC=\"3\" SizeT=\"1\" SizeX=\"512\" SizeY=\"512\" SizeZ=\"12\" Type=\"uint8\"&gt;\u21b5&lt;Channel ID=\"Channel:0:0\" SamplesPerPixel=\"1\"&gt;\u21b5&lt;LightPath/&gt;\u21b5&lt;/Channel&gt;\u21b5&lt;Channel ID=\"Channel:0:1\" SamplesPerPixel=\"1\"&gt;\u21b5&lt;LightPath/&gt;\u21b5&lt;/Channel&gt;\u21b5&lt;Channel ID=\"Channel:0:2\" SamplesPerPixel=\"1\"&gt;\u21b5&lt;LightPath/&gt;\u21b5&lt;/Channel&gt;\u21b5&lt;MetadataOnly/&gt;\u21b5&lt;/Pixels&gt;\u21b5&lt;/Image&gt;\u21b5&lt;/OME&gt;\"\n</code></pre>"},{"location":"volumeProcessing/volumeLoadingMicroscopy/#using-imread","title":"Using imread","text":"<p>The imread function can be used to image stacks saved in the .TIF file format.</p> <p>To load an image stack, you first need information about that stack. In this example, we will use this .TIF file</p> <p>The function imfinfo returns the metadata for an image stack.</p> Load the metadata<pre><code>meta = imfinfo(\"TasteBud3D.tif\")\n</code></pre> Output from imfinfo<pre><code>meta = \n\n  12\u00d71 struct array with fields:\n\n    Filename\n    FileModDate\n    FileSize\n    Format\n    FormatVersion\n    Width\n    Height\n    \u22ee\n</code></pre> <p>\u2026For this example file, we get a lot of metadata (more than 39 fields). Notice that <code>meta</code> is a <code>12X1</code> structure, so in fact, you get a metadata structure element for each slice in the image stack. This is one way to determine the number of slices in the image stack. Most of the data is repeated for each slice, so we can examine the metadata for the first image slice to get information about the image slices:</p> Review element 1 of the metadata structure<pre><code>numel(meta) % number of slices\n\nans = \n\n    12\n\nmeta(1).Width % number of columns\n\nans =\n\n   512\n\nmeta(1).Height % number of rows\n\nans =\n\n   512\nmeta(1).BitDepth % bit depth\n\nans =\n\n     8\n</code></pre> <p>\u2026Here we review the first element in the metadata structure and we find that each slice in the image stack is an unsigned 8-bit image with 512 rows (Height) and 512 columns (Width). So, the size of our image stack is <code>512 X 512 X 12</code>.</p> <p>The function <code>imread</code> can read slices from a .TIF image stack. To read in a slice, you call <code>imread</code> as you would for a 2D image. The following code loads the first slice from a 3D Image stack.</p> Read a single slice using imread<pre><code>slice = imread(\"TasteBud3D.tif\") % read in the first slice\n</code></pre> <p>If you want to load a different slice, you indicate the slice number as a second input in imread</p> Indicate which slice to read using imread<pre><code>slice3 = imread(\"TasteBud3D.tif\",3) % read in the third slice\n</code></pre> <p>If you want to load the whole stack using <code>imread</code>, you need a <code>FOR LOOP</code>.</p> Load a TIF image stack using imread<pre><code>% preallocate variable\nnum_rows = meta(1).Height; % number of rows\nnum_cols = meta(1).Width; % number of columns\nnum_slices = numel(meta); % number of slices in the image stack\nSTACK = zeros(num_rows, num_cols, num_slices,'uint8'); % preallocate the variable as a uint8 3D array\n\n% load image stack slice by slice\nfor n=1:num_slices\n    slice = imread(\"TasteBud3D.tif\",n); % read slice from file\n    STACK(:,:,n) = slice; % add slice to incrementing location in stack\nend\n</code></pre> <p>\u2026When loading large datasets, it is always a good idea to preallocate the variable prior to running the <code>FOR LOOP</code>. Notice how we match the bit depth of the preallocated variable to the bit depth of the image stack. Failure to do so results in bit depth mismatching and much gnashing of teeth.</p> <p>Reviewing the image stack in the workspace shows the following:</p> Output from whos<pre><code>  Name               Size                    Bytes  Class     Attributes\n\n  STACK            512x512x12              3145728  uint8               \n</code></pre> <p>\u2026The image stack is loaded into MATLAB just like any other numeric array.</p>"},{"location":"volumeProcessing/volumeMedicalFileFormats/","title":"Medical Volume File Formats","text":"<p>There are two main types of file formats for Medical Volumes</p> <ol> <li>Raster Files - stores the data as a grid of voxels (just like 2D raster formats like tiff or png)</li> <li>Geometry Definition Format files - stores 3D model data as a list of vertices and faces (and other data)</li> </ol>"},{"location":"volumeProcessing/volumeMedicalFileFormats/#volume-raster-formats","title":"Volume (Raster) Formats","text":"<p>A raster format is a file format used to store the voxel intensity data (like a 3D image file). We will use several different common formats, as detailed below.</p>"},{"location":"volumeProcessing/volumeMedicalFileFormats/#dicom","title":"DICOM","text":"<p>Digital Imaging and Communications in Medicine. DICOM is one of the main standards for handling, storing, printing, and transmitting information in medical imaging. It includes a file format definition and a network communications protocol.</p> <p>Image stacks are typically saved as individual image files. The metadata in each image file contains information about the entire image stack.</p> <p>The DICOM standard is maintained by the Medical Imaging &amp; Technology Alliance, which is part of National Electrical Manufacturers Association - the people that build CT and MRI scanners</p>"},{"location":"volumeProcessing/volumeMedicalFileFormats/#nrrd","title":"NRRD","text":"<p>nrrd (\"nearly raw raster data\") is a library and file format for the representation and processing of n-dimensional raster data. It is intended to support scientific visualization and image processing applications.</p> <p>NRRD datasets are typically stored as a single file.</p>"},{"location":"volumeProcessing/volumeMedicalFileFormats/#vtk","title":"VTK","text":"<p>The Visualization Toolkit (VTK) is an open-source, freely available software system for 3D computer graphics, image processing and visualization.</p> <p>Open source software that uses VTK is usually pretty powerful. For example, 3D Slicer uses VTK for visualization.</p> <p>VTK has their own file format</p>"},{"location":"volumeProcessing/volumeMedicalFileFormats/#nifti","title":"NIfTI","text":"<p>Neuroimaging Informatics Technology Initiative. An NIH funded initiative to support and enhance the use of informatics tools related to neuroimaging.</p> <p>The following is a table of the Raster formats we will be using in this course.</p> Format File Extension Read Write DICOM .dcm yes no NRRD .nrrd, .nhdr yes yes VTK .vtk yes yes NifTI .nia, .nii, .nii.gz yes yes PNG .png yes yes TIFF .tif, .tiff yes yes <p>You can find a complete list of the 3D slicer supported files on the Supported Formats Page</p>"},{"location":"volumeProcessing/volumeMedicalFileFormats/#3d-geometry-model-formats","title":"3D Geometry Model Formats","text":""},{"location":"volumeProcessing/volumeMedicalFileFormats/#stl","title":"STL","text":"<p>STL (STereoLithography) - originated from stereolithography CAD software created by 3D Systems.</p> <p>An STL file describes a raw unstructured triangulated surface by the unit normal and vertices (ordered by the right-hand rule) of the triangles using a three-dimensional Cartesian coordinate system.</p> <p>STL coordinates can be positive or negative numbers; the format does not specify units or scale, and the units are arbitrary.</p>"},{"location":"volumeProcessing/volumeMedicalFileFormats/#obj","title":"OBJ","text":"<p>OBJ (or .OBJ) is a geometry definition file format developed by Wavefront Technologies for its Advanced Visualizer animation package</p> <p>A very simple file format that represents 3D geometry and can store the following info:</p> <ul> <li> <p>The position of each vertex</p> </li> <li> <p>The UV position of each texture coordinate vertex</p> </li> <li> <p>The vertex normals</p> </li> <li> <p>The faces that make each polygon defined as a list of vertices</p> </li> <li> <p>The texture vertices, which define how textures are mapped onto the surface of the model.</p> </li> </ul>"},{"location":"volumeProcessing/volumeMedicalFileFormats/#3d-slicer-supported-geometry-file-formats","title":"3D Slicer Supported Geometry file formats","text":"Format Extension Read Write VTK Polygonal Data .vtk yes yes VTK XML Polygonal Data .vtp yes yes STL .stl yes yes OBJ .obj yes depends <p>Note: Write support for OBJ files may depend on the software used. Some tools can export OBJ files, while others may not.</p>"},{"location":"volumeProcessing/volumeMedicalFileFormats/#additional-slicer-specific-formats","title":"Additional Slicer Specific Formats","text":"<ul> <li>MRB: Medical record bundle. Can group different Slicer supported files together into a single, unified file. e.g. In an MRB, you can store both Raster Volumes and Models together.</li> </ul>"},{"location":"volumeProcessing/volumeOverview/","title":"Volumetric Image Data","text":"<p>Image volumes are like a deck of cards  in that they are basically a stack of sequential images. In fact, image volumes are often called image stacks. The simplest image volumes have just the three dimensions: X,Y, and Z. In these volumes, images are stored in the xy-plane (like the cards in the deck) and then stacked along the z-dimension, like in this image here:</p> <p></p> <p>Confocal Image Stack from a mouse taste bud. This image stack was created by a confocal microscope, which captured the volume slice by slice. Starting at the top of the tissue, the microscope captured the surface layer of the tissue and then adjusted the focal plane down the z-axis to captured the next layer. Because the depth of each layer is changed by adjusting the focal plane (and not physically cutting the tissue), each image in this stack is also called an optical slice. As you can see, there are 12 optical slices in this confocal stack. Each optical slice has 512 rows and 512 columns (height and width). Note, in this visualization, the slices along the z-dimension are artificially separated for display purposes to delineate all slices in the stack</p>"},{"location":"volumeProcessing/volumeOverview/#multidimensional-volumes","title":"Multidimensional Volumes","text":"<p>In addition to depth, image stacks can also contain color or time information. This information is stored in higher dimensions of the volume. Such volumes are sometimes labeled as <code>XYCZT</code>, to indicate the following:</p> Dimension Denotation Description 1 X the number of columns in the image plane 2 Y the number of rows in the image plane 3 C the number of color channels in the volume 4 Z the number of z-slices (or depth) in the volume 5 T the number of time frames in the volume <p>So, in an <code>XYCZT</code> volume, the first 2 dimensions, X and Y, contain information for a given image plane in the volume, while the higher dimensions represent color, depth, and time, in that order. Note that the order of dimensions can vary depending on the imaging system or software used. For instance, some volumes may be organized as XYZCT or follow another similar permutation.</p> <p></p> <p>Color Image Stack. As you can see in the above volume, a color component was also captured with each slice.</p>"},{"location":"volumeProcessing/volumeOverview/#volume-and-voxels","title":"Volume and Voxels","text":"<p>Another way to think of an image volume is as a cube made up of smaller cubes, almost like a Rubik's cube. In this visualization, each of the smaller cubes is called a voxel, the 3D version of a pixel. Like pixels, voxels are point samples and have dimensionality (meaning they have a length, width, and height).</p>"},{"location":"volumeProcessing/volumeOverview/#isotropic-vs-anisotropic","title":"Isotropic vs Anisotropic","text":"<p>When the dimensions of a voxel are identical, the voxel is isotropic; when they are not, the voxel is anisotropic. In the taste bud image stack, the voxel dimensions are 0.3 \u00b5m (x-axis) x 0.3 \u00b5m (y-axis) x 0.75 \u00b5m (z-axis). So, the voxels in this image stack are not perfect little cubes (aka isotropic), but are instead cuboidal (aka anisotropic).</p> <p></p> <p>Isotropic vs Anistropic. The sides of the isotropic voxel are equal along all dimensions, like a perfect cube or a die, while the sides of an anisotropic voxel are equal along the x &amp; y dimensions but different along the z-dimension, resembling a rectangular brick.</p>"},{"location":"volumeProcessing/volumeOverview/#measuring-the-volume","title":"Measuring the Volume","text":"<p>Since voxels have dimensionality, i.e. the lengths of their sides represent real-world measurements, we can use voxels to measure structures inside the volume or the size of the volume itself.</p> <p>You can usually get the real-world size of a voxel by referencing the metadata. In the above example of a taste bud, the pixel dimensions are 0.3 X 0.3 in the xy plane and 0.75 in the z-plane. So, for example, to get the thickness of the tissue in \u00b5m you simply multiply the z-dimension of the voxel by 12 (since there are 12 slices).</p> \\[ 0.75 * 12 = 9 \\, \u00b5m \\] <p>\u2026And we find that we have a very thin slice of tissue!</p> <p>To calculate  volume, you first calculate the volume of a single voxel by multiplying the sides of the voxel:</p> \\[ 0.3 * 0.3 * 0.75 = 0.0675 \u00b5m^3 \\] <p>\u2026This volume is smaller than that of an E.coli bacterium.</p> <p>To calculate the volume of the whole image stack, you multiply the volume of a voxel by the total number of voxels in the stack\u2026</p> \\[ 512 \\times 512 \\times 12 = 3,145,728 \\, voxels \\] <p>\u2026which converts to\u2026</p> \\[ 3,145,728 \\times 0.0675 \\, \\mu\\text{m}^3 = 212,336.64 \\, \\mu\\text{m}^3 \\] <p>So the total volume of the image stack is \\(2.12 \\times 10^{-7}\\) mL \u2014 again, very, very small! (1). If we wanted to calculate the volume of an internal structure inside the volume, we would first segment that structure, add up the number of voxels contained in that structure, and then multiply that number by size of a voxel.</p> <ol> <li>Note: This conversion is based on the fact that \\(1 \\, \\mu\\text{m}^3 = 10^{-15} \\, \\text{m}^3\\), and \\(1 \\, \\text{m}^3 = 10^3 \\, \\text{L} = 10^6 \\, \\text{mL}\\), so \\(1\\, \\mu\\text{m}^3 = 10^{-12}\\) mL</li> </ol>"},{"location":"volumeProcessing/volumeRendering/","title":"3D Visualization","text":"<p>When dealing with Image Volumes, it is often useful to see \"inside\" the volume \u2014\u00a0that is, to construct 3D representations of internal structures inside that volume. 3D Rendering is the computer graphics process of converting 3D models into 2D images for display on a 2D computer screen. The process considers the positioning of the objects in this 3D scene and renders a 2D image based on this perspective. Any change in the view, such as rotating the scene, generates a new render to reflect the new perspective of the 3D scene, as shown below.</p> <p></p> <p>In 3D graphics, the Viewing frustrum is the computed view from a virtual camera, represented here as a truncated pyramid lying on its side. Notice the smaller end of the pyramid is closest to the camera, while the large end is further way, representing foreshortening. Everything between the near and far clip planes is the viewing area, and will be rendered. Here, the \"near clip plane\" represents what is rendered in the 3D Scene. If you move the position of the camera, you change the position of the viewing frustrum and render a different image. For example, if you rotate the camera to the right, the red cylinder would appear in front of the yellow sphere.</p> <p>There are two main types of rendering that we deal with in this course:</p> <ul> <li> <p>Volume Rendering: visualizes 3D structures by  adjusting the transparencies of the voxels of a 3D volume. Usually, you make completely transparent the outer edge and background voxels, while keeping opaque internal voxels that comprise the structures of interest. Typically, this involves creating a lookup table of transparencies, called an alphamap, that determines the transparencies values for all the voxels in the volume. Only voxels that are not completely transparent are rendered.</p> </li> <li> <p>Surface rendering: visualizes a surface model of an internal structure. For surface rendering, you first need to create a surface model, typically by connecting voxels with same intensity values and then wrapping a 3D surface (aka mesh) around those voxels. Other pre-processing steps may be required, often making surface rendering more time consuming. In this method, only the surface is rendered, the rest of the volume is ignored. This technique is commonly used in medical imaging to visualize segmented structures like bones or organs.</p> </li> </ul>"},{"location":"volumeProcessing/volumeRendering/#the-volume-viewer-app","title":"The Volume Viewer App","text":"<p>The MATLAB app <code>volumeViewer</code> accepts 3D volumes and can render them in 3D, allowing users to visualize and interact with the volumes in a graphical interface.</p> <p>For this example, we will load a confocal stack of a fruit fly brain.</p> Load Fly Brain<pre><code>[FB,meta] = mmReadImgND(\"flybrain.tif\");\n</code></pre> Review volume using whos<pre><code>  Name        Size                     Bytes  Class     Attributes\n\n  FB        256x256x3x57            11206656  uint8               \n  meta        1x1                       3725  struct       \n</code></pre> <ul> <li>FB is a 4D array with 3 channels and 57 slices. Note that the blue channel is blank (all zeros), which means it does not contribute to the rendering process and can be ignored or excluded when visualizing or processing the data.</li> </ul>"},{"location":"volumeProcessing/volumeRendering/#volume-rendering","title":"Volume Rendering","text":"<p><code>volumeViewer</code> can only handle 3D volumes. So, we'll extract the green channel and display using the app.</p> Load Ch2 into Volume Viewer<pre><code>FBg = squeeze(FB(:,:,2,:)); % extract ch2\nvolumeViewer(FBg) % display channel 2 in the Volume Viewer app\n</code></pre> <p></p> <p>Screen grab of the Volume Viewer app showing a volume render of the green channel from the fly brain. The layout has been changed to \"Stack 2D slices\".</p> <p>In the Left Panel, of the Volume viewer, we see orthogonal slice views from the middle of the volume. The top orthogonal view shows an aerial view of the volume, where the direction of the Z-axis is \"out of the screen\", towards the viewer. The other two views show views from the sides of the volume, where either the X or Y axis \"comes out of the screen.\" You drag the scroll bar to scrub through slices in the volume along the axis that is coming out of the screen.</p> <p>The Large Middle Panel, shows A 3D render of the volume. In this render, the background voxels surrounding the fly brain have been set to completely transparent, while the voxels that make up the brain tissue are semi-opaque.</p> <p>In the Right Panel, we find the Volume Rendering settings. At the top, the pop-up menu is set to \"Volume Rendering.\" The \"Alpha\" panel shows the alphamap: a lookup table of voxel transparencies. The alphamap is currently set to \"linear.\" In simple terms, this means that voxels with low intensity values (like 0) are completely transparent, while brighter voxels are more opaque. This allows the background to disappear while highlighting the structures of interest. The \"Color\" panel shows the colormap (LUT) settings, which in this case is set to the default gray colormap.</p> <p>We can adjust the Volume Rendering displays using the settings in the right panel.</p> <p></p> <p>Adjusting volume rendering settings. Here we changed the volume render by  adjusting the alphamap to make the background voxels more opaque. We do this by dragging the left point on the line plot slightly upward (red arrow). We also changed the colormap to <code>parula</code> in the \"Color\" panel.</p> <p>There are of course many ways to change the volume render. The \"Alphamap\" pop-up menu contains a variety of alphamap presets. These are primarily for medical image datasets and are name accordingly: e.g. MRI or CT-BONE. You can also roll your own alphamap by adding points to the alphamap line plot and adjusting their positions manually.</p> <p></p> <p>Comparison of transparency map presets. Notice how the changes in the transparency map line plot change which voxels in the volume are rendered. Left Image. <code>ct-bone</code> preset. Right Image <code>mri</code> preset.</p>"},{"location":"volumeProcessing/volumeRendering/#volshow","title":"volshow","text":"<p>The function volshow renders the inputed volume using the default alphamap settings.</p> <p></p> <p>Similar to imshow, volshow renders the image in its own figure or directly into a Live Script. To adjust the alphamap, you need to add inputs into the function call. Review the MATLAB help documentation for more information.</p>"},{"location":"volumeProcessing/volumeRendering/#isosurface","title":"Isosurface","text":"<p>An isosurface is a 3D surface created by connecting voxels with the same intensities. volumeViewer can create such a surface by Switching the Rendering Engine to \"Isosurface\".</p> <p></p> <p>Isosurface render of the fly brain. Notice the controls have changed dramatically in the right panel \u2014 you get one control: a slider.</p> <p>For the isosurface display, volumeViewer does a lot of the processing legwork in the background. First, it constructs a segmented mask of the volume, capturing voxels that fall within the range of the Isovalue set by the slider. Then, it creates a 3D surface based on this mask. Finally, it renders the surface as the beautiful red \"isosurface\" we see displayed here. Adjusting the Isovalue restarts the process, modifying the generated surface and render displayed.</p>"},{"location":"volumeProcessing/volumeVisualization/","title":"Viewing Image Stacks","text":"<p>Viewing image stacks often starts by viewing the individual slices of the stack.  Consider the taste bud image stack.</p> <p></p> <p>This image stack has 4 Dimensions. Its size is <code>512x512x3x12</code>, where the first two dimensions (<code>512x512</code>) represent the height and width of each slice, the third dimension (<code>3</code>) corresponds to the color channels (e.g., RGB), and the fourth dimension (<code>12</code>) represents the number of slices in the stack.</p>"},{"location":"volumeProcessing/volumeVisualization/#viewing-individual-slices","title":"Viewing Individual Slices","text":"<p>A simple way to review the image stack is to index out and view single slices, as follows.</p> Display single channel slice<pre><code>slice = RGB4(:,:,1,6); % all rows, all columns, channel 1, slice 6\nimshow(slice)\ntitle(\"Red Channel, Slice 6\")\n</code></pre> <p></p> <p>You can also display a slice with all the channels, as follows:</p> Display slice in color<pre><code>imshow(RGB4(:,:,:,6))\ntitle(\"All Channel, Slice 6\")\n</code></pre> <p></p>"},{"location":"volumeProcessing/volumeVisualization/#course-function-mmsliceview","title":"Course Function - mmSliceView","text":"<p>The course function mmSliceView is a custom MATLAB function designed to display individual slices from an image stack interactively.</p> mmSliceView<pre><code>mmSliceView(RGB4)\n</code></pre> <p></p> <p>Using mmSliceView, you can scrub through the slices of the stack using the mouse scroll wheel. You can also adjust the contrast of the image slice and specify which channel to display.</p>"},{"location":"volumeProcessing/volumeVisualization/#montage","title":"Montage","text":"<p>To view all slices of a stack in a single view, you can use the function <code>montage</code>, which reformats all the slices into a 2D matrix of images. This works better with a small number of slices.</p> Display Montage<pre><code>montage(RGB4)\n</code></pre> <p></p> <p>As you can see, <code>montage</code> accepts 4D arrays with 3 channels. It reformats all the slices into a grid layout (2D matrix) for visualization purposes and displays them as an RGB image. The first slice is positioned in the upper left corner, and the last slice is in the bottom right corner. Notice the montage contains 12 different color images, one for each slice.</p> <p>If we want to inspect just one channel, you first index out the channel of interest and then plug the 3D array into <code>montage</code>.</p> View Blue Channel as a montage<pre><code>BLUE = squeeze(RGB4(:,:,3,:)); % index out the blue channel as a 3D array\nmontage(BLUE)\n</code></pre> <p></p> <p>A <code>4X3</code> montage of all the slices from the BLUE 3D image stack. The number of each slice has been added to the top left corner of each cross-section for clarity.</p>"},{"location":"volumeProcessing/volumeVisualization/#max-projections","title":"Max Projections","text":"<p>Another way to view an image stack is as a max projection, which enhances visibility by collapsing the brightest structures across slices into a single image. This technique is particularly useful for highlighting features that span multiple slices or for summarizing the entire stack in one view.  It's like an aerial view of the image stack.</p> <p>Here, we create a max projection of the BLUE array we created above. Recall that <code>BLUE</code> is a 3D array where the z-axis is in the 3rd dimension:</p> Max Projection of a 3D array<pre><code>proj = max(BLUE,[],3); % max projection across 3rd dimension.\nimshow(proj)\ntitle(\"Max Projection Blue Channel\")\n</code></pre> <p></p> <p>Notice this image has more information than any of the individual slices shown in the above montage.</p> <p>We can create a color projection by capturing a max projection of a 4D array. Remember, in a 4D array, the z-axis is in the 4th dimension.</p> Max Projection of a 4D array<pre><code>proj = max(RGB4,[],4); % max projection across 4th dimension\nimshow(proj)\n</code></pre> <p></p> <p>Here, the max projection ,<code>proj</code>, retains the color information from the original 4D array, with 3 channels displayed in color.</p>"}]}